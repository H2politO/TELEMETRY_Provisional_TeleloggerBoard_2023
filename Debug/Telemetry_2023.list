
Telemetry_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000866c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008884  08008884  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08008884  08008884  00018884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800888c  0800888c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008890  08008890  00018890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c5c  2000010c  080089a0  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d68  080089a0  00021d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f00  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000329b  00000000  00000000  0003203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000352d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  000360a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a37  00000000  00000000  00036ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131ea  00000000  00000000  0005b717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc64d  00000000  00000000  0006e901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013af4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f8  00000000  00000000  0013afa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008818 	.word	0x08008818

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08008818 	.word	0x08008818

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_CAN2_Init+0x64>)
 800051e:	4a18      	ldr	r2, [pc, #96]	; (8000580 <MX_CAN2_Init+0x68>)
 8000520:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_CAN2_Init+0x64>)
 8000524:	220a      	movs	r2, #10
 8000526:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_CAN2_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <MX_CAN2_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_CAN2_Init+0x64>)
 8000536:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800053a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_CAN2_Init+0x64>)
 800053e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000542:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <MX_CAN2_Init+0x64>)
 8000546:	2200      	movs	r2, #0
 8000548:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_CAN2_Init+0x64>)
 800054c:	2200      	movs	r2, #0
 800054e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <MX_CAN2_Init+0x64>)
 8000552:	2200      	movs	r2, #0
 8000554:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_CAN2_Init+0x64>)
 8000558:	2200      	movs	r2, #0
 800055a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <MX_CAN2_Init+0x64>)
 800055e:	2200      	movs	r2, #0
 8000560:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_CAN2_Init+0x64>)
 8000564:	2200      	movs	r2, #0
 8000566:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <MX_CAN2_Init+0x64>)
 800056a:	f000 fb0b 	bl	8000b84 <HAL_CAN_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000574:	f000 f966 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2000012c 	.word	0x2000012c
 8000580:	40006800 	.word	0x40006800

08000584 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a24      	ldr	r2, [pc, #144]	; (8000634 <HAL_CAN_MspInit+0xb0>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d141      	bne.n	800062a <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b23      	ldr	r3, [pc, #140]	; (8000638 <HAL_CAN_MspInit+0xb4>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ae:	4a22      	ldr	r2, [pc, #136]	; (8000638 <HAL_CAN_MspInit+0xb4>)
 80005b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005b4:	6413      	str	r3, [r2, #64]	; 0x40
 80005b6:	4b20      	ldr	r3, [pc, #128]	; (8000638 <HAL_CAN_MspInit+0xb4>)
 80005b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <HAL_CAN_MspInit+0xb4>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <HAL_CAN_MspInit+0xb4>)
 80005cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d0:	6413      	str	r3, [r2, #64]	; 0x40
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <HAL_CAN_MspInit+0xb4>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_CAN_MspInit+0xb4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a14      	ldr	r2, [pc, #80]	; (8000638 <HAL_CAN_MspInit+0xb4>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_CAN_MspInit+0xb4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80005fa:	2360      	movs	r3, #96	; 0x60
 80005fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000606:	2303      	movs	r3, #3
 8000608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800060a:	2309      	movs	r3, #9
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <HAL_CAN_MspInit+0xb8>)
 8000616:	f001 f955 	bl	80018c4 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	2040      	movs	r0, #64	; 0x40
 8000620:	f001 f919 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000624:	2040      	movs	r0, #64	; 0x40
 8000626:	f001 f932 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800062a:	bf00      	nop
 800062c:	3728      	adds	r7, #40	; 0x28
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40006800 	.word	0x40006800
 8000638:	40023800 	.word	0x40023800
 800063c:	40020400 	.word	0x40020400

08000640 <SetCAN_Flag_HeartBeat>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SetCAN_Flag_HeartBeat(uint8_t value) {
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  CAN_Flag_Status.CAN_Flag_HeartBeat = value;
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <SetCAN_Flag_HeartBeat+0x1c>)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	7013      	strb	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	20000128 	.word	0x20000128

08000660 <sendCAN>:

void sendCAN(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef Can_Tx_Header;
	if (CAN_Flag_Status.CAN_Flag_HeartBeat == ENABLE) {
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <sendCAN+0x48>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b01      	cmp	r3, #1
 800066e:	d116      	bne.n	800069e <sendCAN+0x3e>
	    CAN_Flag_Status.CAN_Flag_HeartBeat = DISABLE;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <sendCAN+0x48>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]

	    Can_Tx_Header.IDE = CAN_ID_STD;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
	    Can_Tx_Header.StdId = ID_TELEMETRY_HEARTBEAT;
 800067a:	2359      	movs	r3, #89	; 0x59
 800067c:	60bb      	str	r3, [r7, #8]
	    Can_Tx_Header.RTR = CAN_RTR_DATA;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
	    Can_Tx_Header.DLC = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
	    uint8_t empty_mex[0];
	    uint32_t null_point;

	    /* Transmit the message if there is an available mailbox -----------------*/
	    while(HAL_CAN_AddTxMessage(&hcan2, &Can_Tx_Header, empty_mex, &null_point)!=HAL_OK){};
 8000686:	bf00      	nop
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	f107 0208 	add.w	r2, r7, #8
 800068e:	f107 0108 	add.w	r1, r7, #8
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <sendCAN+0x4c>)
 8000694:	f000 fbb5 	bl	8000e02 <HAL_CAN_AddTxMessage>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1f4      	bne.n	8000688 <sendCAN+0x28>
	  }
}
 800069e:	bf00      	nop
 80006a0:	3720      	adds	r7, #32
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000128 	.word	0x20000128
 80006ac:	2000012c 	.word	0x2000012c

080006b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_GPIO_Init+0x84>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <MX_GPIO_Init+0x84>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_GPIO_Init+0x84>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_GPIO_Init+0x84>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a16      	ldr	r2, [pc, #88]	; (8000734 <MX_GPIO_Init+0x84>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_GPIO_Init+0x84>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_GPIO_Init+0x84>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <MX_GPIO_Init+0x84>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <MX_GPIO_Init+0x84>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_GPIO_Init+0x84>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <MX_GPIO_Init+0x84>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_GPIO_Init+0x84>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 f98c 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f80e 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f7ff ffb4 	bl	80006b0 <MX_GPIO_Init>
  MX_CAN2_Init();
 8000748:	f7ff fee6 	bl	8000518 <MX_CAN2_Init>
  MX_USB_DEVICE_Init();
 800074c:	f007 fa8c 	bl	8007c68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan2);
 8000750:	4802      	ldr	r0, [pc, #8]	; (800075c <main+0x24>)
 8000752:	f000 fb12 	bl	8000d7a <HAL_CAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sendCAN();
 8000756:	f7ff ff83 	bl	8000660 <sendCAN>
 800075a:	e7fc      	b.n	8000756 <main+0x1e>
 800075c:	2000012c 	.word	0x2000012c

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2234      	movs	r2, #52	; 0x34
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f008 f83a 	bl	80087e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <SystemClock_Config+0xdc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a2b      	ldr	r2, [pc, #172]	; (800083c <SystemClock_Config+0xdc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <SystemClock_Config+0xdc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	4b26      	ldr	r3, [pc, #152]	; (8000840 <SystemClock_Config+0xe0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a25      	ldr	r2, [pc, #148]	; (8000840 <SystemClock_Config+0xe0>)
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b23      	ldr	r3, [pc, #140]	; (8000840 <SystemClock_Config+0xe0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007d4:	23b4      	movs	r3, #180	; 0xb4
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007dc:	2307      	movs	r3, #7
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fb65 	bl	8003eb8 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f4:	f000 f826 	bl	8000844 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f8:	f002 fcc2 	bl	8003180 <HAL_PWREx_EnableOverDrive>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000802:	f000 f81f 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2302      	movs	r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000812:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2105      	movs	r1, #5
 8000824:	4618      	mov	r0, r3
 8000826:	f002 fcfb 	bl	8003220 <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000830:	f000 f808 	bl	8000844 <Error_Handler>
  }
}
 8000834:	bf00      	nop
 8000836:	3750      	adds	r7, #80	; 0x50
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <HAL_MspInit+0x4c>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f906 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  sys_tick_count = HAL_GetTick();
 80008f0:	f000 f918 	bl	8000b24 <HAL_GetTick>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <SysTick_Handler+0x38>)
 80008f8:	6013      	str	r3, [r2, #0]
  if((sys_tick_count % 1000) == 0){
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <SysTick_Handler+0x38>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <SysTick_Handler+0x3c>)
 8000900:	fba3 1302 	umull	r1, r3, r3, r2
 8000904:	099b      	lsrs	r3, r3, #6
 8000906:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800090a:	fb01 f303 	mul.w	r3, r1, r3
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <SysTick_Handler+0x32>
	  //tx_heartbeat
	  SetCAN_Flag_HeartBeat(ENABLE);
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff fe93 	bl	8000640 <SetCAN_Flag_HeartBeat>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000154 	.word	0x20000154
 8000924:	10624dd3 	.word	0x10624dd3

08000928 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b08d      	sub	sp, #52	; 0x34
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800092e:	4825      	ldr	r0, [pc, #148]	; (80009c4 <CAN2_RX0_IRQHandler+0x9c>)
 8000930:	f000 fc7c 	bl	800122c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
  CAN_RxHeaderTypeDef RxMessage_header;
  uint8_t Rx_Data[8]={0};
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]

  while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) != 0){
 800093c:	e036      	b.n	80009ac <CAN2_RX0_IRQHandler+0x84>

	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxMessage_header, Rx_Data);
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	f107 0210 	add.w	r2, r7, #16
 8000946:	2100      	movs	r1, #0
 8000948:	481e      	ldr	r0, [pc, #120]	; (80009c4 <CAN2_RX0_IRQHandler+0x9c>)
 800094a:	f000 fb35 	bl	8000fb8 <HAL_CAN_GetRxMessage>

	  uint8_t header_ID[4];
	  header_ID[0]=(RxMessage_header.StdId >> 24) & 0xFF;
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	0e1b      	lsrs	r3, r3, #24
 8000952:	b2db      	uxtb	r3, r3
 8000954:	713b      	strb	r3, [r7, #4]
	  header_ID[1]=(RxMessage_header.StdId >> 16) & 0xFF;
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	0c1b      	lsrs	r3, r3, #16
 800095a:	b2db      	uxtb	r3, r3
 800095c:	717b      	strb	r3, [r7, #5]
	  header_ID[2]=(RxMessage_header.StdId >> 8) & 0xFF;
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	b2db      	uxtb	r3, r3
 8000964:	71bb      	strb	r3, [r7, #6]
	  header_ID[3]=(RxMessage_header.StdId) & 0xFF;
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	71fb      	strb	r3, [r7, #7]

	  char *msg = strcat(strcat((char *)header_ID, (char *)Rx_Data), "\n\r");
 800096c:	f107 0208 	add.w	r2, r7, #8
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f007 ff3f 	bl	80087f8 <strcat>
 800097a:	4604      	mov	r4, r0
 800097c:	4620      	mov	r0, r4
 800097e:	f7ff fc41 	bl	8000204 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	4423      	add	r3, r4
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <CAN2_RX0_IRQHandler+0xa0>)
 8000988:	8811      	ldrh	r1, [r2, #0]
 800098a:	7892      	ldrb	r2, [r2, #2]
 800098c:	8019      	strh	r1, [r3, #0]
 800098e:	709a      	strb	r2, [r3, #2]
 8000990:	62fc      	str	r4, [r7, #44]	; 0x2c

	  while(CDC_Transmit_FS((uint8_t *)msg, strlen(msg)) != HAL_OK);
 8000992:	bf00      	nop
 8000994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000996:	f7ff fc35 	bl	8000204 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29b      	uxth	r3, r3
 800099e:	4619      	mov	r1, r3
 80009a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80009a2:	f007 fa1f 	bl	8007de4 <CDC_Transmit_FS>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f3      	bne.n	8000994 <CAN2_RX0_IRQHandler+0x6c>
  while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) != 0){
 80009ac:	2100      	movs	r1, #0
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <CAN2_RX0_IRQHandler+0x9c>)
 80009b0:	f000 fc14 	bl	80011dc <HAL_CAN_GetRxFifoFillLevel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1c1      	bne.n	800093e <CAN2_RX0_IRQHandler+0x16>

  }
  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	3734      	adds	r7, #52	; 0x34
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	2000012c 	.word	0x2000012c
 80009c8:	08008830 	.word	0x08008830

080009cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <OTG_FS_IRQHandler+0x10>)
 80009d2:	f001 fa62 	bl	8001e9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000163c 	.word	0x2000163c

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a0a:	490e      	ldr	r1, [pc, #56]	; (8000a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a20:	4c0b      	ldr	r4, [pc, #44]	; (8000a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a2e:	f7ff ffd7 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f007 feb5 	bl	80087a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fe7f 	bl	8000738 <main>
  bx  lr    
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000a48:	08008894 	.word	0x08008894
  ldr r2, =_sbss
 8000a4c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000a50:	20001d68 	.word	0x20001d68

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <HAL_Init+0x40>)
 8000a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_Init+0x40>)
 8000a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_Init+0x40>)
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 fedd 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fee0 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023c00 	.word	0x40023c00

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fef5 	bl	80018aa <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 febd 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000158 	.word	0x20000158

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000158 	.word	0x20000158

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_Delay+0x44>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffde 	bl	8000b24 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008

08000b84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0ed      	b.n	8000d72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fcee 	bl	8000584 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0201 	orr.w	r2, r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb8:	f7ff ffb4 	bl	8000b24 <HAL_GetTick>
 8000bbc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bbe:	e012      	b.n	8000be6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bc0:	f7ff ffb0 	bl	8000b24 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	2b0a      	cmp	r3, #10
 8000bcc:	d90b      	bls.n	8000be6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2205      	movs	r2, #5
 8000bde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e0c5      	b.n	8000d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0e5      	beq.n	8000bc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f022 0202 	bic.w	r2, r2, #2
 8000c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c04:	f7ff ff8e 	bl	8000b24 <HAL_GetTick>
 8000c08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c0a:	e012      	b.n	8000c32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c0c:	f7ff ff8a 	bl	8000b24 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d90b      	bls.n	8000c32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2205      	movs	r2, #5
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e09f      	b.n	8000d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1e5      	bne.n	8000c0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7e1b      	ldrb	r3, [r3, #24]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d108      	bne.n	8000c5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e007      	b.n	8000c6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7e5b      	ldrb	r3, [r3, #25]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d108      	bne.n	8000c84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e007      	b.n	8000c94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7e9b      	ldrb	r3, [r3, #26]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d108      	bne.n	8000cae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 0220 	orr.w	r2, r2, #32
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e007      	b.n	8000cbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0220 	bic.w	r2, r2, #32
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7edb      	ldrb	r3, [r3, #27]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d108      	bne.n	8000cd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0210 	bic.w	r2, r2, #16
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	e007      	b.n	8000ce8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0210 	orr.w	r2, r2, #16
 8000ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7f1b      	ldrb	r3, [r3, #28]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d108      	bne.n	8000d02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 0208 	orr.w	r2, r2, #8
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	e007      	b.n	8000d12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 0208 	bic.w	r2, r2, #8
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7f5b      	ldrb	r3, [r3, #29]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d108      	bne.n	8000d2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f042 0204 	orr.w	r2, r2, #4
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e007      	b.n	8000d3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0204 	bic.w	r2, r2, #4
 8000d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	431a      	orrs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	ea42 0103 	orr.w	r1, r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	1e5a      	subs	r2, r3, #1
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d12e      	bne.n	8000dec <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2202      	movs	r2, #2
 8000d92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0201 	bic.w	r2, r2, #1
 8000da4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000da6:	f7ff febd 	bl	8000b24 <HAL_GetTick>
 8000daa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dac:	e012      	b.n	8000dd4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dae:	f7ff feb9 	bl	8000b24 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b0a      	cmp	r3, #10
 8000dba:	d90b      	bls.n	8000dd4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2205      	movs	r2, #5
 8000dcc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e012      	b.n	8000dfa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1e5      	bne.n	8000dae <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e006      	b.n	8000dfa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
  }
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b089      	sub	sp, #36	; 0x24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e16:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e20:	7ffb      	ldrb	r3, [r7, #31]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d003      	beq.n	8000e2e <HAL_CAN_AddTxMessage+0x2c>
 8000e26:	7ffb      	ldrb	r3, [r7, #31]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	f040 80b8 	bne.w	8000f9e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d10a      	bne.n	8000e4e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d105      	bne.n	8000e4e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80a0 	beq.w	8000f8e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	0e1b      	lsrs	r3, r3, #24
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d907      	bls.n	8000e6e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e09e      	b.n	8000fac <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10d      	bne.n	8000e9c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e8a:	68f9      	ldr	r1, [r7, #12]
 8000e8c:	6809      	ldr	r1, [r1, #0]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3318      	adds	r3, #24
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	440b      	add	r3, r1
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e00f      	b.n	8000ebc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eac:	68f9      	ldr	r1, [r7, #12]
 8000eae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000eb0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3318      	adds	r3, #24
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	440b      	add	r3, r1
 8000eba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3318      	adds	r3, #24
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	440b      	add	r3, r1
 8000ecc:	3304      	adds	r3, #4
 8000ece:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	7d1b      	ldrb	r3, [r3, #20]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d111      	bne.n	8000efc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3318      	adds	r3, #24
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	6811      	ldr	r1, [r2, #0]
 8000eec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3304      	adds	r3, #4
 8000efa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3307      	adds	r3, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	061a      	lsls	r2, r3, #24
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3306      	adds	r3, #6
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	041b      	lsls	r3, r3, #16
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3305      	adds	r3, #5
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	4313      	orrs	r3, r2
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	3204      	adds	r2, #4
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	4610      	mov	r0, r2
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	6811      	ldr	r1, [r2, #0]
 8000f24:	ea43 0200 	orr.w	r2, r3, r0
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	440b      	add	r3, r1
 8000f2e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3303      	adds	r3, #3
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	061a      	lsls	r2, r3, #24
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3302      	adds	r3, #2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	041b      	lsls	r3, r3, #16
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	4610      	mov	r0, r2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	6811      	ldr	r1, [r2, #0]
 8000f5a:	ea43 0200 	orr.w	r2, r3, r0
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	440b      	add	r3, r1
 8000f64:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3318      	adds	r3, #24
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	4413      	add	r3, r2
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	6811      	ldr	r1, [r2, #0]
 8000f7c:	f043 0201 	orr.w	r2, r3, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3318      	adds	r3, #24
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	440b      	add	r3, r1
 8000f88:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e00e      	b.n	8000fac <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e006      	b.n	8000fac <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
  }
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3724      	adds	r7, #36	; 0x24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fcc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d003      	beq.n	8000fdc <HAL_CAN_GetRxMessage+0x24>
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	f040 80f3 	bne.w	80011c2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10e      	bne.n	8001000 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d116      	bne.n	800101e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0e7      	b.n	80011d0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d107      	bne.n	800101e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e0d8      	b.n	80011d0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	331b      	adds	r3, #27
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	4413      	add	r3, r2
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0204 	and.w	r2, r3, #4
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10c      	bne.n	8001056 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	331b      	adds	r3, #27
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	4413      	add	r3, r2
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	0d5b      	lsrs	r3, r3, #21
 800104c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	e00b      	b.n	800106e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	331b      	adds	r3, #27
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	4413      	add	r3, r2
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	331b      	adds	r3, #27
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	4413      	add	r3, r2
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0202 	and.w	r2, r3, #2
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	331b      	adds	r3, #27
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	3304      	adds	r3, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 020f 	and.w	r2, r3, #15
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	331b      	adds	r3, #27
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	3304      	adds	r3, #4
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	331b      	adds	r3, #27
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	4413      	add	r3, r2
 80010c0:	3304      	adds	r3, #4
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	0c1b      	lsrs	r3, r3, #16
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0a1a      	lsrs	r2, r3, #8
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	0c1a      	lsrs	r2, r3, #16
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3302      	adds	r3, #2
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	4413      	add	r3, r2
 8001120:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	0e1a      	lsrs	r2, r3, #24
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	3303      	adds	r3, #3
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4413      	add	r3, r2
 800113a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0a1a      	lsrs	r2, r3, #8
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	3305      	adds	r3, #5
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	0c1a      	lsrs	r2, r3, #16
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3306      	adds	r3, #6
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4413      	add	r3, r2
 8001186:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0e1a      	lsrs	r2, r3, #24
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3307      	adds	r3, #7
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d108      	bne.n	80011ae <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	e007      	b.n	80011be <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0220 	orr.w	r2, r2, #32
 80011bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e006      	b.n	80011d0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
  }
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d002      	beq.n	80011fe <HAL_CAN_GetRxFifoFillLevel+0x22>
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d10f      	bne.n	800121e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d106      	bne.n	8001212 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e005      	b.n	800121e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d07c      	beq.n	800136c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d023      	beq.n	80012c4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2201      	movs	r2, #1
 8001282:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f983 	bl	800159a <HAL_CAN_TxMailbox0CompleteCallback>
 8001294:	e016      	b.n	80012c4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d004      	beq.n	80012aa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
 80012a8:	e00c      	b.n	80012c4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
 80012bc:	e002      	b.n	80012c4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f989 	bl	80015d6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d024      	beq.n	8001318 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f963 	bl	80015ae <HAL_CAN_TxMailbox1CompleteCallback>
 80012e8:	e016      	b.n	8001318 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d004      	beq.n	80012fe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
 80012fc:	e00c      	b.n	8001318 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
 8001310:	e002      	b.n	8001318 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f969 	bl	80015ea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d024      	beq.n	800136c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800132a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f943 	bl	80015c2 <HAL_CAN_TxMailbox2CompleteCallback>
 800133c:	e016      	b.n	800136c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d004      	beq.n	8001352 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
 8001350:	e00c      	b.n	800136c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
 8001364:	e002      	b.n	800136c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f949 	bl	80015fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00c      	beq.n	8001390 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f003 0310 	and.w	r3, r3, #16
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001386:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2210      	movs	r2, #16
 800138e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00b      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2208      	movs	r2, #8
 80013aa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f93a 	bl	8001626 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f921 	bl	8001612 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00c      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2210      	movs	r2, #16
 80013f2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00b      	beq.n	8001416 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b00      	cmp	r3, #0
 8001406:	d006      	beq.n	8001416 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2208      	movs	r2, #8
 800140e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f91c 	bl	800164e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	2b00      	cmp	r3, #0
 800141e:	d009      	beq.n	8001434 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f903 	bl	800163a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00b      	beq.n	8001456 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2210      	movs	r2, #16
 800144e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f906 	bl	8001662 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00b      	beq.n	8001478 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2208      	movs	r2, #8
 8001470:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f8ff 	bl	8001676 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d07b      	beq.n	800157a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d072      	beq.n	8001572 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d008      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	f043 0302 	orr.w	r3, r3, #2
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d043      	beq.n	8001572 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d03e      	beq.n	8001572 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014fa:	2b60      	cmp	r3, #96	; 0x60
 80014fc:	d02b      	beq.n	8001556 <HAL_CAN_IRQHandler+0x32a>
 80014fe:	2b60      	cmp	r3, #96	; 0x60
 8001500:	d82e      	bhi.n	8001560 <HAL_CAN_IRQHandler+0x334>
 8001502:	2b50      	cmp	r3, #80	; 0x50
 8001504:	d022      	beq.n	800154c <HAL_CAN_IRQHandler+0x320>
 8001506:	2b50      	cmp	r3, #80	; 0x50
 8001508:	d82a      	bhi.n	8001560 <HAL_CAN_IRQHandler+0x334>
 800150a:	2b40      	cmp	r3, #64	; 0x40
 800150c:	d019      	beq.n	8001542 <HAL_CAN_IRQHandler+0x316>
 800150e:	2b40      	cmp	r3, #64	; 0x40
 8001510:	d826      	bhi.n	8001560 <HAL_CAN_IRQHandler+0x334>
 8001512:	2b30      	cmp	r3, #48	; 0x30
 8001514:	d010      	beq.n	8001538 <HAL_CAN_IRQHandler+0x30c>
 8001516:	2b30      	cmp	r3, #48	; 0x30
 8001518:	d822      	bhi.n	8001560 <HAL_CAN_IRQHandler+0x334>
 800151a:	2b10      	cmp	r3, #16
 800151c:	d002      	beq.n	8001524 <HAL_CAN_IRQHandler+0x2f8>
 800151e:	2b20      	cmp	r3, #32
 8001520:	d005      	beq.n	800152e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001522:	e01d      	b.n	8001560 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800152c:	e019      	b.n	8001562 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001536:	e014      	b.n	8001562 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	f043 0320 	orr.w	r3, r3, #32
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001540:	e00f      	b.n	8001562 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800154a:	e00a      	b.n	8001562 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001554:	e005      	b.n	8001562 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800155e:	e000      	b.n	8001562 <HAL_CAN_IRQHandler+0x336>
            break;
 8001560:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699a      	ldr	r2, [r3, #24]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001570:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2204      	movs	r2, #4
 8001578:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f87c 	bl	800168a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff8e 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff29 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff3e 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff8e 	bl	8001794 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5d 	bl	8001740 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff31 	bl	8001704 <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa2 	bl	80017fc <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e165      	b.n	8001bac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8154 	bne.w	8001ba6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d005      	beq.n	8001916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001912:	2b02      	cmp	r3, #2
 8001914:	d130      	bne.n	8001978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 0201 	and.w	r2, r3, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b03      	cmp	r3, #3
 8001982:	d017      	beq.n	80019b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d123      	bne.n	8001a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	69b9      	ldr	r1, [r7, #24]
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80ae 	beq.w	8001ba6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_GPIO_Init+0x300>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a5c      	ldr	r2, [pc, #368]	; (8001bc4 <HAL_GPIO_Init+0x300>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b5a      	ldr	r3, [pc, #360]	; (8001bc4 <HAL_GPIO_Init+0x300>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a66:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_GPIO_Init+0x308>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d025      	beq.n	8001ade <HAL_GPIO_Init+0x21a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_GPIO_Init+0x30c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01f      	beq.n	8001ada <HAL_GPIO_Init+0x216>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4d      	ldr	r2, [pc, #308]	; (8001bd4 <HAL_GPIO_Init+0x310>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x212>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	; (8001bd8 <HAL_GPIO_Init+0x314>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x20e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4b      	ldr	r2, [pc, #300]	; (8001bdc <HAL_GPIO_Init+0x318>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x20a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4a      	ldr	r2, [pc, #296]	; (8001be0 <HAL_GPIO_Init+0x31c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x206>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a49      	ldr	r2, [pc, #292]	; (8001be4 <HAL_GPIO_Init+0x320>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x202>
 8001ac2:	2306      	movs	r3, #6
 8001ac4:	e00c      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e00a      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001aca:	2305      	movs	r3, #5
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af0:	4935      	ldr	r1, [pc, #212]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afe:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b22:	4a31      	ldr	r2, [pc, #196]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b28:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b4c:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b76:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba0:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	f67f ae96 	bls.w	80018e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40021400 	.word	0x40021400
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40013c00 	.word	0x40013c00

08001bec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	b08f      	sub	sp, #60	; 0x3c
 8001bf0:	af0a      	add	r7, sp, #40	; 0x28
 8001bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e116      	b.n	8001e2c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d106      	bne.n	8001c1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f006 fa3d 	bl	8008098 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2203      	movs	r2, #3
 8001c22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 fcee 	bl	800461e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	687e      	ldr	r6, [r7, #4]
 8001c4a:	466d      	mov	r5, sp
 8001c4c:	f106 0410 	add.w	r4, r6, #16
 8001c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c60:	1d33      	adds	r3, r6, #4
 8001c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c64:	6838      	ldr	r0, [r7, #0]
 8001c66:	f002 fbc5 	bl	80043f4 <USB_CoreInit>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0d7      	b.n	8001e2c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 fcdc 	bl	8004640 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e04a      	b.n	8001d24 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	333d      	adds	r3, #61	; 0x3d
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	333c      	adds	r3, #60	; 0x3c
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	b298      	uxth	r0, r3
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3344      	adds	r3, #68	; 0x44
 8001cca:	4602      	mov	r2, r0
 8001ccc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3340      	adds	r3, #64	; 0x40
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	3348      	adds	r3, #72	; 0x48
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	334c      	adds	r3, #76	; 0x4c
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	3354      	adds	r3, #84	; 0x54
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	3301      	adds	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d3af      	bcc.n	8001c8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e044      	b.n	8001dbe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3b5      	bcc.n	8001d34 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	687e      	ldr	r6, [r7, #4]
 8001dd0:	466d      	mov	r5, sp
 8001dd2:	f106 0410 	add.w	r4, r6, #16
 8001dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001de2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001de6:	1d33      	adds	r3, r6, #4
 8001de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dea:	6838      	ldr	r0, [r7, #0]
 8001dec:	f002 fc74 	bl	80046d8 <USB_DevInit>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e014      	b.n	8001e2c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d102      	bne.n	8001e20 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f001 f98c 	bl	8003138 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 fdb6 	bl	8005996 <USB_DevDisconnect>

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_PCD_Start+0x1c>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e020      	b.n	8001e92 <HAL_PCD_Start+0x5e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d109      	bne.n	8001e74 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d005      	beq.n	8001e74 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f002 fbbf 	bl	80045fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 fd66 	bl	8005954 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e9a:	b590      	push	{r4, r7, lr}
 8001e9c:	b08d      	sub	sp, #52	; 0x34
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 fe24 	bl	8005afe <USB_GetMode>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f040 84b7 	bne.w	800282c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fd88 	bl	80059d8 <USB_ReadInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 84ad 	beq.w	800282a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fd75 	bl	80059d8 <USB_ReadInterrupts>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d107      	bne.n	8001f08 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f002 0202 	and.w	r2, r2, #2
 8001f06:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 fd63 	bl	80059d8 <USB_ReadInterrupts>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d161      	bne.n	8001fe0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0210 	bic.w	r2, r2, #16
 8001f2a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f003 020f 	and.w	r2, r3, #15
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	0c5b      	lsrs	r3, r3, #17
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d124      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d035      	beq.n	8001fd0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	6a38      	ldr	r0, [r7, #32]
 8001f78:	f003 fb9a 	bl	80056b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f88:	441a      	add	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f9a:	441a      	add	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	621a      	str	r2, [r3, #32]
 8001fa0:	e016      	b.n	8001fd0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	0c5b      	lsrs	r3, r3, #17
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d110      	bne.n	8001fd0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6a38      	ldr	r0, [r7, #32]
 8001fba:	f003 fb79 	bl	80056b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fca:	441a      	add	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0210 	orr.w	r2, r2, #16
 8001fde:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 fcf7 	bl	80059d8 <USB_ReadInterrupts>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ff4:	f040 80a7 	bne.w	8002146 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f003 fcfc 	bl	80059fe <USB_ReadDevAllOutEpInterrupt>
 8002006:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002008:	e099      	b.n	800213e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 808e 	beq.w	8002132 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fd20 	bl	8005a66 <USB_ReadDevOutEPInterrupt>
 8002026:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00c      	beq.n	800204c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203e:	461a      	mov	r2, r3
 8002040:	2301      	movs	r3, #1
 8002042:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fef0 	bl	8002e2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00c      	beq.n	8002070 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002062:	461a      	mov	r2, r3
 8002064:	2308      	movs	r3, #8
 8002066:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 ffc6 	bl	8002ffc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	d008      	beq.n	800208c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4413      	add	r3, r2
 8002082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002086:	461a      	mov	r2, r3
 8002088:	2310      	movs	r3, #16
 800208a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d030      	beq.n	80020f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	2b80      	cmp	r3, #128	; 0x80
 80020a0:	d109      	bne.n	80020b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	3304      	adds	r3, #4
 80020ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	78db      	ldrb	r3, [r3, #3]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d108      	bne.n	80020e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2200      	movs	r2, #0
 80020d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f006 f901 	bl	80082e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f2:	461a      	mov	r2, r3
 80020f4:	2302      	movs	r3, #2
 80020f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210e:	461a      	mov	r2, r3
 8002110:	2320      	movs	r3, #32
 8002112:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212a:	461a      	mov	r2, r3
 800212c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002130:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	3301      	adds	r3, #1
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	f47f af62 	bne.w	800200a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f003 fc44 	bl	80059d8 <USB_ReadInterrupts>
 8002150:	4603      	mov	r3, r0
 8002152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002156:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800215a:	f040 80db 	bne.w	8002314 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f003 fc65 	bl	8005a32 <USB_ReadDevAllInEpInterrupt>
 8002168:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800216e:	e0cd      	b.n	800230c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80c2 	beq.w	8002300 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f003 fc8b 	bl	8005aa2 <USB_ReadDevInEPInterrupt>
 800218c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d057      	beq.n	8002248 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	2201      	movs	r2, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69f9      	ldr	r1, [r7, #28]
 80021b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021b8:	4013      	ands	r3, r2
 80021ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021c8:	461a      	mov	r2, r3
 80021ca:	2301      	movs	r3, #1
 80021cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d132      	bne.n	800223c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	334c      	adds	r3, #76	; 0x4c
 80021e6:	6819      	ldr	r1, [r3, #0]
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4403      	add	r3, r0
 80021f6:	3348      	adds	r3, #72	; 0x48
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4419      	add	r1, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4403      	add	r3, r0
 800220a:	334c      	adds	r3, #76	; 0x4c
 800220c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	2b00      	cmp	r3, #0
 8002212:	d113      	bne.n	800223c <HAL_PCD_IRQHandler+0x3a2>
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	3354      	adds	r3, #84	; 0x54
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d108      	bne.n	800223c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002234:	461a      	mov	r2, r3
 8002236:	2101      	movs	r1, #1
 8002238:	f003 fc92 	bl	8005b60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f005 ffcb 	bl	80081de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	4413      	add	r3, r2
 800225a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800225e:	461a      	mov	r2, r3
 8002260:	2308      	movs	r3, #8
 8002262:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	d008      	beq.n	8002280 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227a:	461a      	mov	r2, r3
 800227c:	2310      	movs	r3, #16
 800227e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002296:	461a      	mov	r2, r3
 8002298:	2340      	movs	r3, #64	; 0x40
 800229a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d023      	beq.n	80022ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a8:	6a38      	ldr	r0, [r7, #32]
 80022aa:	f002 fb73 	bl	8004994 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	3338      	adds	r3, #56	; 0x38
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	3304      	adds	r3, #4
 80022c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	78db      	ldrb	r3, [r3, #3]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d108      	bne.n	80022dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2200      	movs	r2, #0
 80022ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f006 f818 	bl	800830c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e8:	461a      	mov	r2, r3
 80022ea:	2302      	movs	r3, #2
 80022ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fd08 	bl	8002d10 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	3301      	adds	r3, #1
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230e:	2b00      	cmp	r3, #0
 8002310:	f47f af2e 	bne.w	8002170 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f003 fb5d 	bl	80059d8 <USB_ReadInterrupts>
 800231e:	4603      	mov	r3, r0
 8002320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002328:	d122      	bne.n	8002370 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002344:	2b01      	cmp	r3, #1
 8002346:	d108      	bne.n	800235a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002350:	2100      	movs	r1, #0
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f006 f992 	bl	800867c <HAL_PCDEx_LPM_Callback>
 8002358:	e002      	b.n	8002360 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f005 ffb6 	bl	80082cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800236e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f003 fb2f 	bl	80059d8 <USB_ReadInterrupts>
 800237a:	4603      	mov	r3, r0
 800237c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002384:	d112      	bne.n	80023ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d102      	bne.n	800239c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f005 ff72 	bl	8008280 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023aa:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fb11 	bl	80059d8 <USB_ReadInterrupts>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c0:	d121      	bne.n	8002406 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80023d0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	f003 020f 	and.w	r2, r3, #15
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80023f6:	2101      	movs	r1, #1
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f006 f93f 	bl	800867c <HAL_PCDEx_LPM_Callback>
 80023fe:	e002      	b.n	8002406 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f005 ff3d 	bl	8008280 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f003 fae4 	bl	80059d8 <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241a:	f040 80b7 	bne.w	800258c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2110      	movs	r1, #16
 8002438:	4618      	mov	r0, r3
 800243a:	f002 faab 	bl	8004994 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243e:	2300      	movs	r3, #0
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002442:	e046      	b.n	80024d2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002450:	461a      	mov	r2, r3
 8002452:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002456:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002468:	0151      	lsls	r1, r2, #5
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	440a      	add	r2, r1
 800246e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002472:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002476:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800248a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249c:	0151      	lsls	r1, r2, #5
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	440a      	add	r2, r1
 80024a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024bc:	0151      	lsls	r1, r2, #5
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	440a      	add	r2, r1
 80024c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	3301      	adds	r3, #1
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3b3      	bcc.n	8002444 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80024ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d016      	beq.n	8002526 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002508:	f043 030b 	orr.w	r3, r3, #11
 800250c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800251e:	f043 030b 	orr.w	r3, r3, #11
 8002522:	6453      	str	r3, [r2, #68]	; 0x44
 8002524:	e015      	b.n	8002552 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002534:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002538:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800253c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254c:	f043 030b 	orr.w	r3, r3, #11
 8002550:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002560:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002564:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002576:	461a      	mov	r2, r3
 8002578:	f003 faf2 	bl	8005b60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800258a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fa21 	bl	80059d8 <USB_ReadInterrupts>
 8002596:	4603      	mov	r3, r0
 8002598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800259c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a0:	d124      	bne.n	80025ec <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fab7 	bl	8005b1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 fa6c 	bl	8004a8e <USB_GetDevSpeed>
 80025b6:	4603      	mov	r3, r0
 80025b8:	461a      	mov	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681c      	ldr	r4, [r3, #0]
 80025c2:	f000 ff13 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 80025c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	4620      	mov	r0, r4
 80025d2:	f001 ff71 	bl	80044b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f005 fe29 	bl	800822e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 f9f1 	bl	80059d8 <USB_ReadInterrupts>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d10a      	bne.n	8002616 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f005 fe06 	bl	8008212 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f002 0208 	and.w	r2, r2, #8
 8002614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 f9dc 	bl	80059d8 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b80      	cmp	r3, #128	; 0x80
 8002628:	d122      	bne.n	8002670 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002636:	2301      	movs	r3, #1
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	e014      	b.n	8002666 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	b2db      	uxtb	r3, r3
 8002658:	4619      	mov	r1, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fb27 	bl	8002cae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	3301      	adds	r3, #1
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266c:	429a      	cmp	r2, r3
 800266e:	d3e5      	bcc.n	800263c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 f9af 	bl	80059d8 <USB_ReadInterrupts>
 800267a:	4603      	mov	r3, r0
 800267c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002684:	d13b      	bne.n	80026fe <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002686:	2301      	movs	r3, #1
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	e02b      	b.n	80026e4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3340      	adds	r3, #64	; 0x40
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d115      	bne.n	80026de <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80026b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	da12      	bge.n	80026de <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	333f      	adds	r3, #63	; 0x3f
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	4619      	mov	r1, r3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fae8 	bl	8002cae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	3301      	adds	r3, #1
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d3ce      	bcc.n	800268c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f003 f968 	bl	80059d8 <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002712:	d155      	bne.n	80027c0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002714:	2301      	movs	r3, #1
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
 8002718:	e045      	b.n	80027a6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4413      	add	r3, r2
 8002722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d12e      	bne.n	80027a0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002742:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002744:	2b00      	cmp	r3, #0
 8002746:	da2b      	bge.n	80027a0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002754:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002758:	429a      	cmp	r2, r3
 800275a:	d121      	bne.n	80027a0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279c:	6053      	str	r3, [r2, #4]
            break;
 800279e:	e007      	b.n	80027b0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	3301      	adds	r3, #1
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d3b4      	bcc.n	800271a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 f907 	bl	80059d8 <USB_ReadInterrupts>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d4:	d10a      	bne.n	80027ec <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f005 fdaa 	bl	8008330 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 f8f1 	bl	80059d8 <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d115      	bne.n	800282c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f005 fd9a 	bl	800834c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	e000      	b.n	800282c <HAL_PCD_IRQHandler+0x992>
      return;
 800282a:	bf00      	nop
    }
  }
}
 800282c:	3734      	adds	r7, #52	; 0x34
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}

08002832 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_PCD_SetAddress+0x1a>
 8002848:	2302      	movs	r3, #2
 800284a:	e013      	b.n	8002874 <HAL_PCD_SetAddress+0x42>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f003 f84f 	bl	8005908 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	4608      	mov	r0, r1
 8002886:	4611      	mov	r1, r2
 8002888:	461a      	mov	r2, r3
 800288a:	4603      	mov	r3, r0
 800288c:	70fb      	strb	r3, [r7, #3]
 800288e:	460b      	mov	r3, r1
 8002890:	803b      	strh	r3, [r7, #0]
 8002892:	4613      	mov	r3, r2
 8002894:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800289a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da0f      	bge.n	80028c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 020f 	and.w	r2, r3, #15
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	3338      	adds	r3, #56	; 0x38
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	3304      	adds	r3, #4
 80028b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	705a      	strb	r2, [r3, #1]
 80028c0:	e00f      	b.n	80028e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	3304      	adds	r3, #4
 80028da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028ee:	883a      	ldrh	r2, [r7, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	78ba      	ldrb	r2, [r7, #2]
 80028f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	785b      	ldrb	r3, [r3, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800290c:	78bb      	ldrb	r3, [r7, #2]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d102      	bne.n	8002918 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_PCD_EP_Open+0xaa>
 8002922:	2302      	movs	r3, #2
 8002924:	e00e      	b.n	8002944 <HAL_PCD_EP_Open+0xc8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68f9      	ldr	r1, [r7, #12]
 8002934:	4618      	mov	r0, r3
 8002936:	f002 f8cf 	bl	8004ad8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002942:	7afb      	ldrb	r3, [r7, #11]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800295c:	2b00      	cmp	r3, #0
 800295e:	da0f      	bge.n	8002980 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	f003 020f 	and.w	r2, r3, #15
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	3338      	adds	r3, #56	; 0x38
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	3304      	adds	r3, #4
 8002976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	705a      	strb	r2, [r3, #1]
 800297e:	e00f      	b.n	80029a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	f003 020f 	and.w	r2, r3, #15
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	3304      	adds	r3, #4
 8002998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_PCD_EP_Close+0x6e>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e00e      	b.n	80029d8 <HAL_PCD_EP_Close+0x8c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68f9      	ldr	r1, [r7, #12]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f002 f90d 	bl	8004be8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	460b      	mov	r3, r1
 80029ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029f0:	7afb      	ldrb	r3, [r7, #11]
 80029f2:	f003 020f 	and.w	r2, r3, #15
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4413      	add	r3, r2
 8002a06:	3304      	adds	r3, #4
 8002a08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a22:	7afb      	ldrb	r3, [r7, #11]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d102      	bne.n	8002a3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a3c:	7afb      	ldrb	r3, [r7, #11]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	6979      	ldr	r1, [r7, #20]
 8002a54:	f002 fbec 	bl	8005230 <USB_EP0StartXfer>
 8002a58:	e008      	b.n	8002a6c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	6979      	ldr	r1, [r7, #20]
 8002a68:	f002 f99a 	bl	8004da0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	f003 020f 	and.w	r2, r3, #15
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002a98:	681b      	ldr	r3, [r3, #0]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab6:	7afb      	ldrb	r3, [r7, #11]
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	3338      	adds	r3, #56	; 0x38
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3304      	adds	r3, #4
 8002acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae6:	7afb      	ldrb	r3, [r7, #11]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d102      	bne.n	8002b00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b00:	7afb      	ldrb	r3, [r7, #11]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	6979      	ldr	r1, [r7, #20]
 8002b18:	f002 fb8a 	bl	8005230 <USB_EP0StartXfer>
 8002b1c:	e008      	b.n	8002b30 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	6979      	ldr	r1, [r7, #20]
 8002b2c:	f002 f938 	bl	8004da0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	f003 020f 	and.w	r2, r3, #15
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d901      	bls.n	8002b58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e050      	b.n	8002bfa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	da0f      	bge.n	8002b80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	f003 020f 	and.w	r2, r3, #15
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	3338      	adds	r3, #56	; 0x38
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	705a      	strb	r2, [r3, #1]
 8002b7e:	e00d      	b.n	8002b9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	3304      	adds	r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_PCD_EP_SetStall+0x82>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e01e      	b.n	8002bfa <HAL_PCD_EP_SetStall+0xc0>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68f9      	ldr	r1, [r7, #12]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f002 fdc8 	bl	8005760 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	b2d9      	uxtb	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bea:	461a      	mov	r2, r3
 8002bec:	f002 ffb8 	bl	8005b60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 020f 	and.w	r2, r3, #15
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d901      	bls.n	8002c20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e042      	b.n	8002ca6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	da0f      	bge.n	8002c48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f003 020f 	and.w	r2, r3, #15
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	3338      	adds	r3, #56	; 0x38
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	705a      	strb	r2, [r3, #1]
 8002c46:	e00f      	b.n	8002c68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f003 020f 	and.w	r2, r3, #15
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_PCD_EP_ClrStall+0x86>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e00e      	b.n	8002ca6 <HAL_PCD_EP_ClrStall+0xa4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68f9      	ldr	r1, [r7, #12]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 fdd0 	bl	800583c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	da0c      	bge.n	8002cdc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 020f 	and.w	r2, r3, #15
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	3338      	adds	r3, #56	; 0x38
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e00c      	b.n	8002cf6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f003 020f 	and.w	r2, r3, #15
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 fbef 	bl	80054e0 <USB_EPStopXfer>
 8002d02:	4603      	mov	r3, r0
 8002d04:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d06:	7afb      	ldrb	r3, [r7, #11]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	3338      	adds	r3, #56	; 0x38
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	3304      	adds	r3, #4
 8002d36:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a1a      	ldr	r2, [r3, #32]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d901      	bls.n	8002d48 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e06c      	b.n	8002e22 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d902      	bls.n	8002d64 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	3303      	adds	r3, #3
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d6c:	e02b      	b.n	8002dc6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d902      	bls.n	8002d8a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3303      	adds	r3, #3
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6919      	ldr	r1, [r3, #16]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	4603      	mov	r3, r0
 8002da8:	6978      	ldr	r0, [r7, #20]
 8002daa:	f002 fc43 	bl	8005634 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	441a      	add	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a1a      	ldr	r2, [r3, #32]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	441a      	add	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d809      	bhi.n	8002df0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a1a      	ldr	r2, [r3, #32]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d203      	bcs.n	8002df0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1be      	bne.n	8002d6e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	699a      	ldr	r2, [r3, #24]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d811      	bhi.n	8002e20 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	2201      	movs	r2, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	6939      	ldr	r1, [r7, #16]
 8002e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	333c      	adds	r3, #60	; 0x3c
 8002e44:	3304      	adds	r3, #4
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d17b      	bne.n	8002f5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	4a61      	ldr	r2, [pc, #388]	; (8002ff4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	f240 80b9 	bls.w	8002fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80b3 	beq.w	8002fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e94:	6093      	str	r3, [r2, #8]
 8002e96:	e0a7      	b.n	8002fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	6093      	str	r3, [r2, #8]
 8002eb4:	e098      	b.n	8002fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f040 8093 	bne.w	8002fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	4a4b      	ldr	r2, [pc, #300]	; (8002ff4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d90f      	bls.n	8002eea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee6:	6093      	str	r3, [r2, #8]
 8002ee8:	e07e      	b.n	8002fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	0159      	lsls	r1, r3, #5
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f16:	1ad2      	subs	r2, r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d114      	bne.n	8002f4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f34:	461a      	mov	r2, r3
 8002f36:	2101      	movs	r1, #1
 8002f38:	f002 fe12 	bl	8005b60 <USB_EP0_OutStart>
 8002f3c:	e006      	b.n	8002f4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	441a      	add	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f005 f928 	bl	80081a8 <HAL_PCD_DataOutStageCallback>
 8002f58:	e046      	b.n	8002fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d124      	bne.n	8002fac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f7e:	6093      	str	r3, [r2, #8]
 8002f80:	e032      	b.n	8002fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f005 f8ff 	bl	80081a8 <HAL_PCD_DataOutStageCallback>
 8002faa:	e01d      	b.n	8002fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d114      	bne.n	8002fdc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d108      	bne.n	8002fdc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	f002 fdc2 	bl	8005b60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f005 f8e0 	bl	80081a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	4f54300a 	.word	0x4f54300a
 8002ff8:	4f54310a 	.word	0x4f54310a

08002ffc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	333c      	adds	r3, #60	; 0x3c
 8003014:	3304      	adds	r3, #4
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a15      	ldr	r2, [pc, #84]	; (8003084 <PCD_EP_OutSetupPacket_int+0x88>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d90e      	bls.n	8003050 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003038:	2b00      	cmp	r3, #0
 800303a:	d009      	beq.n	8003050 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003048:	461a      	mov	r2, r3
 800304a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800304e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f005 f897 	bl	8008184 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <PCD_EP_OutSetupPacket_int+0x88>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d90c      	bls.n	8003078 <PCD_EP_OutSetupPacket_int+0x7c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d108      	bne.n	8003078 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003070:	461a      	mov	r2, r3
 8003072:	2101      	movs	r1, #1
 8003074:	f002 fd74 	bl	8005b60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	4f54300a 	.word	0x4f54300a

08003088 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	70fb      	strb	r3, [r7, #3]
 8003094:	4613      	mov	r3, r2
 8003096:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d107      	bne.n	80030b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030a6:	883b      	ldrh	r3, [r7, #0]
 80030a8:	0419      	lsls	r1, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
 80030b4:	e028      	b.n	8003108 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	4413      	add	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	e00d      	b.n	80030e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	3340      	adds	r3, #64	; 0x40
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	4413      	add	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	3301      	adds	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d3ec      	bcc.n	80030ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030f0:	883b      	ldrh	r3, [r7, #0]
 80030f2:	0418      	lsls	r0, r3, #16
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6819      	ldr	r1, [r3, #0]
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	4302      	orrs	r2, r0
 8003100:	3340      	adds	r3, #64	; 0x40
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316a:	f043 0303 	orr.w	r3, r3, #3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_PWREx_EnableOverDrive+0x90>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <HAL_PWREx_EnableOverDrive+0x90>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_PWREx_EnableOverDrive+0x90>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031a6:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <HAL_PWREx_EnableOverDrive+0x94>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ac:	f7fd fcba 	bl	8000b24 <HAL_GetTick>
 80031b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031b2:	e009      	b.n	80031c8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031b4:	f7fd fcb6 	bl	8000b24 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031c2:	d901      	bls.n	80031c8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e01f      	b.n	8003208 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031c8:	4b13      	ldr	r3, [pc, #76]	; (8003218 <HAL_PWREx_EnableOverDrive+0x98>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d4:	d1ee      	bne.n	80031b4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031dc:	f7fd fca2 	bl	8000b24 <HAL_GetTick>
 80031e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031e2:	e009      	b.n	80031f8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031e4:	f7fd fc9e 	bl	8000b24 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031f2:	d901      	bls.n	80031f8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e007      	b.n	8003208 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031f8:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_PWREx_EnableOverDrive+0x98>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003204:	d1ee      	bne.n	80031e4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	420e0040 	.word	0x420e0040
 8003218:	40007000 	.word	0x40007000
 800321c:	420e0044 	.word	0x420e0044

08003220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0cc      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b68      	ldr	r3, [pc, #416]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d90c      	bls.n	800325c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0b8      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d020      	beq.n	80032aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003274:	4b59      	ldr	r3, [pc, #356]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800327e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800328c:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003298:	4b50      	ldr	r3, [pc, #320]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	494d      	ldr	r1, [pc, #308]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d044      	beq.n	8003340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d119      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e07f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d003      	beq.n	80032de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e06f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e067      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 0203 	bic.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4934      	ldr	r1, [pc, #208]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003310:	f7fd fc08 	bl	8000b24 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	e00a      	b.n	800332e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7fd fc04 	bl	8000b24 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e04f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 020c 	and.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	429a      	cmp	r2, r3
 800333e:	d1eb      	bne.n	8003318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003340:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d20c      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e032      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4916      	ldr	r1, [pc, #88]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	490e      	ldr	r1, [pc, #56]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033a6:	f000 fb57 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 80033aa:	4602      	mov	r2, r0
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	490a      	ldr	r1, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	5ccb      	ldrb	r3, [r1, r3]
 80033ba:	fa22 f303 	lsr.w	r3, r2, r3
 80033be:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd fb68 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40023c00 	.word	0x40023c00
 80033dc:	40023800 	.word	0x40023800
 80033e0:	08008874 	.word	0x08008874
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000004 	.word	0x20000004

080033ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000000 	.word	0x20000000

08003404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08c      	sub	sp, #48	; 0x30
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800343c:	4b6f      	ldr	r3, [pc, #444]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800343e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003442:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	496c      	ldr	r1, [pc, #432]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800345a:	2301      	movs	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d010      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800346a:	4b64      	ldr	r3, [pc, #400]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800346c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003470:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003478:	4960      	ldr	r1, [pc, #384]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003488:	2301      	movs	r3, #1
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d017      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003498:	4b58      	ldr	r3, [pc, #352]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800349a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800349e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4955      	ldr	r1, [pc, #340]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b6:	d101      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80034b8:	2301      	movs	r3, #1
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80034c4:	2301      	movs	r3, #1
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d017      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034d4:	4b49      	ldr	r3, [pc, #292]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	4946      	ldr	r1, [pc, #280]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f2:	d101      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80034f4:	2301      	movs	r3, #1
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003500:	2301      	movs	r3, #1
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 808a 	beq.w	8003626 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b39      	ldr	r3, [pc, #228]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a38      	ldr	r2, [pc, #224]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b36      	ldr	r3, [pc, #216]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800352e:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a33      	ldr	r2, [pc, #204]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800353a:	f7fd faf3 	bl	8000b24 <HAL_GetTick>
 800353e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7fd faef 	bl	8000b24 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e278      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003554:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003560:	4b26      	ldr	r3, [pc, #152]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003568:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d02f      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003578:	6a3a      	ldr	r2, [r7, #32]
 800357a:	429a      	cmp	r2, r3
 800357c:	d028      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800357e:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003586:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003588:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003594:	4a19      	ldr	r2, [pc, #100]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d114      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80035a6:	f7fd fabd 	bl	8000b24 <HAL_GetTick>
 80035aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fd fab9 	bl	8000b24 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e240      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0ee      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035dc:	d114      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f2:	4902      	ldr	r1, [pc, #8]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]
 80035f8:	e00c      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	40007000 	.word	0x40007000
 8003604:	42470e40 	.word	0x42470e40
 8003608:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a49      	ldr	r2, [pc, #292]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800360e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003612:	6093      	str	r3, [r2, #8]
 8003614:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003616:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003620:	4944      	ldr	r1, [pc, #272]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003622:	4313      	orrs	r3, r2
 8003624:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003638:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800363a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003648:	4b3a      	ldr	r3, [pc, #232]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800364a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	4937      	ldr	r1, [pc, #220]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800366a:	4b32      	ldr	r3, [pc, #200]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800366c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003670:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003678:	492e      	ldr	r1, [pc, #184]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d011      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800368c:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800368e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003692:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	4926      	ldr	r1, [pc, #152]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036aa:	d101      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80036ac:	2301      	movs	r3, #1
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80036bc:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	491a      	ldr	r1, [pc, #104]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d011      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	4911      	ldr	r1, [pc, #68]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036fc:	d101      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80036fe:	2301      	movs	r3, #1
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d005      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003710:	f040 80ff 	bne.w	8003912 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800371a:	f7fd fa03 	bl	8000b24 <HAL_GetTick>
 800371e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003720:	e00e      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003722:	f7fd f9ff 	bl	8000b24 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d907      	bls.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e188      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003734:	40023800 	.word	0x40023800
 8003738:	424711e0 	.word	0x424711e0
 800373c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003740:	4b7e      	ldr	r3, [pc, #504]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ea      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003768:	2b00      	cmp	r3, #0
 800376a:	d028      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d124      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003774:	4b71      	ldr	r3, [pc, #452]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	3301      	adds	r3, #1
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003786:	4b6d      	ldr	r3, [pc, #436]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800378c:	0e1b      	lsrs	r3, r3, #24
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	019b      	lsls	r3, r3, #6
 800379e:	431a      	orrs	r2, r3
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	3b01      	subs	r3, #1
 80037a6:	041b      	lsls	r3, r3, #16
 80037a8:	431a      	orrs	r2, r3
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	071b      	lsls	r3, r3, #28
 80037b6:	4961      	ldr	r1, [pc, #388]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d004      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d035      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e8:	d130      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80037ea:	4b54      	ldr	r3, [pc, #336]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	3301      	adds	r3, #1
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037fc:	4b4f      	ldr	r3, [pc, #316]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003802:	0f1b      	lsrs	r3, r3, #28
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	019b      	lsls	r3, r3, #6
 8003814:	431a      	orrs	r2, r3
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	3b01      	subs	r3, #1
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	431a      	orrs	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	071b      	lsls	r3, r3, #28
 800382c:	4943      	ldr	r1, [pc, #268]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003834:	4b41      	ldr	r3, [pc, #260]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800383a:	f023 021f 	bic.w	r2, r3, #31
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	493d      	ldr	r1, [pc, #244]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003854:	2b00      	cmp	r3, #0
 8003856:	d029      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003860:	d124      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003862:	4b36      	ldr	r3, [pc, #216]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	3301      	adds	r3, #1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003874:	4b31      	ldr	r3, [pc, #196]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387a:	0f1b      	lsrs	r3, r3, #28
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	019b      	lsls	r3, r3, #6
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	3b01      	subs	r3, #1
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	431a      	orrs	r2, r3
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	431a      	orrs	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	071b      	lsls	r3, r3, #28
 80038a4:	4925      	ldr	r1, [pc, #148]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d016      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	3b01      	subs	r3, #1
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	071b      	lsls	r3, r3, #28
 80038de:	4917      	ldr	r1, [pc, #92]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038ec:	f7fd f91a 	bl	8000b24 <HAL_GetTick>
 80038f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038f4:	f7fd f916 	bl	8000b24 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e09f      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	2b01      	cmp	r3, #1
 8003916:	f040 8095 	bne.w	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003920:	f7fd f900 	bl	8000b24 <HAL_GetTick>
 8003924:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003926:	e00f      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003928:	f7fd f8fc 	bl	8000b24 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d908      	bls.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e085      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	42470068 	.word	0x42470068
 8003944:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003948:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003954:	d0e8      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003972:	2b00      	cmp	r3, #0
 8003974:	d02b      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	2b00      	cmp	r3, #0
 800397c:	d127      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800397e:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	3301      	adds	r3, #1
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	431a      	orrs	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	061b      	lsls	r3, r3, #24
 80039ac:	4928      	ldr	r1, [pc, #160]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039b4:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	3b01      	subs	r3, #1
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	4922      	ldr	r1, [pc, #136]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01d      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e2:	d118      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	0e1b      	lsrs	r3, r3, #24
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	019b      	lsls	r3, r3, #6
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	3b01      	subs	r3, #1
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	4910      	ldr	r1, [pc, #64]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a16:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a1c:	f7fd f882 	bl	8000b24 <HAL_GetTick>
 8003a20:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003a24:	f7fd f87e 	bl	8000b24 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e007      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a42:	d1ef      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3730      	adds	r7, #48	; 0x30
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	42470070 	.word	0x42470070

08003a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a5c:	b0ae      	sub	sp, #184	; 0xb8
 8003a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a7e:	4bcb      	ldr	r3, [pc, #812]	; (8003dac <HAL_RCC_GetSysClockFreq+0x354>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b0c      	cmp	r3, #12
 8003a88:	f200 8206 	bhi.w	8003e98 <HAL_RCC_GetSysClockFreq+0x440>
 8003a8c:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003e99 	.word	0x08003e99
 8003a9c:	08003e99 	.word	0x08003e99
 8003aa0:	08003e99 	.word	0x08003e99
 8003aa4:	08003ad1 	.word	0x08003ad1
 8003aa8:	08003e99 	.word	0x08003e99
 8003aac:	08003e99 	.word	0x08003e99
 8003ab0:	08003e99 	.word	0x08003e99
 8003ab4:	08003ad9 	.word	0x08003ad9
 8003ab8:	08003e99 	.word	0x08003e99
 8003abc:	08003e99 	.word	0x08003e99
 8003ac0:	08003e99 	.word	0x08003e99
 8003ac4:	08003cc9 	.word	0x08003cc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4bb9      	ldr	r3, [pc, #740]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003ace:	e1e7      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ad0:	4bb8      	ldr	r3, [pc, #736]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ad6:	e1e3      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad8:	4bb4      	ldr	r3, [pc, #720]	; (8003dac <HAL_RCC_GetSysClockFreq+0x354>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae4:	4bb1      	ldr	r3, [pc, #708]	; (8003dac <HAL_RCC_GetSysClockFreq+0x354>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d071      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af0:	4bae      	ldr	r3, [pc, #696]	; (8003dac <HAL_RCC_GetSysClockFreq+0x354>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003afc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b16:	4622      	mov	r2, r4
 8003b18:	462b      	mov	r3, r5
 8003b1a:	f04f 0000 	mov.w	r0, #0
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	0159      	lsls	r1, r3, #5
 8003b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b28:	0150      	lsls	r0, r2, #5
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4621      	mov	r1, r4
 8003b30:	1a51      	subs	r1, r2, r1
 8003b32:	6439      	str	r1, [r7, #64]	; 0x40
 8003b34:	4629      	mov	r1, r5
 8003b36:	eb63 0301 	sbc.w	r3, r3, r1
 8003b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003b48:	4649      	mov	r1, r9
 8003b4a:	018b      	lsls	r3, r1, #6
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b52:	4641      	mov	r1, r8
 8003b54:	018a      	lsls	r2, r1, #6
 8003b56:	4641      	mov	r1, r8
 8003b58:	1a51      	subs	r1, r2, r1
 8003b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003b70:	4649      	mov	r1, r9
 8003b72:	00cb      	lsls	r3, r1, #3
 8003b74:	4641      	mov	r1, r8
 8003b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	00ca      	lsls	r2, r1, #3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4619      	mov	r1, r3
 8003b82:	4603      	mov	r3, r0
 8003b84:	4622      	mov	r2, r4
 8003b86:	189b      	adds	r3, r3, r2
 8003b88:	633b      	str	r3, [r7, #48]	; 0x30
 8003b8a:	462b      	mov	r3, r5
 8003b8c:	460a      	mov	r2, r1
 8003b8e:	eb42 0303 	adc.w	r3, r2, r3
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	024b      	lsls	r3, r1, #9
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003baa:	4621      	mov	r1, r4
 8003bac:	024a      	lsls	r2, r1, #9
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bc0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003bc4:	f7fc fb26 	bl	8000214 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4613      	mov	r3, r2
 8003bce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bd2:	e067      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd4:	4b75      	ldr	r3, [pc, #468]	; (8003dac <HAL_RCC_GetSysClockFreq+0x354>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003be0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bee:	2300      	movs	r3, #0
 8003bf0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bf2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	462b      	mov	r3, r5
 8003bfa:	f04f 0000 	mov.w	r0, #0
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	0159      	lsls	r1, r3, #5
 8003c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c08:	0150      	lsls	r0, r2, #5
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4621      	mov	r1, r4
 8003c10:	1a51      	subs	r1, r2, r1
 8003c12:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c14:	4629      	mov	r1, r5
 8003c16:	eb63 0301 	sbc.w	r3, r3, r1
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003c28:	4649      	mov	r1, r9
 8003c2a:	018b      	lsls	r3, r1, #6
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c32:	4641      	mov	r1, r8
 8003c34:	018a      	lsls	r2, r1, #6
 8003c36:	4641      	mov	r1, r8
 8003c38:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c3c:	4649      	mov	r1, r9
 8003c3e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c4e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c56:	4692      	mov	sl, r2
 8003c58:	469b      	mov	fp, r3
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	eb1a 0303 	adds.w	r3, sl, r3
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	462b      	mov	r3, r5
 8003c64:	eb4b 0303 	adc.w	r3, fp, r3
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c76:	4629      	mov	r1, r5
 8003c78:	028b      	lsls	r3, r1, #10
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c80:	4621      	mov	r1, r4
 8003c82:	028a      	lsls	r2, r1, #10
 8003c84:	4610      	mov	r0, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c90:	677a      	str	r2, [r7, #116]	; 0x74
 8003c92:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c96:	f7fc fabd 	bl	8000214 <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ca4:	4b41      	ldr	r3, [pc, #260]	; (8003dac <HAL_RCC_GetSysClockFreq+0x354>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003cb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cc6:	e0eb      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc8:	4b38      	ldr	r3, [pc, #224]	; (8003dac <HAL_RCC_GetSysClockFreq+0x354>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd4:	4b35      	ldr	r3, [pc, #212]	; (8003dac <HAL_RCC_GetSysClockFreq+0x354>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d06b      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce0:	4b32      	ldr	r3, [pc, #200]	; (8003dac <HAL_RCC_GetSysClockFreq+0x354>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf2:	663b      	str	r3, [r7, #96]	; 0x60
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	667b      	str	r3, [r7, #100]	; 0x64
 8003cf8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	462b      	mov	r3, r5
 8003d00:	f04f 0000 	mov.w	r0, #0
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	0159      	lsls	r1, r3, #5
 8003d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d0e:	0150      	lsls	r0, r2, #5
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4621      	mov	r1, r4
 8003d16:	1a51      	subs	r1, r2, r1
 8003d18:	61b9      	str	r1, [r7, #24]
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	eb63 0301 	sbc.w	r3, r3, r1
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003d2e:	4659      	mov	r1, fp
 8003d30:	018b      	lsls	r3, r1, #6
 8003d32:	4651      	mov	r1, sl
 8003d34:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d38:	4651      	mov	r1, sl
 8003d3a:	018a      	lsls	r2, r1, #6
 8003d3c:	4651      	mov	r1, sl
 8003d3e:	ebb2 0801 	subs.w	r8, r2, r1
 8003d42:	4659      	mov	r1, fp
 8003d44:	eb63 0901 	sbc.w	r9, r3, r1
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d5c:	4690      	mov	r8, r2
 8003d5e:	4699      	mov	r9, r3
 8003d60:	4623      	mov	r3, r4
 8003d62:	eb18 0303 	adds.w	r3, r8, r3
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	462b      	mov	r3, r5
 8003d6a:	eb49 0303 	adc.w	r3, r9, r3
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	024b      	lsls	r3, r1, #9
 8003d80:	4621      	mov	r1, r4
 8003d82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d86:	4621      	mov	r1, r4
 8003d88:	024a      	lsls	r2, r1, #9
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d92:	2200      	movs	r2, #0
 8003d94:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d96:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d9c:	f7fc fa3a 	bl	8000214 <__aeabi_uldivmod>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4613      	mov	r3, r2
 8003da6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003daa:	e065      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x420>
 8003dac:	40023800 	.word	0x40023800
 8003db0:	00f42400 	.word	0x00f42400
 8003db4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db8:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	099b      	lsrs	r3, r3, #6
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dc8:	653b      	str	r3, [r7, #80]	; 0x50
 8003dca:	2300      	movs	r3, #0
 8003dcc:	657b      	str	r3, [r7, #84]	; 0x54
 8003dce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003dd2:	4642      	mov	r2, r8
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	f04f 0000 	mov.w	r0, #0
 8003dda:	f04f 0100 	mov.w	r1, #0
 8003dde:	0159      	lsls	r1, r3, #5
 8003de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de4:	0150      	lsls	r0, r2, #5
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4641      	mov	r1, r8
 8003dec:	1a51      	subs	r1, r2, r1
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	4649      	mov	r1, r9
 8003df2:	eb63 0301 	sbc.w	r3, r3, r1
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e04:	4659      	mov	r1, fp
 8003e06:	018b      	lsls	r3, r1, #6
 8003e08:	4651      	mov	r1, sl
 8003e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e0e:	4651      	mov	r1, sl
 8003e10:	018a      	lsls	r2, r1, #6
 8003e12:	4651      	mov	r1, sl
 8003e14:	1a54      	subs	r4, r2, r1
 8003e16:	4659      	mov	r1, fp
 8003e18:	eb63 0501 	sbc.w	r5, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	00eb      	lsls	r3, r5, #3
 8003e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e2a:	00e2      	lsls	r2, r4, #3
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	461d      	mov	r5, r3
 8003e30:	4643      	mov	r3, r8
 8003e32:	18e3      	adds	r3, r4, r3
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	464b      	mov	r3, r9
 8003e38:	eb45 0303 	adc.w	r3, r5, r3
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	028b      	lsls	r3, r1, #10
 8003e4e:	4621      	mov	r1, r4
 8003e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e54:	4621      	mov	r1, r4
 8003e56:	028a      	lsls	r2, r1, #10
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e60:	2200      	movs	r2, #0
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e64:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e6a:	f7fc f9d3 	bl	8000214 <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4613      	mov	r3, r2
 8003e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	0f1b      	lsrs	r3, r3, #28
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e96:	e003      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e98:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	37b8      	adds	r7, #184	; 0xb8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	00f42400 	.word	0x00f42400

08003eb8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e28d      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8083 	beq.w	8003fde <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ed8:	4b94      	ldr	r3, [pc, #592]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d019      	beq.n	8003f18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ee4:	4b91      	ldr	r3, [pc, #580]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d106      	bne.n	8003efe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ef0:	4b8e      	ldr	r3, [pc, #568]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efc:	d00c      	beq.n	8003f18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efe:	4b8b      	ldr	r3, [pc, #556]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d112      	bne.n	8003f30 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0a:	4b88      	ldr	r3, [pc, #544]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f16:	d10b      	bne.n	8003f30 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f18:	4b84      	ldr	r3, [pc, #528]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d05b      	beq.n	8003fdc <HAL_RCC_OscConfig+0x124>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d157      	bne.n	8003fdc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e25a      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f38:	d106      	bne.n	8003f48 <HAL_RCC_OscConfig+0x90>
 8003f3a:	4b7c      	ldr	r3, [pc, #496]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a7b      	ldr	r2, [pc, #492]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e01d      	b.n	8003f84 <HAL_RCC_OscConfig+0xcc>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCC_OscConfig+0xb4>
 8003f52:	4b76      	ldr	r3, [pc, #472]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a75      	ldr	r2, [pc, #468]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b73      	ldr	r3, [pc, #460]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a72      	ldr	r2, [pc, #456]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e00b      	b.n	8003f84 <HAL_RCC_OscConfig+0xcc>
 8003f6c:	4b6f      	ldr	r3, [pc, #444]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6e      	ldr	r2, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4b6c      	ldr	r3, [pc, #432]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a6b      	ldr	r2, [pc, #428]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fc fdca 	bl	8000b24 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f94:	f7fc fdc6 	bl	8000b24 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	; 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e21f      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa6:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0xdc>
 8003fb2:	e014      	b.n	8003fde <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fc fdb6 	bl	8000b24 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fc fdb2 	bl	8000b24 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e20b      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fce:	4b57      	ldr	r3, [pc, #348]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x104>
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d06f      	beq.n	80040ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fea:	4b50      	ldr	r3, [pc, #320]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d017      	beq.n	8004026 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ff6:	4b4d      	ldr	r3, [pc, #308]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d105      	bne.n	800400e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004002:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00b      	beq.n	8004026 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004016:	2b0c      	cmp	r3, #12
 8004018:	d11c      	bne.n	8004054 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401a:	4b44      	ldr	r3, [pc, #272]	; (800412c <HAL_RCC_OscConfig+0x274>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d116      	bne.n	8004054 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004026:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_RCC_OscConfig+0x186>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d001      	beq.n	800403e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e1d3      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403e:	4b3b      	ldr	r3, [pc, #236]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4937      	ldr	r1, [pc, #220]	; (800412c <HAL_RCC_OscConfig+0x274>)
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004052:	e03a      	b.n	80040ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800405c:	4b34      	ldr	r3, [pc, #208]	; (8004130 <HAL_RCC_OscConfig+0x278>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fc fd5f 	bl	8000b24 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406a:	f7fc fd5b 	bl	8000b24 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e1b4      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_OscConfig+0x274>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4b28      	ldr	r3, [pc, #160]	; (800412c <HAL_RCC_OscConfig+0x274>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4925      	ldr	r1, [pc, #148]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]
 800409c:	e015      	b.n	80040ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <HAL_RCC_OscConfig+0x278>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fc fd3e 	bl	8000b24 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ac:	f7fc fd3a 	bl	8000b24 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e193      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040be:	4b1b      	ldr	r3, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x274>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d036      	beq.n	8004144 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040de:	4b15      	ldr	r3, [pc, #84]	; (8004134 <HAL_RCC_OscConfig+0x27c>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e4:	f7fc fd1e 	bl	8000b24 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ec:	f7fc fd1a 	bl	8000b24 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e173      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fe:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8004100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x234>
 800410a:	e01b      	b.n	8004144 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <HAL_RCC_OscConfig+0x27c>)
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fc fd07 	bl	8000b24 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004118:	e00e      	b.n	8004138 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411a:	f7fc fd03 	bl	8000b24 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d907      	bls.n	8004138 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e15c      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
 800412c:	40023800 	.word	0x40023800
 8004130:	42470000 	.word	0x42470000
 8004134:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004138:	4b8a      	ldr	r3, [pc, #552]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1ea      	bne.n	800411a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8097 	beq.w	8004280 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004152:	2300      	movs	r3, #0
 8004154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004156:	4b83      	ldr	r3, [pc, #524]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10f      	bne.n	8004182 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	4b7f      	ldr	r3, [pc, #508]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	4a7e      	ldr	r2, [pc, #504]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 800416c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004170:	6413      	str	r3, [r2, #64]	; 0x40
 8004172:	4b7c      	ldr	r3, [pc, #496]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800417e:	2301      	movs	r3, #1
 8004180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004182:	4b79      	ldr	r3, [pc, #484]	; (8004368 <HAL_RCC_OscConfig+0x4b0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d118      	bne.n	80041c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418e:	4b76      	ldr	r3, [pc, #472]	; (8004368 <HAL_RCC_OscConfig+0x4b0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a75      	ldr	r2, [pc, #468]	; (8004368 <HAL_RCC_OscConfig+0x4b0>)
 8004194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419a:	f7fc fcc3 	bl	8000b24 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a2:	f7fc fcbf 	bl	8000b24 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e118      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	4b6c      	ldr	r3, [pc, #432]	; (8004368 <HAL_RCC_OscConfig+0x4b0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d106      	bne.n	80041d6 <HAL_RCC_OscConfig+0x31e>
 80041c8:	4b66      	ldr	r3, [pc, #408]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	4a65      	ldr	r2, [pc, #404]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	6713      	str	r3, [r2, #112]	; 0x70
 80041d4:	e01c      	b.n	8004210 <HAL_RCC_OscConfig+0x358>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b05      	cmp	r3, #5
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCC_OscConfig+0x340>
 80041de:	4b61      	ldr	r3, [pc, #388]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a60      	ldr	r2, [pc, #384]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 80041e4:	f043 0304 	orr.w	r3, r3, #4
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ea:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	4a5d      	ldr	r2, [pc, #372]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	6713      	str	r3, [r2, #112]	; 0x70
 80041f6:	e00b      	b.n	8004210 <HAL_RCC_OscConfig+0x358>
 80041f8:	4b5a      	ldr	r3, [pc, #360]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	4a59      	ldr	r2, [pc, #356]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	6713      	str	r3, [r2, #112]	; 0x70
 8004204:	4b57      	ldr	r3, [pc, #348]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	4a56      	ldr	r2, [pc, #344]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 800420a:	f023 0304 	bic.w	r3, r3, #4
 800420e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d015      	beq.n	8004244 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fc fc84 	bl	8000b24 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421e:	e00a      	b.n	8004236 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004220:	f7fc fc80 	bl	8000b24 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e0d7      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004236:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0ee      	beq.n	8004220 <HAL_RCC_OscConfig+0x368>
 8004242:	e014      	b.n	800426e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004244:	f7fc fc6e 	bl	8000b24 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424a:	e00a      	b.n	8004262 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424c:	f7fc fc6a 	bl	8000b24 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f241 3288 	movw	r2, #5000	; 0x1388
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e0c1      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004262:	4b40      	ldr	r3, [pc, #256]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1ee      	bne.n	800424c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800426e:	7dfb      	ldrb	r3, [r7, #23]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d105      	bne.n	8004280 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004274:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	4a3a      	ldr	r2, [pc, #232]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 800427a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800427e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80ad 	beq.w	80043e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800428a:	4b36      	ldr	r3, [pc, #216]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b08      	cmp	r3, #8
 8004294:	d060      	beq.n	8004358 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d145      	bne.n	800432a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429e:	4b33      	ldr	r3, [pc, #204]	; (800436c <HAL_RCC_OscConfig+0x4b4>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fc fc3e 	bl	8000b24 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ac:	f7fc fc3a 	bl	8000b24 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e093      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042be:	4b29      	ldr	r3, [pc, #164]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69da      	ldr	r2, [r3, #28]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	019b      	lsls	r3, r3, #6
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	3b01      	subs	r3, #1
 80042e4:	041b      	lsls	r3, r3, #16
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	061b      	lsls	r3, r3, #24
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	071b      	lsls	r3, r3, #28
 80042f6:	491b      	ldr	r1, [pc, #108]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <HAL_RCC_OscConfig+0x4b4>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004302:	f7fc fc0f 	bl	8000b24 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430a:	f7fc fc0b 	bl	8000b24 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e064      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x452>
 8004328:	e05c      	b.n	80043e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <HAL_RCC_OscConfig+0x4b4>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fc fbf8 	bl	8000b24 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004338:	f7fc fbf4 	bl	8000b24 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e04d      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_RCC_OscConfig+0x4ac>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x480>
 8004356:	e045      	b.n	80043e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d107      	bne.n	8004370 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e040      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
 8004364:	40023800 	.word	0x40023800
 8004368:	40007000 	.word	0x40007000
 800436c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004370:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <HAL_RCC_OscConfig+0x538>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d030      	beq.n	80043e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d129      	bne.n	80043e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d122      	bne.n	80043e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043a0:	4013      	ands	r3, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d119      	bne.n	80043e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	3b01      	subs	r3, #1
 80043ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d10f      	bne.n	80043e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40023800 	.word	0x40023800

080043f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043f4:	b084      	sub	sp, #16
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	f107 001c 	add.w	r0, r7, #28
 8004402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	2b01      	cmp	r3, #1
 800440a:	d122      	bne.n	8004452 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004436:	2b01      	cmp	r3, #1
 8004438:	d105      	bne.n	8004446 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f001 fbe8 	bl	8005c1c <USB_CoreReset>
 800444c:	4603      	mov	r3, r0
 800444e:	73fb      	strb	r3, [r7, #15]
 8004450:	e01a      	b.n	8004488 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f001 fbdc 	bl	8005c1c <USB_CoreReset>
 8004464:	4603      	mov	r3, r0
 8004466:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
 800447a:	e005      	b.n	8004488 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10b      	bne.n	80044a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f043 0206 	orr.w	r2, r3, #6
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f043 0220 	orr.w	r2, r3, #32
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044b2:	b004      	add	sp, #16
 80044b4:	4770      	bx	lr
	...

080044b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	4613      	mov	r3, r2
 80044c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d165      	bne.n	8004598 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4a41      	ldr	r2, [pc, #260]	; (80045d4 <USB_SetTurnaroundTime+0x11c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d906      	bls.n	80044e2 <USB_SetTurnaroundTime+0x2a>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4a40      	ldr	r2, [pc, #256]	; (80045d8 <USB_SetTurnaroundTime+0x120>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d202      	bcs.n	80044e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044dc:	230f      	movs	r3, #15
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e062      	b.n	80045a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4a3c      	ldr	r2, [pc, #240]	; (80045d8 <USB_SetTurnaroundTime+0x120>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d306      	bcc.n	80044f8 <USB_SetTurnaroundTime+0x40>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4a3b      	ldr	r2, [pc, #236]	; (80045dc <USB_SetTurnaroundTime+0x124>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d202      	bcs.n	80044f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044f2:	230e      	movs	r3, #14
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	e057      	b.n	80045a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4a38      	ldr	r2, [pc, #224]	; (80045dc <USB_SetTurnaroundTime+0x124>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d306      	bcc.n	800450e <USB_SetTurnaroundTime+0x56>
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4a37      	ldr	r2, [pc, #220]	; (80045e0 <USB_SetTurnaroundTime+0x128>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d202      	bcs.n	800450e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004508:	230d      	movs	r3, #13
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	e04c      	b.n	80045a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4a33      	ldr	r2, [pc, #204]	; (80045e0 <USB_SetTurnaroundTime+0x128>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d306      	bcc.n	8004524 <USB_SetTurnaroundTime+0x6c>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4a32      	ldr	r2, [pc, #200]	; (80045e4 <USB_SetTurnaroundTime+0x12c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d802      	bhi.n	8004524 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800451e:	230c      	movs	r3, #12
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e041      	b.n	80045a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4a2f      	ldr	r2, [pc, #188]	; (80045e4 <USB_SetTurnaroundTime+0x12c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d906      	bls.n	800453a <USB_SetTurnaroundTime+0x82>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4a2e      	ldr	r2, [pc, #184]	; (80045e8 <USB_SetTurnaroundTime+0x130>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d802      	bhi.n	800453a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004534:	230b      	movs	r3, #11
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e036      	b.n	80045a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	4a2a      	ldr	r2, [pc, #168]	; (80045e8 <USB_SetTurnaroundTime+0x130>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d906      	bls.n	8004550 <USB_SetTurnaroundTime+0x98>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4a29      	ldr	r2, [pc, #164]	; (80045ec <USB_SetTurnaroundTime+0x134>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d802      	bhi.n	8004550 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800454a:	230a      	movs	r3, #10
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	e02b      	b.n	80045a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4a26      	ldr	r2, [pc, #152]	; (80045ec <USB_SetTurnaroundTime+0x134>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d906      	bls.n	8004566 <USB_SetTurnaroundTime+0xae>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4a25      	ldr	r2, [pc, #148]	; (80045f0 <USB_SetTurnaroundTime+0x138>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d202      	bcs.n	8004566 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004560:	2309      	movs	r3, #9
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	e020      	b.n	80045a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	4a21      	ldr	r2, [pc, #132]	; (80045f0 <USB_SetTurnaroundTime+0x138>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d306      	bcc.n	800457c <USB_SetTurnaroundTime+0xc4>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4a20      	ldr	r2, [pc, #128]	; (80045f4 <USB_SetTurnaroundTime+0x13c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d802      	bhi.n	800457c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004576:	2308      	movs	r3, #8
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e015      	b.n	80045a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <USB_SetTurnaroundTime+0x13c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d906      	bls.n	8004592 <USB_SetTurnaroundTime+0xda>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <USB_SetTurnaroundTime+0x140>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d202      	bcs.n	8004592 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800458c:	2307      	movs	r3, #7
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	e00a      	b.n	80045a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004592:	2306      	movs	r3, #6
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	e007      	b.n	80045a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800459e:	2309      	movs	r3, #9
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	e001      	b.n	80045a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80045a4:	2309      	movs	r3, #9
 80045a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	029b      	lsls	r3, r3, #10
 80045bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80045c0:	431a      	orrs	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	00d8acbf 	.word	0x00d8acbf
 80045d8:	00e4e1c0 	.word	0x00e4e1c0
 80045dc:	00f42400 	.word	0x00f42400
 80045e0:	01067380 	.word	0x01067380
 80045e4:	011a499f 	.word	0x011a499f
 80045e8:	01312cff 	.word	0x01312cff
 80045ec:	014ca43f 	.word	0x014ca43f
 80045f0:	016e3600 	.word	0x016e3600
 80045f4:	01a6ab1f 	.word	0x01a6ab1f
 80045f8:	01e84800 	.word	0x01e84800

080045fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f043 0201 	orr.w	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f023 0201 	bic.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d115      	bne.n	800468e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800466e:	2001      	movs	r0, #1
 8004670:	f7fc fa64 	bl	8000b3c <HAL_Delay>
      ms++;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3301      	adds	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 fa3f 	bl	8005afe <USB_GetMode>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d01e      	beq.n	80046c4 <USB_SetCurrentMode+0x84>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b31      	cmp	r3, #49	; 0x31
 800468a:	d9f0      	bls.n	800466e <USB_SetCurrentMode+0x2e>
 800468c:	e01a      	b.n	80046c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d115      	bne.n	80046c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046a0:	2001      	movs	r0, #1
 80046a2:	f7fc fa4b 	bl	8000b3c <HAL_Delay>
      ms++;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3301      	adds	r3, #1
 80046aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f001 fa26 	bl	8005afe <USB_GetMode>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <USB_SetCurrentMode+0x84>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b31      	cmp	r3, #49	; 0x31
 80046bc:	d9f0      	bls.n	80046a0 <USB_SetCurrentMode+0x60>
 80046be:	e001      	b.n	80046c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e005      	b.n	80046d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b32      	cmp	r3, #50	; 0x32
 80046c8:	d101      	bne.n	80046ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046d8:	b084      	sub	sp, #16
 80046da:	b580      	push	{r7, lr}
 80046dc:	b086      	sub	sp, #24
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	e009      	b.n	800470c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	3340      	adds	r3, #64	; 0x40
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	2200      	movs	r2, #0
 8004704:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	3301      	adds	r3, #1
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b0e      	cmp	r3, #14
 8004710:	d9f2      	bls.n	80046f8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d11c      	bne.n	8004752 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004726:	f043 0302 	orr.w	r3, r3, #2
 800472a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e005      	b.n	800475e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004764:	461a      	mov	r2, r3
 8004766:	2300      	movs	r3, #0
 8004768:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004770:	4619      	mov	r1, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004778:	461a      	mov	r2, r3
 800477a:	680b      	ldr	r3, [r1, #0]
 800477c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	2b01      	cmp	r3, #1
 8004782:	d10c      	bne.n	800479e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800478a:	2100      	movs	r1, #0
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f965 	bl	8004a5c <USB_SetDevSpeed>
 8004792:	e008      	b.n	80047a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004794:	2101      	movs	r1, #1
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f960 	bl	8004a5c <USB_SetDevSpeed>
 800479c:	e003      	b.n	80047a6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800479e:	2103      	movs	r1, #3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f95b 	bl	8004a5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047a6:	2110      	movs	r1, #16
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f8f3 	bl	8004994 <USB_FlushTxFifo>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f91f 	bl	80049fc <USB_FlushRxFifo>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	461a      	mov	r2, r3
 80047d0:	2300      	movs	r3, #0
 80047d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047da:	461a      	mov	r2, r3
 80047dc:	2300      	movs	r3, #0
 80047de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	461a      	mov	r2, r3
 80047e8:	2300      	movs	r3, #0
 80047ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ec:	2300      	movs	r3, #0
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	e043      	b.n	800487a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004808:	d118      	bne.n	800483c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	461a      	mov	r2, r3
 800481e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e013      	b.n	800484e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004832:	461a      	mov	r2, r3
 8004834:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e008      	b.n	800484e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	2300      	movs	r3, #0
 800484c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485a:	461a      	mov	r2, r3
 800485c:	2300      	movs	r3, #0
 800485e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	461a      	mov	r2, r3
 800486e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004872:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	3301      	adds	r3, #1
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	d3b7      	bcc.n	80047f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004882:	2300      	movs	r3, #0
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	e043      	b.n	8004910 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800489a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800489e:	d118      	bne.n	80048d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b2:	461a      	mov	r2, r3
 80048b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e013      	b.n	80048e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	461a      	mov	r2, r3
 80048ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	e008      	b.n	80048e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	461a      	mov	r2, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f0:	461a      	mov	r2, r3
 80048f2:	2300      	movs	r3, #0
 80048f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004902:	461a      	mov	r2, r3
 8004904:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004908:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	3301      	adds	r3, #1
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	429a      	cmp	r2, r3
 8004916:	d3b7      	bcc.n	8004888 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800492a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004938:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	2b00      	cmp	r3, #0
 800493e:	d105      	bne.n	800494c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f043 0210 	orr.w	r2, r3, #16
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699a      	ldr	r2, [r3, #24]
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <USB_DevInit+0x2b8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f043 0208 	orr.w	r2, r3, #8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800496a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004978:	f043 0304 	orr.w	r3, r3, #4
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004980:	7dfb      	ldrb	r3, [r7, #23]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800498c:	b004      	add	sp, #16
 800498e:	4770      	bx	lr
 8004990:	803c3800 	.word	0x803c3800

08004994 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3301      	adds	r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a13      	ldr	r2, [pc, #76]	; (80049f8 <USB_FlushTxFifo+0x64>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d901      	bls.n	80049b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e01b      	b.n	80049ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	daf2      	bge.n	80049a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	019b      	lsls	r3, r3, #6
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3301      	adds	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <USB_FlushTxFifo+0x64>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e006      	b.n	80049ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d0f0      	beq.n	80049cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	00030d40 	.word	0x00030d40

080049fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a11      	ldr	r2, [pc, #68]	; (8004a58 <USB_FlushRxFifo+0x5c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e018      	b.n	8004a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	daf2      	bge.n	8004a08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2210      	movs	r2, #16
 8004a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4a08      	ldr	r2, [pc, #32]	; (8004a58 <USB_FlushRxFifo+0x5c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e006      	b.n	8004a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d0f0      	beq.n	8004a2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	00030d40 	.word	0x00030d40

08004a5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	68f9      	ldr	r1, [r7, #12]
 8004a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b087      	sub	sp, #28
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 0306 	and.w	r3, r3, #6
 8004aa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75fb      	strb	r3, [r7, #23]
 8004ab2:	e00a      	b.n	8004aca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d002      	beq.n	8004ac0 <USB_GetDevSpeed+0x32>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d102      	bne.n	8004ac6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	75fb      	strb	r3, [r7, #23]
 8004ac4:	e001      	b.n	8004aca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ac6:	230f      	movs	r3, #15
 8004ac8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d13a      	bne.n	8004b6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	68f9      	ldr	r1, [r7, #12]
 8004b0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d155      	bne.n	8004bd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	791b      	ldrb	r3, [r3, #4]
 8004b46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	059b      	lsls	r3, r3, #22
 8004b4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b50:	4313      	orrs	r3, r2
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	0151      	lsls	r1, r2, #5
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	440a      	add	r2, r1
 8004b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e036      	b.n	8004bd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d11a      	bne.n	8004bd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	791b      	ldrb	r3, [r3, #4]
 8004bbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d161      	bne.n	8004cc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c1a:	d11f      	bne.n	8004c5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	2101      	movs	r1, #1
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	68f9      	ldr	r1, [r7, #12]
 8004c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	0159      	lsls	r1, r3, #5
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	440b      	add	r3, r1
 8004cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4b35      	ldr	r3, [pc, #212]	; (8004d98 <USB_DeactivateEndpoint+0x1b0>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]
 8004cc6:	e060      	b.n	8004d8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cde:	d11f      	bne.n	8004d20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	0151      	lsls	r1, r2, #5
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	440a      	add	r2, r1
 8004d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d40:	4013      	ands	r3, r2
 8004d42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	2101      	movs	r1, #1
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	041b      	lsls	r3, r3, #16
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	68f9      	ldr	r1, [r7, #12]
 8004d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d64:	4013      	ands	r3, r2
 8004d66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	0159      	lsls	r1, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	440b      	add	r3, r1
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d82:	4619      	mov	r1, r3
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <USB_DeactivateEndpoint+0x1b4>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	ec337800 	.word	0xec337800
 8004d9c:	eff37800 	.word	0xeff37800

08004da0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08a      	sub	sp, #40	; 0x28
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	f040 815c 	bne.w	800507a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d132      	bne.n	8004e30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004de8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e28:	0cdb      	lsrs	r3, r3, #19
 8004e2a:	04db      	lsls	r3, r3, #19
 8004e2c:	6113      	str	r3, [r2, #16]
 8004e2e:	e074      	b.n	8004f1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4a:	0cdb      	lsrs	r3, r3, #19
 8004e4c:	04db      	lsls	r3, r3, #19
 8004e4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	6999      	ldr	r1, [r3, #24]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	440b      	add	r3, r1
 8004e8c:	1e59      	subs	r1, r3, #1
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e98:	4b9d      	ldr	r3, [pc, #628]	; (8005110 <USB_EPStartXfer+0x370>)
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	69b9      	ldr	r1, [r7, #24]
 8004e9e:	0148      	lsls	r0, r1, #5
 8004ea0:	69f9      	ldr	r1, [r7, #28]
 8004ea2:	4401      	add	r1, r0
 8004ea4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec2:	69b9      	ldr	r1, [r7, #24]
 8004ec4:	0148      	lsls	r0, r1, #5
 8004ec6:	69f9      	ldr	r1, [r7, #28]
 8004ec8:	4401      	add	r1, r0
 8004eca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	791b      	ldrb	r3, [r3, #4]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d11f      	bne.n	8004f1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ef8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d14b      	bne.n	8004fb8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f34:	461a      	mov	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	791b      	ldrb	r3, [r3, #4]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d128      	bne.n	8004f96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d110      	bne.n	8004f76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	e00f      	b.n	8004f96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	0151      	lsls	r1, r2, #5
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	440a      	add	r2, r1
 8004fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e133      	b.n	8005220 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	791b      	ldrb	r3, [r3, #4]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d015      	beq.n	800500c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 811b 	beq.w	8005220 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	69f9      	ldr	r1, [r7, #28]
 8005002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005006:	4313      	orrs	r3, r2
 8005008:	634b      	str	r3, [r1, #52]	; 0x34
 800500a:	e109      	b.n	8005220 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d110      	bne.n	800503e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	0151      	lsls	r1, r2, #5
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	440a      	add	r2, r1
 8005032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005036:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	e00f      	b.n	800505e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	0151      	lsls	r1, r2, #5
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	440a      	add	r2, r1
 8005054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6919      	ldr	r1, [r3, #16]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	b298      	uxth	r0, r3
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	4603      	mov	r3, r0
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fade 	bl	8005634 <USB_WritePacket>
 8005078:	e0d2      	b.n	8005220 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	440a      	add	r2, r1
 8005090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005094:	0cdb      	lsrs	r3, r3, #19
 8005096:	04db      	lsls	r3, r3, #19
 8005098:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	0151      	lsls	r1, r2, #5
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	440a      	add	r2, r1
 80050b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d126      	bne.n	8005114 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050dc:	69b9      	ldr	r1, [r7, #24]
 80050de:	0148      	lsls	r0, r1, #5
 80050e0:	69f9      	ldr	r1, [r7, #28]
 80050e2:	4401      	add	r1, r0
 80050e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050e8:	4313      	orrs	r3, r2
 80050ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	69fa      	ldr	r2, [r7, #28]
 8005100:	440a      	add	r2, r1
 8005102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800510a:	6113      	str	r3, [r2, #16]
 800510c:	e03a      	b.n	8005184 <USB_EPStartXfer+0x3e4>
 800510e:	bf00      	nop
 8005110:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	699a      	ldr	r2, [r3, #24]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4413      	add	r3, r2
 800511e:	1e5a      	subs	r2, r3, #1
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	fbb2 f3f3 	udiv	r3, r2, r3
 8005128:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	8afa      	ldrh	r2, [r7, #22]
 8005130:	fb03 f202 	mul.w	r2, r3, r2
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	8afb      	ldrh	r3, [r7, #22]
 8005148:	04d9      	lsls	r1, r3, #19
 800514a:	4b38      	ldr	r3, [pc, #224]	; (800522c <USB_EPStartXfer+0x48c>)
 800514c:	400b      	ands	r3, r1
 800514e:	69b9      	ldr	r1, [r7, #24]
 8005150:	0148      	lsls	r0, r1, #5
 8005152:	69f9      	ldr	r1, [r7, #28]
 8005154:	4401      	add	r1, r0
 8005156:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800515a:	4313      	orrs	r3, r2
 800515c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005174:	69b9      	ldr	r1, [r7, #24]
 8005176:	0148      	lsls	r0, r1, #5
 8005178:	69f9      	ldr	r1, [r7, #28]
 800517a:	4401      	add	r1, r0
 800517c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005180:	4313      	orrs	r3, r2
 8005182:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d10d      	bne.n	80051a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6919      	ldr	r1, [r3, #16]
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a2:	460a      	mov	r2, r1
 80051a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	791b      	ldrb	r3, [r3, #4]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d128      	bne.n	8005200 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d110      	bne.n	80051e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	e00f      	b.n	8005200 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800521a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800521e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	1ff80000 	.word	0x1ff80000

08005230 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	785b      	ldrb	r3, [r3, #1]
 800524c:	2b01      	cmp	r3, #1
 800524e:	f040 80ce 	bne.w	80053ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d132      	bne.n	80052c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	440a      	add	r2, r1
 8005270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005274:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005278:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800527c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	440a      	add	r2, r1
 8005294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800529c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	0151      	lsls	r1, r2, #5
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	440a      	add	r2, r1
 80052b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b8:	0cdb      	lsrs	r3, r3, #19
 80052ba:	04db      	lsls	r3, r3, #19
 80052bc:	6113      	str	r3, [r2, #16]
 80052be:	e04e      	b.n	800535e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052da:	0cdb      	lsrs	r3, r3, #19
 80052dc:	04db      	lsls	r3, r3, #19
 80052de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005302:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	429a      	cmp	r2, r3
 800530e:	d903      	bls.n	8005318 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	440a      	add	r2, r1
 800532e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005332:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005336:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534e:	6939      	ldr	r1, [r7, #16]
 8005350:	0148      	lsls	r0, r1, #5
 8005352:	6979      	ldr	r1, [r7, #20]
 8005354:	4401      	add	r1, r0
 8005356:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800535a:	4313      	orrs	r3, r2
 800535c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d11e      	bne.n	80053a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	461a      	mov	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e097      	b.n	80054d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 8083 	beq.w	80054d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	2101      	movs	r1, #1
 80053de:	fa01 f303 	lsl.w	r3, r1, r3
 80053e2:	6979      	ldr	r1, [r7, #20]
 80053e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e8:	4313      	orrs	r3, r2
 80053ea:	634b      	str	r3, [r1, #52]	; 0x34
 80053ec:	e071      	b.n	80054d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005408:	0cdb      	lsrs	r3, r3, #19
 800540a:	04db      	lsls	r3, r3, #19
 800540c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800542c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005430:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	0151      	lsls	r1, r2, #5
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	440a      	add	r2, r1
 8005460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005468:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005480:	6939      	ldr	r1, [r7, #16]
 8005482:	0148      	lsls	r0, r1, #5
 8005484:	6979      	ldr	r1, [r7, #20]
 8005486:	4401      	add	r1, r0
 8005488:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800548c:	4313      	orrs	r3, r2
 800548e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d10d      	bne.n	80054b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	6919      	ldr	r1, [r3, #16]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ae:	460a      	mov	r2, r1
 80054b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d14a      	bne.n	8005594 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005516:	f040 8086 	bne.w	8005626 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	7812      	ldrb	r2, [r2, #0]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005538:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800553c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	7812      	ldrb	r2, [r2, #0]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005560:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f242 7210 	movw	r2, #10000	; 0x2710
 800556e:	4293      	cmp	r3, r2
 8005570:	d902      	bls.n	8005578 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
          break;
 8005576:	e056      	b.n	8005626 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800558c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005590:	d0e7      	beq.n	8005562 <USB_EPStopXfer+0x82>
 8005592:	e048      	b.n	8005626 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ac:	d13b      	bne.n	8005626 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	7812      	ldrb	r2, [r2, #0]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	7812      	ldrb	r2, [r2, #0]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3301      	adds	r3, #1
 80055fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005602:	4293      	cmp	r3, r2
 8005604:	d902      	bls.n	800560c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
          break;
 800560a:	e00c      	b.n	8005626 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005624:	d0e7      	beq.n	80055f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
}
 8005628:	4618      	mov	r0, r3
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005634:	b480      	push	{r7}
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	4611      	mov	r1, r2
 8005640:	461a      	mov	r2, r3
 8005642:	460b      	mov	r3, r1
 8005644:	71fb      	strb	r3, [r7, #7]
 8005646:	4613      	mov	r3, r2
 8005648:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005652:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005656:	2b00      	cmp	r3, #0
 8005658:	d123      	bne.n	80056a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800565a:	88bb      	ldrh	r3, [r7, #4]
 800565c:	3303      	adds	r3, #3
 800565e:	089b      	lsrs	r3, r3, #2
 8005660:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005662:	2300      	movs	r3, #0
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	e018      	b.n	800569a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	031a      	lsls	r2, r3, #12
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	4413      	add	r3, r2
 8005670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005674:	461a      	mov	r2, r3
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	3301      	adds	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	3301      	adds	r3, #1
 800568c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3301      	adds	r3, #1
 8005692:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	3301      	adds	r3, #1
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d3e2      	bcc.n	8005668 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3724      	adds	r7, #36	; 0x24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b08b      	sub	sp, #44	; 0x2c
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	089b      	lsrs	r3, r3, #2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	623b      	str	r3, [r7, #32]
 80056da:	e014      	b.n	8005706 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	3301      	adds	r3, #1
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	3301      	adds	r3, #1
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	3301      	adds	r3, #1
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	3301      	adds	r3, #1
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	3301      	adds	r3, #1
 8005704:	623b      	str	r3, [r7, #32]
 8005706:	6a3a      	ldr	r2, [r7, #32]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	429a      	cmp	r2, r3
 800570c:	d3e6      	bcc.n	80056dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800570e:	8bfb      	ldrh	r3, [r7, #30]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01e      	beq.n	8005752 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571e:	461a      	mov	r2, r3
 8005720:	f107 0310 	add.w	r3, r7, #16
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	b2da      	uxtb	r2, r3
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	701a      	strb	r2, [r3, #0]
      i++;
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	3301      	adds	r3, #1
 800573e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	3301      	adds	r3, #1
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005746:	8bfb      	ldrh	r3, [r7, #30]
 8005748:	3b01      	subs	r3, #1
 800574a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800574c:	8bfb      	ldrh	r3, [r7, #30]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1ea      	bne.n	8005728 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005754:	4618      	mov	r0, r3
 8005756:	372c      	adds	r7, #44	; 0x2c
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	785b      	ldrb	r3, [r3, #1]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d12c      	bne.n	80057d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	db12      	blt.n	80057b4 <USB_EPSetStall+0x54>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00f      	beq.n	80057b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	e02b      	b.n	800582e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	db12      	blt.n	800580e <USB_EPSetStall+0xae>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00f      	beq.n	800580e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	440a      	add	r2, r1
 8005804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005808:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800580c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	440a      	add	r2, r1
 8005824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800582c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d128      	bne.n	80058aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005876:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	791b      	ldrb	r3, [r3, #4]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d003      	beq.n	8005888 <USB_EPClearStall+0x4c>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	791b      	ldrb	r3, [r3, #4]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d138      	bne.n	80058fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	e027      	b.n	80058fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	791b      	ldrb	r3, [r3, #4]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d003      	beq.n	80058da <USB_EPClearStall+0x9e>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	791b      	ldrb	r3, [r3, #4]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d10f      	bne.n	80058fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005926:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800592a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800593c:	68f9      	ldr	r1, [r7, #12]
 800593e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005942:	4313      	orrs	r3, r2
 8005944:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005982:	f023 0302 	bic.w	r3, r3, #2
 8005986:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005996:	b480      	push	{r7}
 8005998:	b085      	sub	sp, #20
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059b0:	f023 0303 	bic.w	r3, r3, #3
 80059b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c4:	f043 0302 	orr.w	r3, r3, #2
 80059c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4013      	ands	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059f0:	68fb      	ldr	r3, [r7, #12]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	0c1b      	lsrs	r3, r3, #16
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	4013      	ands	r3, r2
 8005a54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	b29b      	uxth	r3, r3
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a94:	68bb      	ldr	r3, [r7, #8]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b087      	sub	sp, #28
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad2:	01db      	lsls	r3, r3, #7
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4013      	ands	r3, r2
 8005aee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005af0:	68bb      	ldr	r3, [r7, #8]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b38:	f023 0307 	bic.w	r3, r3, #7
 8005b3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	333c      	adds	r3, #60	; 0x3c
 8005b76:	3304      	adds	r3, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4a26      	ldr	r2, [pc, #152]	; (8005c18 <USB_EP0_OutStart+0xb8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d90a      	bls.n	8005b9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b94:	d101      	bne.n	8005b9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e037      	b.n	8005c0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc8:	f043 0318 	orr.w	r3, r3, #24
 8005bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bdc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005be0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005be2:	7afb      	ldrb	r3, [r7, #11]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d10f      	bne.n	8005c08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	461a      	mov	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	4f54300a 	.word	0x4f54300a

08005c1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <USB_CoreReset+0x64>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e01b      	b.n	8005c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	daf2      	bge.n	8005c28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f043 0201 	orr.w	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3301      	adds	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <USB_CoreReset+0x64>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e006      	b.n	8005c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d0f0      	beq.n	8005c52 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	00030d40 	.word	0x00030d40

08005c84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c94:	f002 fd40 	bl	8008718 <USBD_static_malloc>
 8005c98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d109      	bne.n	8005cb4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	32b0      	adds	r2, #176	; 0xb0
 8005caa:	2100      	movs	r1, #0
 8005cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e0d4      	b.n	8005e5e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005cb4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005cb8:	2100      	movs	r1, #0
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f002 fd94 	bl	80087e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	32b0      	adds	r2, #176	; 0xb0
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	32b0      	adds	r2, #176	; 0xb0
 8005cda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7c1b      	ldrb	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d138      	bne.n	8005d5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005cec:	4b5e      	ldr	r3, [pc, #376]	; (8005e68 <USBD_CDC_Init+0x1e4>)
 8005cee:	7819      	ldrb	r1, [r3, #0]
 8005cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f002 fb9d 	bl	8008436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005cfc:	4b5a      	ldr	r3, [pc, #360]	; (8005e68 <USBD_CDC_Init+0x1e4>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3324      	adds	r3, #36	; 0x24
 8005d12:	2201      	movs	r2, #1
 8005d14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d16:	4b55      	ldr	r3, [pc, #340]	; (8005e6c <USBD_CDC_Init+0x1e8>)
 8005d18:	7819      	ldrb	r1, [r3, #0]
 8005d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d1e:	2202      	movs	r2, #2
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f002 fb88 	bl	8008436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d26:	4b51      	ldr	r3, [pc, #324]	; (8005e6c <USBD_CDC_Init+0x1e8>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f003 020f 	and.w	r2, r3, #15
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d3e:	2201      	movs	r2, #1
 8005d40:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d42:	4b4b      	ldr	r3, [pc, #300]	; (8005e70 <USBD_CDC_Init+0x1ec>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f003 020f 	and.w	r2, r3, #15
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	3326      	adds	r3, #38	; 0x26
 8005d58:	2210      	movs	r2, #16
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	e035      	b.n	8005dca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d5e:	4b42      	ldr	r3, [pc, #264]	; (8005e68 <USBD_CDC_Init+0x1e4>)
 8005d60:	7819      	ldrb	r1, [r3, #0]
 8005d62:	2340      	movs	r3, #64	; 0x40
 8005d64:	2202      	movs	r2, #2
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f002 fb65 	bl	8008436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d6c:	4b3e      	ldr	r3, [pc, #248]	; (8005e68 <USBD_CDC_Init+0x1e4>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f003 020f 	and.w	r2, r3, #15
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	3324      	adds	r3, #36	; 0x24
 8005d82:	2201      	movs	r2, #1
 8005d84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d86:	4b39      	ldr	r3, [pc, #228]	; (8005e6c <USBD_CDC_Init+0x1e8>)
 8005d88:	7819      	ldrb	r1, [r3, #0]
 8005d8a:	2340      	movs	r3, #64	; 0x40
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f002 fb51 	bl	8008436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d94:	4b35      	ldr	r3, [pc, #212]	; (8005e6c <USBD_CDC_Init+0x1e8>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	f003 020f 	and.w	r2, r3, #15
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005dac:	2201      	movs	r2, #1
 8005dae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005db0:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <USBD_CDC_Init+0x1ec>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f003 020f 	and.w	r2, r3, #15
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	3326      	adds	r3, #38	; 0x26
 8005dc6:	2210      	movs	r2, #16
 8005dc8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dca:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <USBD_CDC_Init+0x1ec>)
 8005dcc:	7819      	ldrb	r1, [r3, #0]
 8005dce:	2308      	movs	r3, #8
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f002 fb2f 	bl	8008436 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005dd8:	4b25      	ldr	r3, [pc, #148]	; (8005e70 <USBD_CDC_Init+0x1ec>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f003 020f 	and.w	r2, r3, #15
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	3324      	adds	r3, #36	; 0x24
 8005dee:	2201      	movs	r2, #1
 8005df0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	33b0      	adds	r3, #176	; 0xb0
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e018      	b.n	8005e5e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	7c1b      	ldrb	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e34:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <USBD_CDC_Init+0x1e8>)
 8005e36:	7819      	ldrb	r1, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f002 fbe6 	bl	8008614 <USBD_LL_PrepareReceive>
 8005e48:	e008      	b.n	8005e5c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e4a:	4b08      	ldr	r3, [pc, #32]	; (8005e6c <USBD_CDC_Init+0x1e8>)
 8005e4c:	7819      	ldrb	r1, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e54:	2340      	movs	r3, #64	; 0x40
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f002 fbdc 	bl	8008614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000093 	.word	0x20000093
 8005e6c:	20000094 	.word	0x20000094
 8005e70:	20000095 	.word	0x20000095

08005e74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005e80:	4b3a      	ldr	r3, [pc, #232]	; (8005f6c <USBD_CDC_DeInit+0xf8>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f002 fafb 	bl	8008482 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005e8c:	4b37      	ldr	r3, [pc, #220]	; (8005f6c <USBD_CDC_DeInit+0xf8>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f003 020f 	and.w	r2, r3, #15
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3324      	adds	r3, #36	; 0x24
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005ea6:	4b32      	ldr	r3, [pc, #200]	; (8005f70 <USBD_CDC_DeInit+0xfc>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f002 fae8 	bl	8008482 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005eb2:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <USBD_CDC_DeInit+0xfc>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	f003 020f 	and.w	r2, r3, #15
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005eca:	2200      	movs	r2, #0
 8005ecc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ece:	4b29      	ldr	r3, [pc, #164]	; (8005f74 <USBD_CDC_DeInit+0x100>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f002 fad4 	bl	8008482 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005eda:	4b26      	ldr	r3, [pc, #152]	; (8005f74 <USBD_CDC_DeInit+0x100>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	f003 020f 	and.w	r2, r3, #15
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	3324      	adds	r3, #36	; 0x24
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005ef4:	4b1f      	ldr	r3, [pc, #124]	; (8005f74 <USBD_CDC_DeInit+0x100>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	f003 020f 	and.w	r2, r3, #15
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	440b      	add	r3, r1
 8005f08:	3326      	adds	r3, #38	; 0x26
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	32b0      	adds	r2, #176	; 0xb0
 8005f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01f      	beq.n	8005f60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	33b0      	adds	r3, #176	; 0xb0
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	32b0      	adds	r2, #176	; 0xb0
 8005f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f002 fbf6 	bl	8008734 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	32b0      	adds	r2, #176	; 0xb0
 8005f52:	2100      	movs	r1, #0
 8005f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000093 	.word	0x20000093
 8005f70:	20000094 	.word	0x20000094
 8005f74:	20000095 	.word	0x20000095

08005f78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	32b0      	adds	r2, #176	; 0xb0
 8005f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e0bf      	b.n	8006128 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d050      	beq.n	8006056 <USBD_CDC_Setup+0xde>
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	f040 80af 	bne.w	8006118 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	88db      	ldrh	r3, [r3, #6]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d03a      	beq.n	8006038 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b25b      	sxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da1b      	bge.n	8006004 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	33b0      	adds	r3, #176	; 0xb0
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005fe2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	88d2      	ldrh	r2, [r2, #6]
 8005fe8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	88db      	ldrh	r3, [r3, #6]
 8005fee:	2b07      	cmp	r3, #7
 8005ff0:	bf28      	it	cs
 8005ff2:	2307      	movcs	r3, #7
 8005ff4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	89fa      	ldrh	r2, [r7, #14]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f001 fdb3 	bl	8007b68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006002:	e090      	b.n	8006126 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	785a      	ldrb	r2, [r3, #1]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	88db      	ldrh	r3, [r3, #6]
 8006012:	2b3f      	cmp	r3, #63	; 0x3f
 8006014:	d803      	bhi.n	800601e <USBD_CDC_Setup+0xa6>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	88db      	ldrh	r3, [r3, #6]
 800601a:	b2da      	uxtb	r2, r3
 800601c:	e000      	b.n	8006020 <USBD_CDC_Setup+0xa8>
 800601e:	2240      	movs	r2, #64	; 0x40
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006026:	6939      	ldr	r1, [r7, #16]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800602e:	461a      	mov	r2, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 fdc5 	bl	8007bc0 <USBD_CtlPrepareRx>
      break;
 8006036:	e076      	b.n	8006126 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	33b0      	adds	r3, #176	; 0xb0
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	7850      	ldrb	r0, [r2, #1]
 800604e:	2200      	movs	r2, #0
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	4798      	blx	r3
      break;
 8006054:	e067      	b.n	8006126 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	785b      	ldrb	r3, [r3, #1]
 800605a:	2b0b      	cmp	r3, #11
 800605c:	d851      	bhi.n	8006102 <USBD_CDC_Setup+0x18a>
 800605e:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <USBD_CDC_Setup+0xec>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006095 	.word	0x08006095
 8006068:	08006111 	.word	0x08006111
 800606c:	08006103 	.word	0x08006103
 8006070:	08006103 	.word	0x08006103
 8006074:	08006103 	.word	0x08006103
 8006078:	08006103 	.word	0x08006103
 800607c:	08006103 	.word	0x08006103
 8006080:	08006103 	.word	0x08006103
 8006084:	08006103 	.word	0x08006103
 8006088:	08006103 	.word	0x08006103
 800608c:	080060bf 	.word	0x080060bf
 8006090:	080060e9 	.word	0x080060e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b03      	cmp	r3, #3
 800609e:	d107      	bne.n	80060b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060a0:	f107 030a 	add.w	r3, r7, #10
 80060a4:	2202      	movs	r2, #2
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 fd5d 	bl	8007b68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060ae:	e032      	b.n	8006116 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fce7 	bl	8007a86 <USBD_CtlError>
            ret = USBD_FAIL;
 80060b8:	2303      	movs	r3, #3
 80060ba:	75fb      	strb	r3, [r7, #23]
          break;
 80060bc:	e02b      	b.n	8006116 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d107      	bne.n	80060da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060ca:	f107 030d 	add.w	r3, r7, #13
 80060ce:	2201      	movs	r2, #1
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 fd48 	bl	8007b68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060d8:	e01d      	b.n	8006116 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 fcd2 	bl	8007a86 <USBD_CtlError>
            ret = USBD_FAIL;
 80060e2:	2303      	movs	r3, #3
 80060e4:	75fb      	strb	r3, [r7, #23]
          break;
 80060e6:	e016      	b.n	8006116 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d00f      	beq.n	8006114 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 fcc5 	bl	8007a86 <USBD_CtlError>
            ret = USBD_FAIL;
 80060fc:	2303      	movs	r3, #3
 80060fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006100:	e008      	b.n	8006114 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 fcbe 	bl	8007a86 <USBD_CtlError>
          ret = USBD_FAIL;
 800610a:	2303      	movs	r3, #3
 800610c:	75fb      	strb	r3, [r7, #23]
          break;
 800610e:	e002      	b.n	8006116 <USBD_CDC_Setup+0x19e>
          break;
 8006110:	bf00      	nop
 8006112:	e008      	b.n	8006126 <USBD_CDC_Setup+0x1ae>
          break;
 8006114:	bf00      	nop
      }
      break;
 8006116:	e006      	b.n	8006126 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fcb3 	bl	8007a86 <USBD_CtlError>
      ret = USBD_FAIL;
 8006120:	2303      	movs	r3, #3
 8006122:	75fb      	strb	r3, [r7, #23]
      break;
 8006124:	bf00      	nop
  }

  return (uint8_t)ret;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006142:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	32b0      	adds	r2, #176	; 0xb0
 800614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006156:	2303      	movs	r3, #3
 8006158:	e065      	b.n	8006226 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	32b0      	adds	r2, #176	; 0xb0
 8006164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006168:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	f003 020f 	and.w	r2, r3, #15
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	3318      	adds	r3, #24
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d02f      	beq.n	80061e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	f003 020f 	and.w	r2, r3, #15
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	3318      	adds	r3, #24
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	f003 010f 	and.w	r1, r3, #15
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	460b      	mov	r3, r1
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	440b      	add	r3, r1
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4403      	add	r3, r0
 80061ac:	3348      	adds	r3, #72	; 0x48
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d112      	bne.n	80061e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	f003 020f 	and.w	r2, r3, #15
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	3318      	adds	r3, #24
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061d6:	78f9      	ldrb	r1, [r7, #3]
 80061d8:	2300      	movs	r3, #0
 80061da:	2200      	movs	r2, #0
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f002 f9f8 	bl	80085d2 <USBD_LL_Transmit>
 80061e2:	e01f      	b.n	8006224 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	33b0      	adds	r3, #176	; 0xb0
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d010      	beq.n	8006224 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	33b0      	adds	r3, #176	; 0xb0
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006220:	78fa      	ldrb	r2, [r7, #3]
 8006222:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	32b0      	adds	r2, #176	; 0xb0
 8006244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006248:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	32b0      	adds	r2, #176	; 0xb0
 8006254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800625c:	2303      	movs	r3, #3
 800625e:	e01a      	b.n	8006296 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f002 f9f6 	bl	8008656 <USBD_LL_GetRxDataSize>
 800626a:	4602      	mov	r2, r0
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	33b0      	adds	r3, #176	; 0xb0
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006290:	4611      	mov	r1, r2
 8006292:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	32b0      	adds	r2, #176	; 0xb0
 80062b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062bc:	2303      	movs	r3, #3
 80062be:	e025      	b.n	800630c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	33b0      	adds	r3, #176	; 0xb0
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01a      	beq.n	800630a <USBD_CDC_EP0_RxReady+0x6c>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062da:	2bff      	cmp	r3, #255	; 0xff
 80062dc:	d015      	beq.n	800630a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	33b0      	adds	r3, #176	; 0xb0
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80062f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062fe:	b292      	uxth	r2, r2
 8006300:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	22ff      	movs	r2, #255	; 0xff
 8006306:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800631c:	2182      	movs	r1, #130	; 0x82
 800631e:	4818      	ldr	r0, [pc, #96]	; (8006380 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006320:	f000 fd4f 	bl	8006dc2 <USBD_GetEpDesc>
 8006324:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006326:	2101      	movs	r1, #1
 8006328:	4815      	ldr	r0, [pc, #84]	; (8006380 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800632a:	f000 fd4a 	bl	8006dc2 <USBD_GetEpDesc>
 800632e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006330:	2181      	movs	r1, #129	; 0x81
 8006332:	4813      	ldr	r0, [pc, #76]	; (8006380 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006334:	f000 fd45 	bl	8006dc2 <USBD_GetEpDesc>
 8006338:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2210      	movs	r2, #16
 8006344:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d006      	beq.n	800635a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2200      	movs	r2, #0
 8006350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006354:	711a      	strb	r2, [r3, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d006      	beq.n	800636e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006368:	711a      	strb	r2, [r3, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2243      	movs	r2, #67	; 0x43
 8006372:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006374:	4b02      	ldr	r3, [pc, #8]	; (8006380 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000050 	.word	0x20000050

08006384 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800638c:	2182      	movs	r1, #130	; 0x82
 800638e:	4818      	ldr	r0, [pc, #96]	; (80063f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006390:	f000 fd17 	bl	8006dc2 <USBD_GetEpDesc>
 8006394:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006396:	2101      	movs	r1, #1
 8006398:	4815      	ldr	r0, [pc, #84]	; (80063f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800639a:	f000 fd12 	bl	8006dc2 <USBD_GetEpDesc>
 800639e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063a0:	2181      	movs	r1, #129	; 0x81
 80063a2:	4813      	ldr	r0, [pc, #76]	; (80063f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063a4:	f000 fd0d 	bl	8006dc2 <USBD_GetEpDesc>
 80063a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2210      	movs	r2, #16
 80063b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d006      	beq.n	80063ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2200      	movs	r2, #0
 80063c0:	711a      	strb	r2, [r3, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f042 0202 	orr.w	r2, r2, #2
 80063c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d006      	beq.n	80063de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	711a      	strb	r2, [r3, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f042 0202 	orr.w	r2, r2, #2
 80063dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2243      	movs	r2, #67	; 0x43
 80063e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063e4:	4b02      	ldr	r3, [pc, #8]	; (80063f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000050 	.word	0x20000050

080063f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063fc:	2182      	movs	r1, #130	; 0x82
 80063fe:	4818      	ldr	r0, [pc, #96]	; (8006460 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006400:	f000 fcdf 	bl	8006dc2 <USBD_GetEpDesc>
 8006404:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006406:	2101      	movs	r1, #1
 8006408:	4815      	ldr	r0, [pc, #84]	; (8006460 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800640a:	f000 fcda 	bl	8006dc2 <USBD_GetEpDesc>
 800640e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006410:	2181      	movs	r1, #129	; 0x81
 8006412:	4813      	ldr	r0, [pc, #76]	; (8006460 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006414:	f000 fcd5 	bl	8006dc2 <USBD_GetEpDesc>
 8006418:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2210      	movs	r2, #16
 8006424:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d006      	beq.n	800643a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	2200      	movs	r2, #0
 8006430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006434:	711a      	strb	r2, [r3, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d006      	beq.n	800644e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006448:	711a      	strb	r2, [r3, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2243      	movs	r2, #67	; 0x43
 8006452:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006454:	4b02      	ldr	r3, [pc, #8]	; (8006460 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000050 	.word	0x20000050

08006464 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	220a      	movs	r2, #10
 8006470:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006472:	4b03      	ldr	r3, [pc, #12]	; (8006480 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	2000000c 	.word	0x2000000c

08006484 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006494:	2303      	movs	r3, #3
 8006496:	e009      	b.n	80064ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	33b0      	adds	r3, #176	; 0xb0
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	32b0      	adds	r2, #176	; 0xb0
 80064ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80064da:	2303      	movs	r3, #3
 80064dc:	e008      	b.n	80064f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	32b0      	adds	r2, #176	; 0xb0
 8006510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006514:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800651c:	2303      	movs	r3, #3
 800651e:	e004      	b.n	800652a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
	...

08006538 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	32b0      	adds	r2, #176	; 0xb0
 800654a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	32b0      	adds	r2, #176	; 0xb0
 800655e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006566:	2303      	movs	r3, #3
 8006568:	e025      	b.n	80065b6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006570:	2b00      	cmp	r3, #0
 8006572:	d11f      	bne.n	80065b4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2201      	movs	r2, #1
 8006578:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800657c:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <USBD_CDC_TransmitPacket+0x88>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f003 020f 	and.w	r2, r3, #15
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4403      	add	r3, r0
 8006596:	3318      	adds	r3, #24
 8006598:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800659a:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <USBD_CDC_TransmitPacket+0x88>)
 800659c:	7819      	ldrb	r1, [r3, #0]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f002 f811 	bl	80085d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000093 	.word	0x20000093

080065c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	32b0      	adds	r2, #176	; 0xb0
 80065d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	32b0      	adds	r2, #176	; 0xb0
 80065e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e018      	b.n	8006624 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	7c1b      	ldrb	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <USBD_CDC_ReceivePacket+0x68>)
 80065fc:	7819      	ldrb	r1, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f002 f803 	bl	8008614 <USBD_LL_PrepareReceive>
 800660e:	e008      	b.n	8006622 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <USBD_CDC_ReceivePacket+0x68>)
 8006612:	7819      	ldrb	r1, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800661a:	2340      	movs	r3, #64	; 0x40
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 fff9 	bl	8008614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20000094 	.word	0x20000094

08006630 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006644:	2303      	movs	r3, #3
 8006646:	e01f      	b.n	8006688 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	79fa      	ldrb	r2, [r7, #7]
 800667a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f001 fe73 	bl	8008368 <USBD_LL_Init>
 8006682:	4603      	mov	r3, r0
 8006684:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006686:	7dfb      	ldrb	r3, [r7, #23]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e025      	b.n	80066f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	32ae      	adds	r2, #174	; 0xae
 80066ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00f      	beq.n	80066e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	32ae      	adds	r2, #174	; 0xae
 80066ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	f107 020e 	add.w	r2, r7, #14
 80066d8:	4610      	mov	r0, r2
 80066da:	4798      	blx	r3
 80066dc:	4602      	mov	r2, r0
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 fe7b 	bl	8008400 <USBD_LL_Start>
 800670a:	4603      	mov	r3, r0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800671c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	460b      	mov	r3, r1
 8006734:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006740:	2b00      	cmp	r3, #0
 8006742:	d009      	beq.n	8006758 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	78fa      	ldrb	r2, [r7, #3]
 800674e:	4611      	mov	r1, r2
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	4611      	mov	r1, r2
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006788:	2303      	movs	r3, #3
 800678a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 f932 	bl	8007a12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80067bc:	461a      	mov	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d01a      	beq.n	8006808 <USBD_LL_SetupStage+0x72>
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d822      	bhi.n	800681c <USBD_LL_SetupStage+0x86>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <USBD_LL_SetupStage+0x4a>
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d00a      	beq.n	80067f4 <USBD_LL_SetupStage+0x5e>
 80067de:	e01d      	b.n	800681c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fb5f 	bl	8006eac <USBD_StdDevReq>
 80067ee:	4603      	mov	r3, r0
 80067f0:	73fb      	strb	r3, [r7, #15]
      break;
 80067f2:	e020      	b.n	8006836 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fbc7 	bl	8006f90 <USBD_StdItfReq>
 8006802:	4603      	mov	r3, r0
 8006804:	73fb      	strb	r3, [r7, #15]
      break;
 8006806:	e016      	b.n	8006836 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fc29 	bl	8007068 <USBD_StdEPReq>
 8006816:	4603      	mov	r3, r0
 8006818:	73fb      	strb	r3, [r7, #15]
      break;
 800681a:	e00c      	b.n	8006836 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006822:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006826:	b2db      	uxtb	r3, r3
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 fe48 	bl	80084c0 <USBD_LL_StallEP>
 8006830:	4603      	mov	r3, r0
 8006832:	73fb      	strb	r3, [r7, #15]
      break;
 8006834:	bf00      	nop
  }

  return ret;
 8006836:	7bfb      	ldrb	r3, [r7, #15]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	460b      	mov	r3, r1
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d16e      	bne.n	8006936 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800685e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006866:	2b03      	cmp	r3, #3
 8006868:	f040 8098 	bne.w	800699c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	429a      	cmp	r2, r3
 8006876:	d913      	bls.n	80068a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	1ad2      	subs	r2, r2, r3
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	4293      	cmp	r3, r2
 8006890:	bf28      	it	cs
 8006892:	4613      	movcs	r3, r2
 8006894:	461a      	mov	r2, r3
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f001 f9ae 	bl	8007bfa <USBD_CtlContinueRx>
 800689e:	e07d      	b.n	800699c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068a6:	f003 031f 	and.w	r3, r3, #31
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d014      	beq.n	80068d8 <USBD_LL_DataOutStage+0x98>
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d81d      	bhi.n	80068ee <USBD_LL_DataOutStage+0xae>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <USBD_LL_DataOutStage+0x7c>
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d003      	beq.n	80068c2 <USBD_LL_DataOutStage+0x82>
 80068ba:	e018      	b.n	80068ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	75bb      	strb	r3, [r7, #22]
            break;
 80068c0:	e018      	b.n	80068f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	4619      	mov	r1, r3
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 fa5e 	bl	8006d8e <USBD_CoreFindIF>
 80068d2:	4603      	mov	r3, r0
 80068d4:	75bb      	strb	r3, [r7, #22]
            break;
 80068d6:	e00d      	b.n	80068f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	4619      	mov	r1, r3
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 fa60 	bl	8006da8 <USBD_CoreFindEP>
 80068e8:	4603      	mov	r3, r0
 80068ea:	75bb      	strb	r3, [r7, #22]
            break;
 80068ec:	e002      	b.n	80068f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	75bb      	strb	r3, [r7, #22]
            break;
 80068f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80068f4:	7dbb      	ldrb	r3, [r7, #22]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d119      	bne.n	800692e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b03      	cmp	r3, #3
 8006904:	d113      	bne.n	800692e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006906:	7dba      	ldrb	r2, [r7, #22]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	32ae      	adds	r2, #174	; 0xae
 800690c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006916:	7dba      	ldrb	r2, [r7, #22]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800691e:	7dba      	ldrb	r2, [r7, #22]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	32ae      	adds	r2, #174	; 0xae
 8006924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f001 f974 	bl	8007c1c <USBD_CtlSendStatus>
 8006934:	e032      	b.n	800699c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006936:	7afb      	ldrb	r3, [r7, #11]
 8006938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800693c:	b2db      	uxtb	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 fa31 	bl	8006da8 <USBD_CoreFindEP>
 8006946:	4603      	mov	r3, r0
 8006948:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800694a:	7dbb      	ldrb	r3, [r7, #22]
 800694c:	2bff      	cmp	r3, #255	; 0xff
 800694e:	d025      	beq.n	800699c <USBD_LL_DataOutStage+0x15c>
 8006950:	7dbb      	ldrb	r3, [r7, #22]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d122      	bne.n	800699c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b03      	cmp	r3, #3
 8006960:	d117      	bne.n	8006992 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006962:	7dba      	ldrb	r2, [r7, #22]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	32ae      	adds	r2, #174	; 0xae
 8006968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00f      	beq.n	8006992 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006972:	7dba      	ldrb	r2, [r7, #22]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800697a:	7dba      	ldrb	r2, [r7, #22]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	32ae      	adds	r2, #174	; 0xae
 8006980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	7afa      	ldrb	r2, [r7, #11]
 8006988:	4611      	mov	r1, r2
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	4798      	blx	r3
 800698e:	4603      	mov	r3, r0
 8006990:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006998:	7dfb      	ldrb	r3, [r7, #23]
 800699a:	e000      	b.n	800699e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b086      	sub	sp, #24
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	460b      	mov	r3, r1
 80069b0:	607a      	str	r2, [r7, #4]
 80069b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80069b4:	7afb      	ldrb	r3, [r7, #11]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d16f      	bne.n	8006a9a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3314      	adds	r3, #20
 80069be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d15a      	bne.n	8006a80 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d914      	bls.n	8006a00 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	1ad2      	subs	r2, r2, r3
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	461a      	mov	r2, r3
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f001 f8d6 	bl	8007b9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069f2:	2300      	movs	r3, #0
 80069f4:	2200      	movs	r2, #0
 80069f6:	2100      	movs	r1, #0
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f001 fe0b 	bl	8008614 <USBD_LL_PrepareReceive>
 80069fe:	e03f      	b.n	8006a80 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d11c      	bne.n	8006a46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d316      	bcc.n	8006a46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d20f      	bcs.n	8006a46 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a26:	2200      	movs	r2, #0
 8006a28:	2100      	movs	r1, #0
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f001 f8b7 	bl	8007b9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f001 fde8 	bl	8008614 <USBD_LL_PrepareReceive>
 8006a44:	e01c      	b.n	8006a80 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d10f      	bne.n	8006a72 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d009      	beq.n	8006a72 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a72:	2180      	movs	r1, #128	; 0x80
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f001 fd23 	bl	80084c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f001 f8e1 	bl	8007c42 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d03a      	beq.n	8006b00 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff fe42 	bl	8006714 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a98:	e032      	b.n	8006b00 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006a9a:	7afb      	ldrb	r3, [r7, #11]
 8006a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f97f 	bl	8006da8 <USBD_CoreFindEP>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	2bff      	cmp	r3, #255	; 0xff
 8006ab2:	d025      	beq.n	8006b00 <USBD_LL_DataInStage+0x15a>
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d122      	bne.n	8006b00 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d11c      	bne.n	8006b00 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ac6:	7dfa      	ldrb	r2, [r7, #23]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	32ae      	adds	r2, #174	; 0xae
 8006acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d014      	beq.n	8006b00 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006ad6:	7dfa      	ldrb	r2, [r7, #23]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006ade:	7dfa      	ldrb	r2, [r7, #23]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	32ae      	adds	r2, #174	; 0xae
 8006ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	7afa      	ldrb	r2, [r7, #11]
 8006aec:	4611      	mov	r1, r2
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	4798      	blx	r3
 8006af2:	4603      	mov	r3, r0
 8006af4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006af6:	7dbb      	ldrb	r3, [r7, #22]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006afc:	7dbb      	ldrb	r3, [r7, #22]
 8006afe:	e000      	b.n	8006b02 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d014      	beq.n	8006b70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00e      	beq.n	8006b70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6852      	ldr	r2, [r2, #4]
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	4611      	mov	r1, r2
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b70:	2340      	movs	r3, #64	; 0x40
 8006b72:	2200      	movs	r2, #0
 8006b74:	2100      	movs	r1, #0
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 fc5d 	bl	8008436 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2240      	movs	r2, #64	; 0x40
 8006b88:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b8c:	2340      	movs	r3, #64	; 0x40
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2180      	movs	r1, #128	; 0x80
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f001 fc4f 	bl	8008436 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2240      	movs	r2, #64	; 0x40
 8006ba2:	621a      	str	r2, [r3, #32]

  return ret;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	78fa      	ldrb	r2, [r7, #3]
 8006bbe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2204      	movs	r2, #4
 8006be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d106      	bne.n	8006c1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d110      	bne.n	8006c60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	460b      	mov	r3, r1
 8006c74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	32ae      	adds	r2, #174	; 0xae
 8006c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e01c      	b.n	8006cc6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d115      	bne.n	8006cc4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	32ae      	adds	r2, #174	; 0xae
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	32ae      	adds	r2, #174	; 0xae
 8006cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	78fa      	ldrb	r2, [r7, #3]
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	32ae      	adds	r2, #174	; 0xae
 8006ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e01c      	b.n	8006d2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d115      	bne.n	8006d28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	32ae      	adds	r2, #174	; 0xae
 8006d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00b      	beq.n	8006d28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	32ae      	adds	r2, #174	; 0xae
 8006d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	78fa      	ldrb	r2, [r7, #3]
 8006d22:	4611      	mov	r1, r2
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00e      	beq.n	8006d84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6852      	ldr	r2, [r2, #4]
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	4611      	mov	r1, r2
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006d80:	2303      	movs	r3, #3
 8006d82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006db4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b086      	sub	sp, #24
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	885b      	ldrh	r3, [r3, #2]
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d920      	bls.n	8006e2c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006df2:	e013      	b.n	8006e1c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006df4:	f107 030a 	add.w	r3, r7, #10
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6978      	ldr	r0, [r7, #20]
 8006dfc:	f000 f81b 	bl	8006e36 <USBD_GetNextDesc>
 8006e00:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	2b05      	cmp	r3, #5
 8006e08:	d108      	bne.n	8006e1c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	789b      	ldrb	r3, [r3, #2]
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d008      	beq.n	8006e2a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	885b      	ldrh	r3, [r3, #2]
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	897b      	ldrh	r3, [r7, #10]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d8e5      	bhi.n	8006df4 <USBD_GetEpDesc+0x32>
 8006e28:	e000      	b.n	8006e2c <USBD_GetEpDesc+0x6a>
          break;
 8006e2a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e2c:	693b      	ldr	r3, [r7, #16]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b085      	sub	sp, #20
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	881a      	ldrh	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4413      	add	r3, r2
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4413      	add	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e62:	68fb      	ldr	r3, [r7, #12]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	3301      	adds	r3, #1
 8006e86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e8e:	8a3b      	ldrh	r3, [r7, #16]
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	b21a      	sxth	r2, r3
 8006e94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	b21b      	sxth	r3, r3
 8006e9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	d005      	beq.n	8006ed2 <USBD_StdDevReq+0x26>
 8006ec6:	2b40      	cmp	r3, #64	; 0x40
 8006ec8:	d857      	bhi.n	8006f7a <USBD_StdDevReq+0xce>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00f      	beq.n	8006eee <USBD_StdDevReq+0x42>
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	d153      	bne.n	8006f7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	32ae      	adds	r2, #174	; 0xae
 8006edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73fb      	strb	r3, [r7, #15]
      break;
 8006eec:	e04a      	b.n	8006f84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b09      	cmp	r3, #9
 8006ef4:	d83b      	bhi.n	8006f6e <USBD_StdDevReq+0xc2>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <USBD_StdDevReq+0x50>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f51 	.word	0x08006f51
 8006f00:	08006f65 	.word	0x08006f65
 8006f04:	08006f6f 	.word	0x08006f6f
 8006f08:	08006f5b 	.word	0x08006f5b
 8006f0c:	08006f6f 	.word	0x08006f6f
 8006f10:	08006f2f 	.word	0x08006f2f
 8006f14:	08006f25 	.word	0x08006f25
 8006f18:	08006f6f 	.word	0x08006f6f
 8006f1c:	08006f47 	.word	0x08006f47
 8006f20:	08006f39 	.word	0x08006f39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa3c 	bl	80073a4 <USBD_GetDescriptor>
          break;
 8006f2c:	e024      	b.n	8006f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fbcb 	bl	80076cc <USBD_SetAddress>
          break;
 8006f36:	e01f      	b.n	8006f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fc0a 	bl	8007754 <USBD_SetConfig>
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]
          break;
 8006f44:	e018      	b.n	8006f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fcad 	bl	80078a8 <USBD_GetConfig>
          break;
 8006f4e:	e013      	b.n	8006f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fcde 	bl	8007914 <USBD_GetStatus>
          break;
 8006f58:	e00e      	b.n	8006f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fd0d 	bl	800797c <USBD_SetFeature>
          break;
 8006f62:	e009      	b.n	8006f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fd31 	bl	80079ce <USBD_ClrFeature>
          break;
 8006f6c:	e004      	b.n	8006f78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fd88 	bl	8007a86 <USBD_CtlError>
          break;
 8006f76:	bf00      	nop
      }
      break;
 8006f78:	e004      	b.n	8006f84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fd82 	bl	8007a86 <USBD_CtlError>
      break;
 8006f82:	bf00      	nop
  }

  return ret;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop

08006f90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fa6:	2b40      	cmp	r3, #64	; 0x40
 8006fa8:	d005      	beq.n	8006fb6 <USBD_StdItfReq+0x26>
 8006faa:	2b40      	cmp	r3, #64	; 0x40
 8006fac:	d852      	bhi.n	8007054 <USBD_StdItfReq+0xc4>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <USBD_StdItfReq+0x26>
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d14e      	bne.n	8007054 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d840      	bhi.n	8007046 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	889b      	ldrh	r3, [r3, #4]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d836      	bhi.n	800703c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	889b      	ldrh	r3, [r3, #4]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff fed9 	bl	8006d8e <USBD_CoreFindIF>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	2bff      	cmp	r3, #255	; 0xff
 8006fe4:	d01d      	beq.n	8007022 <USBD_StdItfReq+0x92>
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d11a      	bne.n	8007022 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006fec:	7bba      	ldrb	r2, [r7, #14]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	32ae      	adds	r2, #174	; 0xae
 8006ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00f      	beq.n	800701c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006ffc:	7bba      	ldrb	r2, [r7, #14]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007004:	7bba      	ldrb	r2, [r7, #14]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	32ae      	adds	r2, #174	; 0xae
 800700a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	4798      	blx	r3
 8007016:	4603      	mov	r3, r0
 8007018:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800701a:	e004      	b.n	8007026 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800701c:	2303      	movs	r3, #3
 800701e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007020:	e001      	b.n	8007026 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007022:	2303      	movs	r3, #3
 8007024:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	88db      	ldrh	r3, [r3, #6]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d110      	bne.n	8007050 <USBD_StdItfReq+0xc0>
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10d      	bne.n	8007050 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fdf1 	bl	8007c1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800703a:	e009      	b.n	8007050 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fd21 	bl	8007a86 <USBD_CtlError>
          break;
 8007044:	e004      	b.n	8007050 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fd1c 	bl	8007a86 <USBD_CtlError>
          break;
 800704e:	e000      	b.n	8007052 <USBD_StdItfReq+0xc2>
          break;
 8007050:	bf00      	nop
      }
      break;
 8007052:	e004      	b.n	800705e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fd15 	bl	8007a86 <USBD_CtlError>
      break;
 800705c:	bf00      	nop
  }

  return ret;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	889b      	ldrh	r3, [r3, #4]
 800707a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007084:	2b40      	cmp	r3, #64	; 0x40
 8007086:	d007      	beq.n	8007098 <USBD_StdEPReq+0x30>
 8007088:	2b40      	cmp	r3, #64	; 0x40
 800708a:	f200 817f 	bhi.w	800738c <USBD_StdEPReq+0x324>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d02a      	beq.n	80070e8 <USBD_StdEPReq+0x80>
 8007092:	2b20      	cmp	r3, #32
 8007094:	f040 817a 	bne.w	800738c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff fe83 	bl	8006da8 <USBD_CoreFindEP>
 80070a2:	4603      	mov	r3, r0
 80070a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070a6:	7b7b      	ldrb	r3, [r7, #13]
 80070a8:	2bff      	cmp	r3, #255	; 0xff
 80070aa:	f000 8174 	beq.w	8007396 <USBD_StdEPReq+0x32e>
 80070ae:	7b7b      	ldrb	r3, [r7, #13]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f040 8170 	bne.w	8007396 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80070b6:	7b7a      	ldrb	r2, [r7, #13]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80070be:	7b7a      	ldrb	r2, [r7, #13]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	32ae      	adds	r2, #174	; 0xae
 80070c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 8163 	beq.w	8007396 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80070d0:	7b7a      	ldrb	r2, [r7, #13]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	32ae      	adds	r2, #174	; 0xae
 80070d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	4798      	blx	r3
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80070e6:	e156      	b.n	8007396 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	785b      	ldrb	r3, [r3, #1]
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d008      	beq.n	8007102 <USBD_StdEPReq+0x9a>
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	f300 8145 	bgt.w	8007380 <USBD_StdEPReq+0x318>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 809b 	beq.w	8007232 <USBD_StdEPReq+0x1ca>
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d03c      	beq.n	800717a <USBD_StdEPReq+0x112>
 8007100:	e13e      	b.n	8007380 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d002      	beq.n	8007114 <USBD_StdEPReq+0xac>
 800710e:	2b03      	cmp	r3, #3
 8007110:	d016      	beq.n	8007140 <USBD_StdEPReq+0xd8>
 8007112:	e02c      	b.n	800716e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00d      	beq.n	8007136 <USBD_StdEPReq+0xce>
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	2b80      	cmp	r3, #128	; 0x80
 800711e:	d00a      	beq.n	8007136 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 f9cb 	bl	80084c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800712a:	2180      	movs	r1, #128	; 0x80
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 f9c7 	bl	80084c0 <USBD_LL_StallEP>
 8007132:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007134:	e020      	b.n	8007178 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fca4 	bl	8007a86 <USBD_CtlError>
              break;
 800713e:	e01b      	b.n	8007178 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	885b      	ldrh	r3, [r3, #2]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10e      	bne.n	8007166 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <USBD_StdEPReq+0xfe>
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	2b80      	cmp	r3, #128	; 0x80
 8007152:	d008      	beq.n	8007166 <USBD_StdEPReq+0xfe>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	88db      	ldrh	r3, [r3, #6]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d104      	bne.n	8007166 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 f9ad 	bl	80084c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fd58 	bl	8007c1c <USBD_CtlSendStatus>

              break;
 800716c:	e004      	b.n	8007178 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fc88 	bl	8007a86 <USBD_CtlError>
              break;
 8007176:	bf00      	nop
          }
          break;
 8007178:	e107      	b.n	800738a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d002      	beq.n	800718c <USBD_StdEPReq+0x124>
 8007186:	2b03      	cmp	r3, #3
 8007188:	d016      	beq.n	80071b8 <USBD_StdEPReq+0x150>
 800718a:	e04b      	b.n	8007224 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00d      	beq.n	80071ae <USBD_StdEPReq+0x146>
 8007192:	7bbb      	ldrb	r3, [r7, #14]
 8007194:	2b80      	cmp	r3, #128	; 0x80
 8007196:	d00a      	beq.n	80071ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 f98f 	bl	80084c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071a2:	2180      	movs	r1, #128	; 0x80
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f98b 	bl	80084c0 <USBD_LL_StallEP>
 80071aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071ac:	e040      	b.n	8007230 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fc68 	bl	8007a86 <USBD_CtlError>
              break;
 80071b6:	e03b      	b.n	8007230 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	885b      	ldrh	r3, [r3, #2]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d136      	bne.n	800722e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d004      	beq.n	80071d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 f995 	bl	80084fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fd21 	bl	8007c1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff fde2 	bl	8006da8 <USBD_CoreFindEP>
 80071e4:	4603      	mov	r3, r0
 80071e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071e8:	7b7b      	ldrb	r3, [r7, #13]
 80071ea:	2bff      	cmp	r3, #255	; 0xff
 80071ec:	d01f      	beq.n	800722e <USBD_StdEPReq+0x1c6>
 80071ee:	7b7b      	ldrb	r3, [r7, #13]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d11c      	bne.n	800722e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80071f4:	7b7a      	ldrb	r2, [r7, #13]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80071fc:	7b7a      	ldrb	r2, [r7, #13]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	32ae      	adds	r2, #174	; 0xae
 8007202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d010      	beq.n	800722e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800720c:	7b7a      	ldrb	r2, [r7, #13]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	32ae      	adds	r2, #174	; 0xae
 8007212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	4798      	blx	r3
 800721e:	4603      	mov	r3, r0
 8007220:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007222:	e004      	b.n	800722e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fc2d 	bl	8007a86 <USBD_CtlError>
              break;
 800722c:	e000      	b.n	8007230 <USBD_StdEPReq+0x1c8>
              break;
 800722e:	bf00      	nop
          }
          break;
 8007230:	e0ab      	b.n	800738a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d002      	beq.n	8007244 <USBD_StdEPReq+0x1dc>
 800723e:	2b03      	cmp	r3, #3
 8007240:	d032      	beq.n	80072a8 <USBD_StdEPReq+0x240>
 8007242:	e097      	b.n	8007374 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <USBD_StdEPReq+0x1f2>
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b80      	cmp	r3, #128	; 0x80
 800724e:	d004      	beq.n	800725a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fc17 	bl	8007a86 <USBD_CtlError>
                break;
 8007258:	e091      	b.n	800737e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800725a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800725e:	2b00      	cmp	r3, #0
 8007260:	da0b      	bge.n	800727a <USBD_StdEPReq+0x212>
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	3310      	adds	r3, #16
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4413      	add	r3, r2
 8007276:	3304      	adds	r3, #4
 8007278:	e00b      	b.n	8007292 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	4413      	add	r3, r2
 8007290:	3304      	adds	r3, #4
 8007292:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2202      	movs	r2, #2
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fc61 	bl	8007b68 <USBD_CtlSendData>
              break;
 80072a6:	e06a      	b.n	800737e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	da11      	bge.n	80072d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	f003 020f 	and.w	r2, r3, #15
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	3324      	adds	r3, #36	; 0x24
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d117      	bne.n	80072fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fbda 	bl	8007a86 <USBD_CtlError>
                  break;
 80072d2:	e054      	b.n	800737e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	f003 020f 	and.w	r2, r3, #15
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d104      	bne.n	80072fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fbc7 	bl	8007a86 <USBD_CtlError>
                  break;
 80072f8:	e041      	b.n	800737e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	da0b      	bge.n	800731a <USBD_StdEPReq+0x2b2>
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007308:	4613      	mov	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	3310      	adds	r3, #16
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	4413      	add	r3, r2
 8007316:	3304      	adds	r3, #4
 8007318:	e00b      	b.n	8007332 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	4413      	add	r3, r2
 8007330:	3304      	adds	r3, #4
 8007332:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <USBD_StdEPReq+0x2d8>
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b80      	cmp	r3, #128	; 0x80
 800733e:	d103      	bne.n	8007348 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	e00e      	b.n	8007366 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 f8f5 	bl	800853c <USBD_LL_IsStallEP>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2201      	movs	r2, #1
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	e002      	b.n	8007366 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2202      	movs	r2, #2
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fbfb 	bl	8007b68 <USBD_CtlSendData>
              break;
 8007372:	e004      	b.n	800737e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fb85 	bl	8007a86 <USBD_CtlError>
              break;
 800737c:	bf00      	nop
          }
          break;
 800737e:	e004      	b.n	800738a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fb7f 	bl	8007a86 <USBD_CtlError>
          break;
 8007388:	bf00      	nop
      }
      break;
 800738a:	e005      	b.n	8007398 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fb79 	bl	8007a86 <USBD_CtlError>
      break;
 8007394:	e000      	b.n	8007398 <USBD_StdEPReq+0x330>
      break;
 8007396:	bf00      	nop
  }

  return ret;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	885b      	ldrh	r3, [r3, #2]
 80073be:	0a1b      	lsrs	r3, r3, #8
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	2b0e      	cmp	r3, #14
 80073c6:	f200 8152 	bhi.w	800766e <USBD_GetDescriptor+0x2ca>
 80073ca:	a201      	add	r2, pc, #4	; (adr r2, 80073d0 <USBD_GetDescriptor+0x2c>)
 80073cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d0:	08007441 	.word	0x08007441
 80073d4:	08007459 	.word	0x08007459
 80073d8:	08007499 	.word	0x08007499
 80073dc:	0800766f 	.word	0x0800766f
 80073e0:	0800766f 	.word	0x0800766f
 80073e4:	0800760f 	.word	0x0800760f
 80073e8:	0800763b 	.word	0x0800763b
 80073ec:	0800766f 	.word	0x0800766f
 80073f0:	0800766f 	.word	0x0800766f
 80073f4:	0800766f 	.word	0x0800766f
 80073f8:	0800766f 	.word	0x0800766f
 80073fc:	0800766f 	.word	0x0800766f
 8007400:	0800766f 	.word	0x0800766f
 8007404:	0800766f 	.word	0x0800766f
 8007408:	0800740d 	.word	0x0800740d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00b      	beq.n	8007430 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	7c12      	ldrb	r2, [r2, #16]
 8007424:	f107 0108 	add.w	r1, r7, #8
 8007428:	4610      	mov	r0, r2
 800742a:	4798      	blx	r3
 800742c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800742e:	e126      	b.n	800767e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fb27 	bl	8007a86 <USBD_CtlError>
        err++;
 8007438:	7afb      	ldrb	r3, [r7, #11]
 800743a:	3301      	adds	r3, #1
 800743c:	72fb      	strb	r3, [r7, #11]
      break;
 800743e:	e11e      	b.n	800767e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	7c12      	ldrb	r2, [r2, #16]
 800744c:	f107 0108 	add.w	r1, r7, #8
 8007450:	4610      	mov	r0, r2
 8007452:	4798      	blx	r3
 8007454:	60f8      	str	r0, [r7, #12]
      break;
 8007456:	e112      	b.n	800767e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	7c1b      	ldrb	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10d      	bne.n	800747c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	f107 0208 	add.w	r2, r7, #8
 800746c:	4610      	mov	r0, r2
 800746e:	4798      	blx	r3
 8007470:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3301      	adds	r3, #1
 8007476:	2202      	movs	r2, #2
 8007478:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800747a:	e100      	b.n	800767e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	f107 0208 	add.w	r2, r7, #8
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
 800748c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3301      	adds	r3, #1
 8007492:	2202      	movs	r2, #2
 8007494:	701a      	strb	r2, [r3, #0]
      break;
 8007496:	e0f2      	b.n	800767e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	885b      	ldrh	r3, [r3, #2]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b05      	cmp	r3, #5
 80074a0:	f200 80ac 	bhi.w	80075fc <USBD_GetDescriptor+0x258>
 80074a4:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <USBD_GetDescriptor+0x108>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074c5 	.word	0x080074c5
 80074b0:	080074f9 	.word	0x080074f9
 80074b4:	0800752d 	.word	0x0800752d
 80074b8:	08007561 	.word	0x08007561
 80074bc:	08007595 	.word	0x08007595
 80074c0:	080075c9 	.word	0x080075c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00b      	beq.n	80074e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	7c12      	ldrb	r2, [r2, #16]
 80074dc:	f107 0108 	add.w	r1, r7, #8
 80074e0:	4610      	mov	r0, r2
 80074e2:	4798      	blx	r3
 80074e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074e6:	e091      	b.n	800760c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 facb 	bl	8007a86 <USBD_CtlError>
            err++;
 80074f0:	7afb      	ldrb	r3, [r7, #11]
 80074f2:	3301      	adds	r3, #1
 80074f4:	72fb      	strb	r3, [r7, #11]
          break;
 80074f6:	e089      	b.n	800760c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	7c12      	ldrb	r2, [r2, #16]
 8007510:	f107 0108 	add.w	r1, r7, #8
 8007514:	4610      	mov	r0, r2
 8007516:	4798      	blx	r3
 8007518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800751a:	e077      	b.n	800760c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fab1 	bl	8007a86 <USBD_CtlError>
            err++;
 8007524:	7afb      	ldrb	r3, [r7, #11]
 8007526:	3301      	adds	r3, #1
 8007528:	72fb      	strb	r3, [r7, #11]
          break;
 800752a:	e06f      	b.n	800760c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00b      	beq.n	8007550 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	7c12      	ldrb	r2, [r2, #16]
 8007544:	f107 0108 	add.w	r1, r7, #8
 8007548:	4610      	mov	r0, r2
 800754a:	4798      	blx	r3
 800754c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800754e:	e05d      	b.n	800760c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fa97 	bl	8007a86 <USBD_CtlError>
            err++;
 8007558:	7afb      	ldrb	r3, [r7, #11]
 800755a:	3301      	adds	r3, #1
 800755c:	72fb      	strb	r3, [r7, #11]
          break;
 800755e:	e055      	b.n	800760c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00b      	beq.n	8007584 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	7c12      	ldrb	r2, [r2, #16]
 8007578:	f107 0108 	add.w	r1, r7, #8
 800757c:	4610      	mov	r0, r2
 800757e:	4798      	blx	r3
 8007580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007582:	e043      	b.n	800760c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fa7d 	bl	8007a86 <USBD_CtlError>
            err++;
 800758c:	7afb      	ldrb	r3, [r7, #11]
 800758e:	3301      	adds	r3, #1
 8007590:	72fb      	strb	r3, [r7, #11]
          break;
 8007592:	e03b      	b.n	800760c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	7c12      	ldrb	r2, [r2, #16]
 80075ac:	f107 0108 	add.w	r1, r7, #8
 80075b0:	4610      	mov	r0, r2
 80075b2:	4798      	blx	r3
 80075b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075b6:	e029      	b.n	800760c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa63 	bl	8007a86 <USBD_CtlError>
            err++;
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	3301      	adds	r3, #1
 80075c4:	72fb      	strb	r3, [r7, #11]
          break;
 80075c6:	e021      	b.n	800760c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	7c12      	ldrb	r2, [r2, #16]
 80075e0:	f107 0108 	add.w	r1, r7, #8
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
 80075e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ea:	e00f      	b.n	800760c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa49 	bl	8007a86 <USBD_CtlError>
            err++;
 80075f4:	7afb      	ldrb	r3, [r7, #11]
 80075f6:	3301      	adds	r3, #1
 80075f8:	72fb      	strb	r3, [r7, #11]
          break;
 80075fa:	e007      	b.n	800760c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa41 	bl	8007a86 <USBD_CtlError>
          err++;
 8007604:	7afb      	ldrb	r3, [r7, #11]
 8007606:	3301      	adds	r3, #1
 8007608:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800760a:	bf00      	nop
      }
      break;
 800760c:	e037      	b.n	800767e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	7c1b      	ldrb	r3, [r3, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d109      	bne.n	800762a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761e:	f107 0208 	add.w	r2, r7, #8
 8007622:	4610      	mov	r0, r2
 8007624:	4798      	blx	r3
 8007626:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007628:	e029      	b.n	800767e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fa2a 	bl	8007a86 <USBD_CtlError>
        err++;
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	3301      	adds	r3, #1
 8007636:	72fb      	strb	r3, [r7, #11]
      break;
 8007638:	e021      	b.n	800767e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7c1b      	ldrb	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10d      	bne.n	800765e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	f107 0208 	add.w	r2, r7, #8
 800764e:	4610      	mov	r0, r2
 8007650:	4798      	blx	r3
 8007652:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	2207      	movs	r2, #7
 800765a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800765c:	e00f      	b.n	800767e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fa10 	bl	8007a86 <USBD_CtlError>
        err++;
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	3301      	adds	r3, #1
 800766a:	72fb      	strb	r3, [r7, #11]
      break;
 800766c:	e007      	b.n	800767e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fa08 	bl	8007a86 <USBD_CtlError>
      err++;
 8007676:	7afb      	ldrb	r3, [r7, #11]
 8007678:	3301      	adds	r3, #1
 800767a:	72fb      	strb	r3, [r7, #11]
      break;
 800767c:	bf00      	nop
  }

  if (err != 0U)
 800767e:	7afb      	ldrb	r3, [r7, #11]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d11e      	bne.n	80076c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	88db      	ldrh	r3, [r3, #6]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d016      	beq.n	80076ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800768c:	893b      	ldrh	r3, [r7, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00e      	beq.n	80076b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	88da      	ldrh	r2, [r3, #6]
 8007696:	893b      	ldrh	r3, [r7, #8]
 8007698:	4293      	cmp	r3, r2
 800769a:	bf28      	it	cs
 800769c:	4613      	movcs	r3, r2
 800769e:	b29b      	uxth	r3, r3
 80076a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076a2:	893b      	ldrh	r3, [r7, #8]
 80076a4:	461a      	mov	r2, r3
 80076a6:	68f9      	ldr	r1, [r7, #12]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fa5d 	bl	8007b68 <USBD_CtlSendData>
 80076ae:	e009      	b.n	80076c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f9e7 	bl	8007a86 <USBD_CtlError>
 80076b8:	e004      	b.n	80076c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 faae 	bl	8007c1c <USBD_CtlSendStatus>
 80076c0:	e000      	b.n	80076c4 <USBD_GetDescriptor+0x320>
    return;
 80076c2:	bf00      	nop
  }
}
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop

080076cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	889b      	ldrh	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d131      	bne.n	8007742 <USBD_SetAddress+0x76>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	88db      	ldrh	r3, [r3, #6]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d12d      	bne.n	8007742 <USBD_SetAddress+0x76>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	885b      	ldrh	r3, [r3, #2]
 80076ea:	2b7f      	cmp	r3, #127	; 0x7f
 80076ec:	d829      	bhi.n	8007742 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	885b      	ldrh	r3, [r3, #2]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b03      	cmp	r3, #3
 8007704:	d104      	bne.n	8007710 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f9bc 	bl	8007a86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800770e:	e01d      	b.n	800774c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7bfa      	ldrb	r2, [r7, #15]
 8007714:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 ff39 	bl	8008594 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa7a 	bl	8007c1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d004      	beq.n	8007738 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2202      	movs	r2, #2
 8007732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007736:	e009      	b.n	800774c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007740:	e004      	b.n	800774c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f99e 	bl	8007a86 <USBD_CtlError>
  }
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	885b      	ldrh	r3, [r3, #2]
 8007766:	b2da      	uxtb	r2, r3
 8007768:	4b4e      	ldr	r3, [pc, #312]	; (80078a4 <USBD_SetConfig+0x150>)
 800776a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800776c:	4b4d      	ldr	r3, [pc, #308]	; (80078a4 <USBD_SetConfig+0x150>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d905      	bls.n	8007780 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f985 	bl	8007a86 <USBD_CtlError>
    return USBD_FAIL;
 800777c:	2303      	movs	r3, #3
 800777e:	e08c      	b.n	800789a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d002      	beq.n	8007792 <USBD_SetConfig+0x3e>
 800778c:	2b03      	cmp	r3, #3
 800778e:	d029      	beq.n	80077e4 <USBD_SetConfig+0x90>
 8007790:	e075      	b.n	800787e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007792:	4b44      	ldr	r3, [pc, #272]	; (80078a4 <USBD_SetConfig+0x150>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d020      	beq.n	80077dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800779a:	4b42      	ldr	r3, [pc, #264]	; (80078a4 <USBD_SetConfig+0x150>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077a4:	4b3f      	ldr	r3, [pc, #252]	; (80078a4 <USBD_SetConfig+0x150>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7fe ffbd 	bl	800672a <USBD_SetClassConfig>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d008      	beq.n	80077cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f962 	bl	8007a86 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2202      	movs	r2, #2
 80077c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077ca:	e065      	b.n	8007898 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fa25 	bl	8007c1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2203      	movs	r2, #3
 80077d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077da:	e05d      	b.n	8007898 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fa1d 	bl	8007c1c <USBD_CtlSendStatus>
      break;
 80077e2:	e059      	b.n	8007898 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077e4:	4b2f      	ldr	r3, [pc, #188]	; (80078a4 <USBD_SetConfig+0x150>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d112      	bne.n	8007812 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80077f4:	4b2b      	ldr	r3, [pc, #172]	; (80078a4 <USBD_SetConfig+0x150>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	461a      	mov	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077fe:	4b29      	ldr	r3, [pc, #164]	; (80078a4 <USBD_SetConfig+0x150>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fe ffac 	bl	8006762 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa06 	bl	8007c1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007810:	e042      	b.n	8007898 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007812:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <USBD_SetConfig+0x150>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	429a      	cmp	r2, r3
 800781e:	d02a      	beq.n	8007876 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7fe ff9a 	bl	8006762 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800782e:	4b1d      	ldr	r3, [pc, #116]	; (80078a4 <USBD_SetConfig+0x150>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007838:	4b1a      	ldr	r3, [pc, #104]	; (80078a4 <USBD_SetConfig+0x150>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7fe ff73 	bl	800672a <USBD_SetClassConfig>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00f      	beq.n	800786e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f918 	bl	8007a86 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	b2db      	uxtb	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fe ff7f 	bl	8006762 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800786c:	e014      	b.n	8007898 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f9d4 	bl	8007c1c <USBD_CtlSendStatus>
      break;
 8007874:	e010      	b.n	8007898 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f9d0 	bl	8007c1c <USBD_CtlSendStatus>
      break;
 800787c:	e00c      	b.n	8007898 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f900 	bl	8007a86 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007886:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <USBD_SetConfig+0x150>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7fe ff68 	bl	8006762 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007892:	2303      	movs	r3, #3
 8007894:	73fb      	strb	r3, [r7, #15]
      break;
 8007896:	bf00      	nop
  }

  return ret;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	2000015c 	.word	0x2000015c

080078a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	88db      	ldrh	r3, [r3, #6]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d004      	beq.n	80078c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f8e2 	bl	8007a86 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078c2:	e023      	b.n	800790c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	dc02      	bgt.n	80078d6 <USBD_GetConfig+0x2e>
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	dc03      	bgt.n	80078dc <USBD_GetConfig+0x34>
 80078d4:	e015      	b.n	8007902 <USBD_GetConfig+0x5a>
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d00b      	beq.n	80078f2 <USBD_GetConfig+0x4a>
 80078da:	e012      	b.n	8007902 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	3308      	adds	r3, #8
 80078e6:	2201      	movs	r2, #1
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f93c 	bl	8007b68 <USBD_CtlSendData>
        break;
 80078f0:	e00c      	b.n	800790c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3304      	adds	r3, #4
 80078f6:	2201      	movs	r2, #1
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f934 	bl	8007b68 <USBD_CtlSendData>
        break;
 8007900:	e004      	b.n	800790c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f8be 	bl	8007a86 <USBD_CtlError>
        break;
 800790a:	bf00      	nop
}
 800790c:	bf00      	nop
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007924:	b2db      	uxtb	r3, r3
 8007926:	3b01      	subs	r3, #1
 8007928:	2b02      	cmp	r3, #2
 800792a:	d81e      	bhi.n	800796a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	88db      	ldrh	r3, [r3, #6]
 8007930:	2b02      	cmp	r3, #2
 8007932:	d004      	beq.n	800793e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f8a5 	bl	8007a86 <USBD_CtlError>
        break;
 800793c:	e01a      	b.n	8007974 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f043 0202 	orr.w	r2, r3, #2
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	330c      	adds	r3, #12
 800795e:	2202      	movs	r2, #2
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f900 	bl	8007b68 <USBD_CtlSendData>
      break;
 8007968:	e004      	b.n	8007974 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f88a 	bl	8007a86 <USBD_CtlError>
      break;
 8007972:	bf00      	nop
  }
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	885b      	ldrh	r3, [r3, #2]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d107      	bne.n	800799e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f940 	bl	8007c1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800799c:	e013      	b.n	80079c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	885b      	ldrh	r3, [r3, #2]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d10b      	bne.n	80079be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	889b      	ldrh	r3, [r3, #4]
 80079aa:	0a1b      	lsrs	r3, r3, #8
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f930 	bl	8007c1c <USBD_CtlSendStatus>
}
 80079bc:	e003      	b.n	80079c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f860 	bl	8007a86 <USBD_CtlError>
}
 80079c6:	bf00      	nop
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	3b01      	subs	r3, #1
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d80b      	bhi.n	80079fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	885b      	ldrh	r3, [r3, #2]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d10c      	bne.n	8007a08 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f910 	bl	8007c1c <USBD_CtlSendStatus>
      }
      break;
 80079fc:	e004      	b.n	8007a08 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f840 	bl	8007a86 <USBD_CtlError>
      break;
 8007a06:	e000      	b.n	8007a0a <USBD_ClrFeature+0x3c>
      break;
 8007a08:	bf00      	nop
  }
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	781a      	ldrb	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f7ff fa17 	bl	8006e70 <SWAPBYTE>
 8007a42:	4603      	mov	r3, r0
 8007a44:	461a      	mov	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3301      	adds	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff fa0a 	bl	8006e70 <SWAPBYTE>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	461a      	mov	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff f9fd 	bl	8006e70 <SWAPBYTE>
 8007a76:	4603      	mov	r3, r0
 8007a78:	461a      	mov	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	80da      	strh	r2, [r3, #6]
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a90:	2180      	movs	r1, #128	; 0x80
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fd14 	bl	80084c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a98:	2100      	movs	r1, #0
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fd10 	bl	80084c0 <USBD_LL_StallEP>
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d036      	beq.n	8007b2c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ac2:	6938      	ldr	r0, [r7, #16]
 8007ac4:	f000 f836 	bl	8007b34 <USBD_GetLen>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	3301      	adds	r3, #1
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	4413      	add	r3, r2
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	7812      	ldrb	r2, [r2, #0]
 8007ae0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	4413      	add	r3, r2
 8007aee:	2203      	movs	r2, #3
 8007af0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	3301      	adds	r3, #1
 8007af6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007af8:	e013      	b.n	8007b22 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	4413      	add	r3, r2
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	7812      	ldrb	r2, [r2, #0]
 8007b04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	613b      	str	r3, [r7, #16]
    idx++;
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	4413      	add	r3, r2
 8007b18:	2200      	movs	r2, #0
 8007b1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e7      	bne.n	8007afa <USBD_GetString+0x52>
 8007b2a:	e000      	b.n	8007b2e <USBD_GetString+0x86>
    return;
 8007b2c:	bf00      	nop
  }
}
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b44:	e005      	b.n	8007b52 <USBD_GetLen+0x1e>
  {
    len++;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1f5      	bne.n	8007b46 <USBD_GetLen+0x12>
  }

  return len;
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fd1f 	bl	80085d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	2100      	movs	r1, #0
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 fd0e 	bl	80085d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2203      	movs	r2, #3
 8007bd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	2100      	movs	r1, #0
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fd12 	bl	8008614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 fd01 	bl	8008614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2204      	movs	r2, #4
 8007c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2100      	movs	r1, #0
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fccd 	bl	80085d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2205      	movs	r2, #5
 8007c4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c52:	2300      	movs	r3, #0
 8007c54:	2200      	movs	r2, #0
 8007c56:	2100      	movs	r1, #0
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fcdb 	bl	8008614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4912      	ldr	r1, [pc, #72]	; (8007cb8 <MX_USB_DEVICE_Init+0x50>)
 8007c70:	4812      	ldr	r0, [pc, #72]	; (8007cbc <MX_USB_DEVICE_Init+0x54>)
 8007c72:	f7fe fcdd 	bl	8006630 <USBD_Init>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c7c:	f7f8 fde2 	bl	8000844 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c80:	490f      	ldr	r1, [pc, #60]	; (8007cc0 <MX_USB_DEVICE_Init+0x58>)
 8007c82:	480e      	ldr	r0, [pc, #56]	; (8007cbc <MX_USB_DEVICE_Init+0x54>)
 8007c84:	f7fe fd04 	bl	8006690 <USBD_RegisterClass>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c8e:	f7f8 fdd9 	bl	8000844 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c92:	490c      	ldr	r1, [pc, #48]	; (8007cc4 <MX_USB_DEVICE_Init+0x5c>)
 8007c94:	4809      	ldr	r0, [pc, #36]	; (8007cbc <MX_USB_DEVICE_Init+0x54>)
 8007c96:	f7fe fbf5 	bl	8006484 <USBD_CDC_RegisterInterface>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ca0:	f7f8 fdd0 	bl	8000844 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ca4:	4805      	ldr	r0, [pc, #20]	; (8007cbc <MX_USB_DEVICE_Init+0x54>)
 8007ca6:	f7fe fd29 	bl	80066fc <USBD_Start>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007cb0:	f7f8 fdc8 	bl	8000844 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cb4:	bf00      	nop
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	200000ac 	.word	0x200000ac
 8007cbc:	20000160 	.word	0x20000160
 8007cc0:	20000018 	.word	0x20000018
 8007cc4:	20000098 	.word	0x20000098

08007cc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ccc:	2200      	movs	r2, #0
 8007cce:	4905      	ldr	r1, [pc, #20]	; (8007ce4 <CDC_Init_FS+0x1c>)
 8007cd0:	4805      	ldr	r0, [pc, #20]	; (8007ce8 <CDC_Init_FS+0x20>)
 8007cd2:	f7fe fbf1 	bl	80064b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cd6:	4905      	ldr	r1, [pc, #20]	; (8007cec <CDC_Init_FS+0x24>)
 8007cd8:	4803      	ldr	r0, [pc, #12]	; (8007ce8 <CDC_Init_FS+0x20>)
 8007cda:	f7fe fc0f 	bl	80064fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007cde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000c3c 	.word	0x20000c3c
 8007ce8:	20000160 	.word	0x20000160
 8007cec:	2000043c 	.word	0x2000043c

08007cf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	6039      	str	r1, [r7, #0]
 8007d0a:	71fb      	strb	r3, [r7, #7]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	2b23      	cmp	r3, #35	; 0x23
 8007d14:	d84a      	bhi.n	8007dac <CDC_Control_FS+0xac>
 8007d16:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <CDC_Control_FS+0x1c>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007dad 	.word	0x08007dad
 8007d20:	08007dad 	.word	0x08007dad
 8007d24:	08007dad 	.word	0x08007dad
 8007d28:	08007dad 	.word	0x08007dad
 8007d2c:	08007dad 	.word	0x08007dad
 8007d30:	08007dad 	.word	0x08007dad
 8007d34:	08007dad 	.word	0x08007dad
 8007d38:	08007dad 	.word	0x08007dad
 8007d3c:	08007dad 	.word	0x08007dad
 8007d40:	08007dad 	.word	0x08007dad
 8007d44:	08007dad 	.word	0x08007dad
 8007d48:	08007dad 	.word	0x08007dad
 8007d4c:	08007dad 	.word	0x08007dad
 8007d50:	08007dad 	.word	0x08007dad
 8007d54:	08007dad 	.word	0x08007dad
 8007d58:	08007dad 	.word	0x08007dad
 8007d5c:	08007dad 	.word	0x08007dad
 8007d60:	08007dad 	.word	0x08007dad
 8007d64:	08007dad 	.word	0x08007dad
 8007d68:	08007dad 	.word	0x08007dad
 8007d6c:	08007dad 	.word	0x08007dad
 8007d70:	08007dad 	.word	0x08007dad
 8007d74:	08007dad 	.word	0x08007dad
 8007d78:	08007dad 	.word	0x08007dad
 8007d7c:	08007dad 	.word	0x08007dad
 8007d80:	08007dad 	.word	0x08007dad
 8007d84:	08007dad 	.word	0x08007dad
 8007d88:	08007dad 	.word	0x08007dad
 8007d8c:	08007dad 	.word	0x08007dad
 8007d90:	08007dad 	.word	0x08007dad
 8007d94:	08007dad 	.word	0x08007dad
 8007d98:	08007dad 	.word	0x08007dad
 8007d9c:	08007dad 	.word	0x08007dad
 8007da0:	08007dad 	.word	0x08007dad
 8007da4:	08007dad 	.word	0x08007dad
 8007da8:	08007dad 	.word	0x08007dad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007dac:	bf00      	nop
  }

  return (USBD_OK);
 8007dae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	4805      	ldr	r0, [pc, #20]	; (8007de0 <CDC_Receive_FS+0x24>)
 8007dca:	f7fe fb97 	bl	80064fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dce:	4804      	ldr	r0, [pc, #16]	; (8007de0 <CDC_Receive_FS+0x24>)
 8007dd0:	f7fe fbf8 	bl	80065c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007dd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000160 	.word	0x20000160

08007de4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007df4:	4b0d      	ldr	r3, [pc, #52]	; (8007e2c <CDC_Transmit_FS+0x48>)
 8007df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e00b      	b.n	8007e22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e0a:	887b      	ldrh	r3, [r7, #2]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	4806      	ldr	r0, [pc, #24]	; (8007e2c <CDC_Transmit_FS+0x48>)
 8007e12:	f7fe fb51 	bl	80064b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e16:	4805      	ldr	r0, [pc, #20]	; (8007e2c <CDC_Transmit_FS+0x48>)
 8007e18:	f7fe fb8e 	bl	8006538 <USBD_CDC_TransmitPacket>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000160 	.word	0x20000160

08007e30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
	...

08007e54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	6039      	str	r1, [r7, #0]
 8007e5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	2212      	movs	r2, #18
 8007e64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e66:	4b03      	ldr	r3, [pc, #12]	; (8007e74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	200000cc 	.word	0x200000cc

08007e78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	6039      	str	r1, [r7, #0]
 8007e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2204      	movs	r2, #4
 8007e88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e8a:	4b03      	ldr	r3, [pc, #12]	; (8007e98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	200000ec 	.word	0x200000ec

08007e9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	6039      	str	r1, [r7, #0]
 8007ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d105      	bne.n	8007eba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	4907      	ldr	r1, [pc, #28]	; (8007ed0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007eb2:	4808      	ldr	r0, [pc, #32]	; (8007ed4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007eb4:	f7ff fdf8 	bl	8007aa8 <USBD_GetString>
 8007eb8:	e004      	b.n	8007ec4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	4904      	ldr	r1, [pc, #16]	; (8007ed0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ebe:	4805      	ldr	r0, [pc, #20]	; (8007ed4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ec0:	f7ff fdf2 	bl	8007aa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ec4:	4b02      	ldr	r3, [pc, #8]	; (8007ed0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	2000143c 	.word	0x2000143c
 8007ed4:	08008834 	.word	0x08008834

08007ed8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	6039      	str	r1, [r7, #0]
 8007ee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	4904      	ldr	r1, [pc, #16]	; (8007ef8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ee8:	4804      	ldr	r0, [pc, #16]	; (8007efc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007eea:	f7ff fddd 	bl	8007aa8 <USBD_GetString>
  return USBD_StrDesc;
 8007eee:	4b02      	ldr	r3, [pc, #8]	; (8007ef8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	2000143c 	.word	0x2000143c
 8007efc:	08008844 	.word	0x08008844

08007f00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	6039      	str	r1, [r7, #0]
 8007f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	221a      	movs	r2, #26
 8007f10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f12:	f000 f855 	bl	8007fc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f16:	4b02      	ldr	r3, [pc, #8]	; (8007f20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	200000f0 	.word	0x200000f0

08007f24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	6039      	str	r1, [r7, #0]
 8007f2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d105      	bne.n	8007f42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	4907      	ldr	r1, [pc, #28]	; (8007f58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f3a:	4808      	ldr	r0, [pc, #32]	; (8007f5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f3c:	f7ff fdb4 	bl	8007aa8 <USBD_GetString>
 8007f40:	e004      	b.n	8007f4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	4904      	ldr	r1, [pc, #16]	; (8007f58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f46:	4805      	ldr	r0, [pc, #20]	; (8007f5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f48:	f7ff fdae 	bl	8007aa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f4c:	4b02      	ldr	r3, [pc, #8]	; (8007f58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	2000143c 	.word	0x2000143c
 8007f5c:	08008858 	.word	0x08008858

08007f60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4603      	mov	r3, r0
 8007f68:	6039      	str	r1, [r7, #0]
 8007f6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	4907      	ldr	r1, [pc, #28]	; (8007f94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f76:	4808      	ldr	r0, [pc, #32]	; (8007f98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f78:	f7ff fd96 	bl	8007aa8 <USBD_GetString>
 8007f7c:	e004      	b.n	8007f88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	4904      	ldr	r1, [pc, #16]	; (8007f94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f82:	4805      	ldr	r0, [pc, #20]	; (8007f98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f84:	f7ff fd90 	bl	8007aa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f88:	4b02      	ldr	r3, [pc, #8]	; (8007f94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	2000143c 	.word	0x2000143c
 8007f98:	08008864 	.word	0x08008864

08007f9c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	6039      	str	r1, [r7, #0]
 8007fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	220c      	movs	r2, #12
 8007fac:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007fae:	4b03      	ldr	r3, [pc, #12]	; (8007fbc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	200000e0 	.word	0x200000e0

08007fc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fc6:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <Get_SerialNum+0x44>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fcc:	4b0e      	ldr	r3, [pc, #56]	; (8008008 <Get_SerialNum+0x48>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fd2:	4b0e      	ldr	r3, [pc, #56]	; (800800c <Get_SerialNum+0x4c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d009      	beq.n	8007ffa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	4909      	ldr	r1, [pc, #36]	; (8008010 <Get_SerialNum+0x50>)
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 f814 	bl	8008018 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ff0:	2204      	movs	r2, #4
 8007ff2:	4908      	ldr	r1, [pc, #32]	; (8008014 <Get_SerialNum+0x54>)
 8007ff4:	68b8      	ldr	r0, [r7, #8]
 8007ff6:	f000 f80f 	bl	8008018 <IntToUnicode>
  }
}
 8007ffa:	bf00      	nop
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	1fff7a10 	.word	0x1fff7a10
 8008008:	1fff7a14 	.word	0x1fff7a14
 800800c:	1fff7a18 	.word	0x1fff7a18
 8008010:	200000f2 	.word	0x200000f2
 8008014:	20000102 	.word	0x20000102

08008018 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800802a:	2300      	movs	r3, #0
 800802c:	75fb      	strb	r3, [r7, #23]
 800802e:	e027      	b.n	8008080 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	0f1b      	lsrs	r3, r3, #28
 8008034:	2b09      	cmp	r3, #9
 8008036:	d80b      	bhi.n	8008050 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	0f1b      	lsrs	r3, r3, #28
 800803c:	b2da      	uxtb	r2, r3
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	005b      	lsls	r3, r3, #1
 8008042:	4619      	mov	r1, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	440b      	add	r3, r1
 8008048:	3230      	adds	r2, #48	; 0x30
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e00a      	b.n	8008066 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	0f1b      	lsrs	r3, r3, #28
 8008054:	b2da      	uxtb	r2, r3
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	4619      	mov	r1, r3
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	440b      	add	r3, r1
 8008060:	3237      	adds	r2, #55	; 0x37
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	3301      	adds	r3, #1
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	4413      	add	r3, r2
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	3301      	adds	r3, #1
 800807e:	75fb      	strb	r3, [r7, #23]
 8008080:	7dfa      	ldrb	r2, [r7, #23]
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	429a      	cmp	r2, r3
 8008086:	d3d3      	bcc.n	8008030 <IntToUnicode+0x18>
  }
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
	...

08008098 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b0a0      	sub	sp, #128	; 0x80
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	605a      	str	r2, [r3, #4]
 80080aa:	609a      	str	r2, [r3, #8]
 80080ac:	60da      	str	r2, [r3, #12]
 80080ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80080b0:	f107 0310 	add.w	r3, r7, #16
 80080b4:	225c      	movs	r2, #92	; 0x5c
 80080b6:	2100      	movs	r1, #0
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 fb95 	bl	80087e8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080c6:	d154      	bne.n	8008172 <HAL_PCD_MspInit+0xda>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80080c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 80080ce:	2304      	movs	r3, #4
 80080d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 80080d2:	2360      	movs	r3, #96	; 0x60
 80080d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80080d6:	2302      	movs	r3, #2
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80080da:	2304      	movs	r3, #4
 80080dc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80080de:	2301      	movs	r3, #1
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80080e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080e6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80080e8:	f107 0310 	add.w	r3, r7, #16
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fb f989 	bl	8003404 <HAL_RCCEx_PeriphCLKConfig>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 80080f8:	f7f8 fba4 	bl	8000844 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080fc:	2300      	movs	r3, #0
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	4b1e      	ldr	r3, [pc, #120]	; (800817c <HAL_PCD_MspInit+0xe4>)
 8008102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008104:	4a1d      	ldr	r2, [pc, #116]	; (800817c <HAL_PCD_MspInit+0xe4>)
 8008106:	f043 0301 	orr.w	r3, r3, #1
 800810a:	6313      	str	r3, [r2, #48]	; 0x30
 800810c:	4b1b      	ldr	r3, [pc, #108]	; (800817c <HAL_PCD_MspInit+0xe4>)
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	60fb      	str	r3, [r7, #12]
 8008116:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008118:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800811c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800811e:	2302      	movs	r3, #2
 8008120:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008122:	2300      	movs	r3, #0
 8008124:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008126:	2303      	movs	r3, #3
 8008128:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800812a:	230a      	movs	r3, #10
 800812c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800812e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008132:	4619      	mov	r1, r3
 8008134:	4812      	ldr	r0, [pc, #72]	; (8008180 <HAL_PCD_MspInit+0xe8>)
 8008136:	f7f9 fbc5 	bl	80018c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800813a:	4b10      	ldr	r3, [pc, #64]	; (800817c <HAL_PCD_MspInit+0xe4>)
 800813c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813e:	4a0f      	ldr	r2, [pc, #60]	; (800817c <HAL_PCD_MspInit+0xe4>)
 8008140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008144:	6353      	str	r3, [r2, #52]	; 0x34
 8008146:	2300      	movs	r3, #0
 8008148:	60bb      	str	r3, [r7, #8]
 800814a:	4b0c      	ldr	r3, [pc, #48]	; (800817c <HAL_PCD_MspInit+0xe4>)
 800814c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814e:	4a0b      	ldr	r2, [pc, #44]	; (800817c <HAL_PCD_MspInit+0xe4>)
 8008150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008154:	6453      	str	r3, [r2, #68]	; 0x44
 8008156:	4b09      	ldr	r3, [pc, #36]	; (800817c <HAL_PCD_MspInit+0xe4>)
 8008158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800815e:	60bb      	str	r3, [r7, #8]
 8008160:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008162:	2200      	movs	r2, #0
 8008164:	2100      	movs	r1, #0
 8008166:	2043      	movs	r0, #67	; 0x43
 8008168:	f7f9 fb75 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800816c:	2043      	movs	r0, #67	; 0x43
 800816e:	f7f9 fb8e 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008172:	bf00      	nop
 8008174:	3780      	adds	r7, #128	; 0x80
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	40023800 	.word	0x40023800
 8008180:	40020000 	.word	0x40020000

08008184 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f7fe fafb 	bl	8006796 <USBD_LL_SetupStage>
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081ba:	78fa      	ldrb	r2, [r7, #3]
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	4619      	mov	r1, r3
 80081d2:	f7fe fb35 	bl	8006840 <USBD_LL_DataOutStage>
}
 80081d6:	bf00      	nop
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081f0:	78fa      	ldrb	r2, [r7, #3]
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	4613      	mov	r3, r2
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	440b      	add	r3, r1
 80081fe:	334c      	adds	r3, #76	; 0x4c
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	78fb      	ldrb	r3, [r7, #3]
 8008204:	4619      	mov	r1, r3
 8008206:	f7fe fbce 	bl	80069a6 <USBD_LL_DataInStage>
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008220:	4618      	mov	r0, r3
 8008222:	f7fe fd02 	bl	8006c2a <USBD_LL_SOF>
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008236:	2301      	movs	r3, #1
 8008238:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d102      	bne.n	8008248 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]
 8008246:	e008      	b.n	800825a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d102      	bne.n	8008256 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008250:	2301      	movs	r3, #1
 8008252:	73fb      	strb	r3, [r7, #15]
 8008254:	e001      	b.n	800825a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008256:	f7f8 faf5 	bl	8000844 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008260:	7bfa      	ldrb	r2, [r7, #15]
 8008262:	4611      	mov	r1, r2
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe fca2 	bl	8006bae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008270:	4618      	mov	r0, r3
 8008272:	f7fe fc4a 	bl	8006b0a <USBD_LL_Reset>
}
 8008276:	bf00      	nop
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fc9d 	bl	8006bce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6812      	ldr	r2, [r2, #0]
 80082a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082a6:	f043 0301 	orr.w	r3, r3, #1
 80082aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082b4:	4b04      	ldr	r3, [pc, #16]	; (80082c8 <HAL_PCD_SuspendCallback+0x48>)
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	4a03      	ldr	r2, [pc, #12]	; (80082c8 <HAL_PCD_SuspendCallback+0x48>)
 80082ba:	f043 0306 	orr.w	r3, r3, #6
 80082be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	e000ed00 	.word	0xe000ed00

080082cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fc8d 	bl	8006bfa <USBD_LL_Resume>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	4611      	mov	r1, r2
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fce5 	bl	8006cce <USBD_LL_IsoOUTIncomplete>
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	4611      	mov	r1, r2
 8008322:	4618      	mov	r0, r3
 8008324:	f7fe fca1 	bl	8006c6a <USBD_LL_IsoINIncomplete>
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe fcf7 	bl	8006d32 <USBD_LL_DevConnected>
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fcf4 	bl	8006d48 <USBD_LL_DevDisconnected>
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d13c      	bne.n	80083f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008378:	4a20      	ldr	r2, [pc, #128]	; (80083fc <USBD_LL_Init+0x94>)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a1e      	ldr	r2, [pc, #120]	; (80083fc <USBD_LL_Init+0x94>)
 8008384:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008388:	4b1c      	ldr	r3, [pc, #112]	; (80083fc <USBD_LL_Init+0x94>)
 800838a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800838e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008390:	4b1a      	ldr	r3, [pc, #104]	; (80083fc <USBD_LL_Init+0x94>)
 8008392:	2206      	movs	r2, #6
 8008394:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008396:	4b19      	ldr	r3, [pc, #100]	; (80083fc <USBD_LL_Init+0x94>)
 8008398:	2202      	movs	r2, #2
 800839a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800839c:	4b17      	ldr	r3, [pc, #92]	; (80083fc <USBD_LL_Init+0x94>)
 800839e:	2200      	movs	r2, #0
 80083a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083a2:	4b16      	ldr	r3, [pc, #88]	; (80083fc <USBD_LL_Init+0x94>)
 80083a4:	2202      	movs	r2, #2
 80083a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80083a8:	4b14      	ldr	r3, [pc, #80]	; (80083fc <USBD_LL_Init+0x94>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <USBD_LL_Init+0x94>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083b4:	4b11      	ldr	r3, [pc, #68]	; (80083fc <USBD_LL_Init+0x94>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083ba:	4b10      	ldr	r3, [pc, #64]	; (80083fc <USBD_LL_Init+0x94>)
 80083bc:	2200      	movs	r2, #0
 80083be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083c0:	4b0e      	ldr	r3, [pc, #56]	; (80083fc <USBD_LL_Init+0x94>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083c6:	480d      	ldr	r0, [pc, #52]	; (80083fc <USBD_LL_Init+0x94>)
 80083c8:	f7f9 fc10 	bl	8001bec <HAL_PCD_Init>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80083d2:	f7f8 fa37 	bl	8000844 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083d6:	2180      	movs	r1, #128	; 0x80
 80083d8:	4808      	ldr	r0, [pc, #32]	; (80083fc <USBD_LL_Init+0x94>)
 80083da:	f7fa fe9c 	bl	8003116 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083de:	2240      	movs	r2, #64	; 0x40
 80083e0:	2100      	movs	r1, #0
 80083e2:	4806      	ldr	r0, [pc, #24]	; (80083fc <USBD_LL_Init+0x94>)
 80083e4:	f7fa fe50 	bl	8003088 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083e8:	2280      	movs	r2, #128	; 0x80
 80083ea:	2101      	movs	r1, #1
 80083ec:	4803      	ldr	r0, [pc, #12]	; (80083fc <USBD_LL_Init+0x94>)
 80083ee:	f7fa fe4b 	bl	8003088 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	2000163c 	.word	0x2000163c

08008400 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008416:	4618      	mov	r0, r3
 8008418:	f7f9 fd0c 	bl	8001e34 <HAL_PCD_Start>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 f990 	bl	8008748 <USBD_Get_USB_Status>
 8008428:	4603      	mov	r3, r0
 800842a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800842c:	7bbb      	ldrb	r3, [r7, #14]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	4608      	mov	r0, r1
 8008440:	4611      	mov	r1, r2
 8008442:	461a      	mov	r2, r3
 8008444:	4603      	mov	r3, r0
 8008446:	70fb      	strb	r3, [r7, #3]
 8008448:	460b      	mov	r3, r1
 800844a:	70bb      	strb	r3, [r7, #2]
 800844c:	4613      	mov	r3, r2
 800844e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800845e:	78bb      	ldrb	r3, [r7, #2]
 8008460:	883a      	ldrh	r2, [r7, #0]
 8008462:	78f9      	ldrb	r1, [r7, #3]
 8008464:	f7fa fa0a 	bl	800287c <HAL_PCD_EP_Open>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f96a 	bl	8008748 <USBD_Get_USB_Status>
 8008474:	4603      	mov	r3, r0
 8008476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008478:	7bbb      	ldrb	r3, [r7, #14]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	460b      	mov	r3, r1
 800848c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	4611      	mov	r1, r2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fa fa53 	bl	800294c <HAL_PCD_EP_Close>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 f94b 	bl	8008748 <USBD_Get_USB_Status>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084da:	78fa      	ldrb	r2, [r7, #3]
 80084dc:	4611      	mov	r1, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fa fb2b 	bl	8002b3a <HAL_PCD_EP_SetStall>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f92c 	bl	8008748 <USBD_Get_USB_Status>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008518:	78fa      	ldrb	r2, [r7, #3]
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f7fa fb70 	bl	8002c02 <HAL_PCD_EP_ClrStall>
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f90d 	bl	8008748 <USBD_Get_USB_Status>
 800852e:	4603      	mov	r3, r0
 8008530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008532:	7bbb      	ldrb	r3, [r7, #14]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800854e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008554:	2b00      	cmp	r3, #0
 8008556:	da0b      	bge.n	8008570 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	4613      	mov	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	440b      	add	r3, r1
 800856a:	333e      	adds	r3, #62	; 0x3e
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	e00b      	b.n	8008588 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008576:	68f9      	ldr	r1, [r7, #12]
 8008578:	4613      	mov	r3, r2
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	440b      	add	r3, r1
 8008582:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008586:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	4611      	mov	r1, r2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fa f93d 	bl	8002832 <HAL_PCD_SetAddress>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 f8c2 	bl	8008748 <USBD_Get_USB_Status>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b086      	sub	sp, #24
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
 80085de:	460b      	mov	r3, r1
 80085e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80085f0:	7af9      	ldrb	r1, [r7, #11]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	f7fa fa56 	bl	8002aa6 <HAL_PCD_EP_Transmit>
 80085fa:	4603      	mov	r3, r0
 80085fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 f8a1 	bl	8008748 <USBD_Get_USB_Status>
 8008606:	4603      	mov	r3, r0
 8008608:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800860a:	7dbb      	ldrb	r3, [r7, #22]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	607a      	str	r2, [r7, #4]
 800861e:	603b      	str	r3, [r7, #0]
 8008620:	460b      	mov	r3, r1
 8008622:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008632:	7af9      	ldrb	r1, [r7, #11]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	f7fa f9d2 	bl	80029e0 <HAL_PCD_EP_Receive>
 800863c:	4603      	mov	r3, r0
 800863e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	4618      	mov	r0, r3
 8008644:	f000 f880 	bl	8008748 <USBD_Get_USB_Status>
 8008648:	4603      	mov	r3, r0
 800864a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800864c:	7dbb      	ldrb	r3, [r7, #22]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008668:	78fa      	ldrb	r2, [r7, #3]
 800866a:	4611      	mov	r1, r2
 800866c:	4618      	mov	r0, r3
 800866e:	f7fa fa02 	bl	8002a76 <HAL_PCD_EP_GetRxCount>
 8008672:	4603      	mov	r3, r0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <HAL_PCDEx_LPM_Callback+0x18>
 800868e:	2b01      	cmp	r3, #1
 8008690:	d01f      	beq.n	80086d2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008692:	e03b      	b.n	800870c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d007      	beq.n	80086ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800869c:	f7f8 f860 	bl	8000760 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086a0:	4b1c      	ldr	r3, [pc, #112]	; (8008714 <HAL_PCDEx_LPM_Callback+0x98>)
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	4a1b      	ldr	r2, [pc, #108]	; (8008714 <HAL_PCDEx_LPM_Callback+0x98>)
 80086a6:	f023 0306 	bic.w	r3, r3, #6
 80086aa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086be:	f023 0301 	bic.w	r3, r3, #1
 80086c2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fe fa95 	bl	8006bfa <USBD_LL_Resume>
    break;
 80086d0:	e01c      	b.n	800870c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	6812      	ldr	r2, [r2, #0]
 80086e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086e4:	f043 0301 	orr.w	r3, r3, #1
 80086e8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe fa6c 	bl	8006bce <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086fe:	4b05      	ldr	r3, [pc, #20]	; (8008714 <HAL_PCDEx_LPM_Callback+0x98>)
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	4a04      	ldr	r2, [pc, #16]	; (8008714 <HAL_PCDEx_LPM_Callback+0x98>)
 8008704:	f043 0306 	orr.w	r3, r3, #6
 8008708:	6113      	str	r3, [r2, #16]
    break;
 800870a:	bf00      	nop
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	e000ed00 	.word	0xe000ed00

08008718 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008720:	4b03      	ldr	r3, [pc, #12]	; (8008730 <USBD_static_malloc+0x18>)
}
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20001b48 	.word	0x20001b48

08008734 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]

}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b03      	cmp	r3, #3
 800875a:	d817      	bhi.n	800878c <USBD_Get_USB_Status+0x44>
 800875c:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <USBD_Get_USB_Status+0x1c>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	08008775 	.word	0x08008775
 8008768:	0800877b 	.word	0x0800877b
 800876c:	08008781 	.word	0x08008781
 8008770:	08008787 	.word	0x08008787
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
    break;
 8008778:	e00b      	b.n	8008792 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800877a:	2303      	movs	r3, #3
 800877c:	73fb      	strb	r3, [r7, #15]
    break;
 800877e:	e008      	b.n	8008792 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008780:	2301      	movs	r3, #1
 8008782:	73fb      	strb	r3, [r7, #15]
    break;
 8008784:	e005      	b.n	8008792 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008786:	2303      	movs	r3, #3
 8008788:	73fb      	strb	r3, [r7, #15]
    break;
 800878a:	e002      	b.n	8008792 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800878c:	2303      	movs	r3, #3
 800878e:	73fb      	strb	r3, [r7, #15]
    break;
 8008790:	bf00      	nop
  }
  return usb_status;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <__libc_init_array>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	4d0d      	ldr	r5, [pc, #52]	; (80087d8 <__libc_init_array+0x38>)
 80087a4:	4c0d      	ldr	r4, [pc, #52]	; (80087dc <__libc_init_array+0x3c>)
 80087a6:	1b64      	subs	r4, r4, r5
 80087a8:	10a4      	asrs	r4, r4, #2
 80087aa:	2600      	movs	r6, #0
 80087ac:	42a6      	cmp	r6, r4
 80087ae:	d109      	bne.n	80087c4 <__libc_init_array+0x24>
 80087b0:	4d0b      	ldr	r5, [pc, #44]	; (80087e0 <__libc_init_array+0x40>)
 80087b2:	4c0c      	ldr	r4, [pc, #48]	; (80087e4 <__libc_init_array+0x44>)
 80087b4:	f000 f830 	bl	8008818 <_init>
 80087b8:	1b64      	subs	r4, r4, r5
 80087ba:	10a4      	asrs	r4, r4, #2
 80087bc:	2600      	movs	r6, #0
 80087be:	42a6      	cmp	r6, r4
 80087c0:	d105      	bne.n	80087ce <__libc_init_array+0x2e>
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
 80087c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c8:	4798      	blx	r3
 80087ca:	3601      	adds	r6, #1
 80087cc:	e7ee      	b.n	80087ac <__libc_init_array+0xc>
 80087ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d2:	4798      	blx	r3
 80087d4:	3601      	adds	r6, #1
 80087d6:	e7f2      	b.n	80087be <__libc_init_array+0x1e>
 80087d8:	0800888c 	.word	0x0800888c
 80087dc:	0800888c 	.word	0x0800888c
 80087e0:	0800888c 	.word	0x0800888c
 80087e4:	08008890 	.word	0x08008890

080087e8 <memset>:
 80087e8:	4402      	add	r2, r0
 80087ea:	4603      	mov	r3, r0
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d100      	bne.n	80087f2 <memset+0xa>
 80087f0:	4770      	bx	lr
 80087f2:	f803 1b01 	strb.w	r1, [r3], #1
 80087f6:	e7f9      	b.n	80087ec <memset+0x4>

080087f8 <strcat>:
 80087f8:	b510      	push	{r4, lr}
 80087fa:	4602      	mov	r2, r0
 80087fc:	7814      	ldrb	r4, [r2, #0]
 80087fe:	4613      	mov	r3, r2
 8008800:	3201      	adds	r2, #1
 8008802:	2c00      	cmp	r4, #0
 8008804:	d1fa      	bne.n	80087fc <strcat+0x4>
 8008806:	3b01      	subs	r3, #1
 8008808:	f811 2b01 	ldrb.w	r2, [r1], #1
 800880c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008810:	2a00      	cmp	r2, #0
 8008812:	d1f9      	bne.n	8008808 <strcat+0x10>
 8008814:	bd10      	pop	{r4, pc}
	...

08008818 <_init>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	bf00      	nop
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr

08008824 <_fini>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	bf00      	nop
 8008828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882a:	bc08      	pop	{r3}
 800882c:	469e      	mov	lr, r3
 800882e:	4770      	bx	lr
