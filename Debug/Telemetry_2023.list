
Telemetry_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009044  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08009214  08009214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092c8  080092c8  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  080092c8  080092c8  000192c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092d0  080092d0  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d0  080092d0  000192d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092d4  080092d4  000192d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  080092d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  20000170  08009448  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de0  08009448  00021de0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121dd  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a0  00000000  00000000  0003237d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00035720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00036518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f9c  00000000  00000000  00037178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a8c  00000000  00000000  0005c114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccb44  00000000  00000000  0006fba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c6e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b54  00000000  00000000  0013c734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000170 	.word	0x20000170
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080091fc 	.word	0x080091fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000174 	.word	0x20000174
 800020c:	080091fc 	.word	0x080091fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_CAN2_Init+0x84>)
 80005ca:	4a20      	ldr	r2, [pc, #128]	; (800064c <MX_CAN2_Init+0x88>)
 80005cc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 80005ce:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <MX_CAN2_Init+0x84>)
 80005d0:	220a      	movs	r2, #10
 80005d2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_CAN2_Init+0x84>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005da:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_CAN2_Init+0x84>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_CAN2_Init+0x84>)
 80005e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005e6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_CAN2_Init+0x84>)
 80005ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005ee:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_CAN2_Init+0x84>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_CAN2_Init+0x84>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_CAN2_Init+0x84>)
 80005fe:	2200      	movs	r2, #0
 8000600:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_CAN2_Init+0x84>)
 8000604:	2200      	movs	r2, #0
 8000606:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_CAN2_Init+0x84>)
 800060a:	2200      	movs	r2, #0
 800060c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_CAN2_Init+0x84>)
 8000610:	2200      	movs	r2, #0
 8000612:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <MX_CAN2_Init+0x84>)
 8000616:	f000 fb4f 	bl	8000cb8 <HAL_CAN_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000620:	f000 f978 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  if(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK){
 8000624:	2102      	movs	r1, #2
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <MX_CAN2_Init+0x84>)
 8000628:	f000 fe72 	bl	8001310 <HAL_CAN_ActivateNotification>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d007      	beq.n	8000642 <MX_CAN2_Init+0x7e>
	  while(CDC_Transmit_FS((uint8_t *)"PROVA\n\r", strlen("PROVA\n\r")) != USBD_OK);;
 8000632:	bf00      	nop
 8000634:	2107      	movs	r1, #7
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <MX_CAN2_Init+0x8c>)
 8000638:	f007 fc62 	bl	8007f00 <CDC_Transmit_FS>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f8      	bne.n	8000634 <MX_CAN2_Init+0x70>
  }

  /* USER CODE END CAN2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000190 	.word	0x20000190
 800064c:	40006800 	.word	0x40006800
 8000650:	08009214 	.word	0x08009214

08000654 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a24      	ldr	r2, [pc, #144]	; (8000704 <HAL_CAN_MspInit+0xb0>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d141      	bne.n	80006fa <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <HAL_CAN_MspInit+0xb4>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a22      	ldr	r2, [pc, #136]	; (8000708 <HAL_CAN_MspInit+0xb4>)
 8000680:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <HAL_CAN_MspInit+0xb4>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_CAN_MspInit+0xb4>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <HAL_CAN_MspInit+0xb4>)
 800069c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a0:	6413      	str	r3, [r2, #64]	; 0x40
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_CAN_MspInit+0xb4>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_CAN_MspInit+0xb4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_CAN_MspInit+0xb4>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_CAN_MspInit+0xb4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80006ca:	2360      	movs	r3, #96	; 0x60
 80006cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80006da:	2309      	movs	r3, #9
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4809      	ldr	r0, [pc, #36]	; (800070c <HAL_CAN_MspInit+0xb8>)
 80006e6:	f001 f97b 	bl	80019e0 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2040      	movs	r0, #64	; 0x40
 80006f0:	f001 f93f 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80006f4:	2040      	movs	r0, #64	; 0x40
 80006f6:	f001 f958 	bl	80019aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40006800 	.word	0x40006800
 8000708:	40023800 	.word	0x40023800
 800070c:	40020400 	.word	0x40020400

08000710 <SetCAN_Flag_HeartBeat>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SetCAN_Flag_HeartBeat(uint8_t value) {
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  CAN_Flag_Status.CAN_Flag_HeartBeat = value;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <SetCAN_Flag_HeartBeat+0x1c>)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	7013      	strb	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	2000018c 	.word	0x2000018c

08000730 <sendCAN>:
    canFil.FilterActivation = ENABLE;
    canFil.SlaveStartFilterBank = 0;

    HAL_CAN_ConfigFilter(&hcan2, &canFil);
}
void sendCAN(void){
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef Can_Tx_Header;
	if (CAN_Flag_Status.CAN_Flag_HeartBeat == ENABLE) {
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <sendCAN+0x48>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b01      	cmp	r3, #1
 800073e:	d116      	bne.n	800076e <sendCAN+0x3e>
	    CAN_Flag_Status.CAN_Flag_HeartBeat = DISABLE;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <sendCAN+0x48>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]

	    Can_Tx_Header.IDE = CAN_ID_STD;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
	    Can_Tx_Header.StdId = ID_TELEMETRY_HEARTBEAT;
 800074a:	2359      	movs	r3, #89	; 0x59
 800074c:	60bb      	str	r3, [r7, #8]
	    Can_Tx_Header.RTR = CAN_RTR_DATA;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
	    Can_Tx_Header.DLC = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
	    uint8_t empty_mex[0];
	    uint32_t null_point;

	    /* Transmit the message if there is an available mailbox -----------------*/
	    while(HAL_CAN_AddTxMessage(&hcan2, &Can_Tx_Header, empty_mex, &null_point)!=HAL_OK){};
 8000756:	bf00      	nop
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	f107 0208 	add.w	r2, r7, #8
 800075e:	f107 0108 	add.w	r1, r7, #8
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <sendCAN+0x4c>)
 8000764:	f000 fbe7 	bl	8000f36 <HAL_CAN_AddTxMessage>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f4      	bne.n	8000758 <sendCAN+0x28>
	  }
}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000018c 	.word	0x2000018c
 800077c:	20000190 	.word	0x20000190

08000780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_GPIO_Init+0x84>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <MX_GPIO_Init+0x84>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_GPIO_Init+0x84>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_GPIO_Init+0x84>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <MX_GPIO_Init+0x84>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_GPIO_Init+0x84>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_GPIO_Init+0x84>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <MX_GPIO_Init+0x84>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_GPIO_Init+0x84>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_GPIO_Init+0x84>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <MX_GPIO_Init+0x84>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_GPIO_Init+0x84>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 f9be 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f80e 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff ffb4 	bl	8000780 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000818:	f007 fab4 	bl	8007d84 <MX_USB_DEVICE_Init>
  MX_CAN2_Init();
 800081c:	f7ff fed2 	bl	80005c4 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan2);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <main+0x24>)
 8000822:	f000 fb44 	bl	8000eae <HAL_CAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sendCAN();
 8000826:	f7ff ff83 	bl	8000730 <sendCAN>
 800082a:	e7fc      	b.n	8000826 <main+0x1e>
 800082c:	20000190 	.word	0x20000190

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	; 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2234      	movs	r2, #52	; 0x34
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f008 f866 	bl	8008910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b2c      	ldr	r3, [pc, #176]	; (800090c <SystemClock_Config+0xdc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	4a2b      	ldr	r2, [pc, #172]	; (800090c <SystemClock_Config+0xdc>)
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <SystemClock_Config+0xdc>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <SystemClock_Config+0xe0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a25      	ldr	r2, [pc, #148]	; (8000910 <SystemClock_Config+0xe0>)
 800087a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <SystemClock_Config+0xe0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000894:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008a4:	23b4      	movs	r3, #180	; 0xb4
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008ac:	2307      	movs	r3, #7
 80008ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 fb8b 	bl	8003fd4 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008c4:	f000 f826 	bl	8000914 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008c8:	f002 fce8 	bl	800329c <HAL_PWREx_EnableOverDrive>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008d2:	f000 f81f 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	230f      	movs	r3, #15
 80008d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	2302      	movs	r3, #2
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2105      	movs	r1, #5
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fd21 	bl	800333c <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000900:	f000 f808 	bl	8000914 <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3750      	adds	r7, #80	; 0x50
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f938 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  sys_tick_count = HAL_GetTick();
 80009c0:	f000 f94a 	bl	8000c58 <HAL_GetTick>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SysTick_Handler+0x38>)
 80009c8:	6013      	str	r3, [r2, #0]
  if((sys_tick_count % 1000) == 0){
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <SysTick_Handler+0x38>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <SysTick_Handler+0x3c>)
 80009d0:	fba3 1302 	umull	r1, r3, r3, r2
 80009d4:	099b      	lsrs	r3, r3, #6
 80009d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009da:	fb01 f303 	mul.w	r3, r1, r3
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <SysTick_Handler+0x32>
	  //tx_heartbeat
	  SetCAN_Flag_HeartBeat(ENABLE);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f7ff fe93 	bl	8000710 <SetCAN_Flag_HeartBeat>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001b8 	.word	0x200001b8
 80009f4:	10624dd3 	.word	0x10624dd3

080009f8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <CAN2_RX0_IRQHandler+0x10>)
 80009fe:	f000 fcad 	bl	800135c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000190 	.word	0x20000190

08000a0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <OTG_FS_IRQHandler+0x10>)
 8000a12:	f001 fad0 	bl	8001fb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200016a4 	.word	0x200016a4

08000a20 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 1 */
void  HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09a      	sub	sp, #104	; 0x68
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

	  char *usb_callback_str = "SOno in callback\n\r";
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000a2a:	667b      	str	r3, [r7, #100]	; 0x64
	  while(CDC_Transmit_FS((uint8_t *)usb_callback_str, strlen(usb_callback_str))!=USBD_OK);
 8000a2c:	bf00      	nop
 8000a2e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000a30:	f7ff fbee 	bl	8000210 <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000a3c:	f007 fa60 	bl	8007f00 <CDC_Transmit_FS>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1f3      	bne.n	8000a2e <HAL_CAN_RxFifo0MsgPendingCallback+0xe>

	  CAN_RxHeaderTypeDef RxMessage_header;
	  uint8_t Rx_Data[8]={0};
 8000a46:	2300      	movs	r3, #0
 8000a48:	643b      	str	r3, [r7, #64]	; 0x40
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	647b      	str	r3, [r7, #68]	; 0x44

	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxMessage_header, Rx_Data);
 8000a4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000a56:	2100      	movs	r1, #0
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000a5a:	f000 fb47 	bl	80010ec <HAL_CAN_GetRxMessage>

	  char msg[50];
	  sprintf(msg, "Data:%s-ID:%ld\n\r", (char*)Rx_Data, (uint32_t)RxMessage_header.StdId);
 8000a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a60:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000a64:	f107 000c 	add.w	r0, r7, #12
 8000a68:	490e      	ldr	r1, [pc, #56]	; (8000aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000a6a:	f007 ff59 	bl	8008920 <siprintf>

	  while(CDC_Transmit_FS((uint8_t *)msg, strlen(msg)) != USBD_OK);
 8000a6e:	bf00      	nop
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fbcb 	bl	8000210 <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f007 fa3b 	bl	8007f00 <CDC_Transmit_FS>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1ef      	bne.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	3768      	adds	r7, #104	; 0x68
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	0800921c 	.word	0x0800921c
 8000aa0:	20000190 	.word	0x20000190
 8000aa4:	08009230 	.word	0x08009230

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f007 fef0 	bl	80088bc <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20020000 	.word	0x20020000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	200001bc 	.word	0x200001bc
 8000b10:	20001de0 	.word	0x20001de0

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b3e:	490e      	ldr	r1, [pc, #56]	; (8000b78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b54:	4c0b      	ldr	r4, [pc, #44]	; (8000b84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b62:	f7ff ffd7 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f007 feaf 	bl	80088c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fe4d 	bl	8000808 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000b7c:	080092d8 	.word	0x080092d8
  ldr r2, =_sbss
 8000b80:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000b84:	20001de0 	.word	0x20001de0

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 fed1 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f000 f808 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff feae 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x54>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x58>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fee9 	bl	80019c6 <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00e      	b.n	8000c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d80a      	bhi.n	8000c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f000 feb1 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c10:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <HAL_InitTick+0x5c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	200001c0 	.word	0x200001c0

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200001c0 	.word	0x200001c0

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Delay+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffde 	bl	8000c58 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e0ed      	b.n	8000ea6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fcbc 	bl	8000654 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0201 	orr.w	r2, r2, #1
 8000cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cec:	f7ff ffb4 	bl	8000c58 <HAL_GetTick>
 8000cf0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cf2:	e012      	b.n	8000d1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf4:	f7ff ffb0 	bl	8000c58 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d90b      	bls.n	8000d1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2205      	movs	r2, #5
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e0c5      	b.n	8000ea6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0e5      	beq.n	8000cf4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0202 	bic.w	r2, r2, #2
 8000d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d38:	f7ff ff8e 	bl	8000c58 <HAL_GetTick>
 8000d3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d3e:	e012      	b.n	8000d66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d40:	f7ff ff8a 	bl	8000c58 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b0a      	cmp	r3, #10
 8000d4c:	d90b      	bls.n	8000d66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2205      	movs	r2, #5
 8000d5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e09f      	b.n	8000ea6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1e5      	bne.n	8000d40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7e1b      	ldrb	r3, [r3, #24]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d108      	bne.n	8000d8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	e007      	b.n	8000d9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7e5b      	ldrb	r3, [r3, #25]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d108      	bne.n	8000db8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7e9b      	ldrb	r3, [r3, #26]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d108      	bne.n	8000de2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0220 	orr.w	r2, r2, #32
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e007      	b.n	8000df2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0220 	bic.w	r2, r2, #32
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7edb      	ldrb	r3, [r3, #27]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d108      	bne.n	8000e0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0210 	bic.w	r2, r2, #16
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e007      	b.n	8000e1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0210 	orr.w	r2, r2, #16
 8000e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7f1b      	ldrb	r3, [r3, #28]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d108      	bne.n	8000e36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0208 	orr.w	r2, r2, #8
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	e007      	b.n	8000e46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0208 	bic.w	r2, r2, #8
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7f5b      	ldrb	r3, [r3, #29]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d108      	bne.n	8000e60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f042 0204 	orr.w	r2, r2, #4
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e007      	b.n	8000e70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0204 	bic.w	r2, r2, #4
 8000e6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	ea42 0103 	orr.w	r1, r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	1e5a      	subs	r2, r3, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d12e      	bne.n	8000f20 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0201 	bic.w	r2, r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000eda:	f7ff febd 	bl	8000c58 <HAL_GetTick>
 8000ede:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ee0:	e012      	b.n	8000f08 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee2:	f7ff feb9 	bl	8000c58 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b0a      	cmp	r3, #10
 8000eee:	d90b      	bls.n	8000f08 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2205      	movs	r2, #5
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e012      	b.n	8000f2e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1e5      	bne.n	8000ee2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e006      	b.n	8000f2e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
  }
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b089      	sub	sp, #36	; 0x24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f54:	7ffb      	ldrb	r3, [r7, #31]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d003      	beq.n	8000f62 <HAL_CAN_AddTxMessage+0x2c>
 8000f5a:	7ffb      	ldrb	r3, [r7, #31]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	f040 80b8 	bne.w	80010d2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10a      	bne.n	8000f82 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d105      	bne.n	8000f82 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80a0 	beq.w	80010c2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	0e1b      	lsrs	r3, r3, #24
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d907      	bls.n	8000fa2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e09e      	b.n	80010e0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10d      	bne.n	8000fd0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fbe:	68f9      	ldr	r1, [r7, #12]
 8000fc0:	6809      	ldr	r1, [r1, #0]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3318      	adds	r3, #24
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	440b      	add	r3, r1
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e00f      	b.n	8000ff0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fda:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fe0:	68f9      	ldr	r1, [r7, #12]
 8000fe2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000fe4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3318      	adds	r3, #24
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	440b      	add	r3, r1
 8000fee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6819      	ldr	r1, [r3, #0]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3318      	adds	r3, #24
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	440b      	add	r3, r1
 8001000:	3304      	adds	r3, #4
 8001002:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	7d1b      	ldrb	r3, [r3, #20]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d111      	bne.n	8001030 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3318      	adds	r3, #24
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	4413      	add	r3, r2
 8001018:	3304      	adds	r3, #4
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	6811      	ldr	r1, [r2, #0]
 8001020:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3318      	adds	r3, #24
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	440b      	add	r3, r1
 800102c:	3304      	adds	r3, #4
 800102e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3307      	adds	r3, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	061a      	lsls	r2, r3, #24
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3306      	adds	r3, #6
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	041b      	lsls	r3, r3, #16
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3305      	adds	r3, #5
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	4313      	orrs	r3, r2
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	3204      	adds	r2, #4
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	4610      	mov	r0, r2
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	6811      	ldr	r1, [r2, #0]
 8001058:	ea43 0200 	orr.w	r2, r3, r0
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	440b      	add	r3, r1
 8001062:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001066:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3303      	adds	r3, #3
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	061a      	lsls	r2, r3, #24
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3302      	adds	r3, #2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	041b      	lsls	r3, r3, #16
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3301      	adds	r3, #1
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	4313      	orrs	r3, r2
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	4610      	mov	r0, r2
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	6811      	ldr	r1, [r2, #0]
 800108e:	ea43 0200 	orr.w	r2, r3, r0
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	440b      	add	r3, r1
 8001098:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800109c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3318      	adds	r3, #24
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	4413      	add	r3, r2
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	6811      	ldr	r1, [r2, #0]
 80010b0:	f043 0201 	orr.w	r2, r3, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3318      	adds	r3, #24
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	440b      	add	r3, r1
 80010bc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e00e      	b.n	80010e0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e006      	b.n	80010e0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
  }
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3724      	adds	r7, #36	; 0x24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001100:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d003      	beq.n	8001110 <HAL_CAN_GetRxMessage+0x24>
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b02      	cmp	r3, #2
 800110c:	f040 80f3 	bne.w	80012f6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10e      	bne.n	8001134 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d116      	bne.n	8001152 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0e7      	b.n	8001304 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d107      	bne.n	8001152 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e0d8      	b.n	8001304 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	331b      	adds	r3, #27
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0204 	and.w	r2, r3, #4
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10c      	bne.n	800118a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	331b      	adds	r3, #27
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	0d5b      	lsrs	r3, r3, #21
 8001180:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e00b      	b.n	80011a2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	331b      	adds	r3, #27
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	4413      	add	r3, r2
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	331b      	adds	r3, #27
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4413      	add	r3, r2
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0202 	and.w	r2, r3, #2
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	331b      	adds	r3, #27
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	3304      	adds	r3, #4
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 020f 	and.w	r2, r3, #15
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	331b      	adds	r3, #27
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	331b      	adds	r3, #27
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	3304      	adds	r3, #4
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	0c1b      	lsrs	r3, r3, #16
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	4413      	add	r3, r2
 8001220:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	0a1a      	lsrs	r2, r3, #8
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	4413      	add	r3, r2
 800123a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0c1a      	lsrs	r2, r3, #16
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	3302      	adds	r3, #2
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0e1a      	lsrs	r2, r3, #24
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3303      	adds	r3, #3
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4413      	add	r3, r2
 800126e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	3304      	adds	r3, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4413      	add	r3, r2
 8001286:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	0a1a      	lsrs	r2, r3, #8
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	3305      	adds	r3, #5
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	4413      	add	r3, r2
 80012a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	0c1a      	lsrs	r2, r3, #16
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	3306      	adds	r3, #6
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0e1a      	lsrs	r2, r3, #24
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	3307      	adds	r3, #7
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d108      	bne.n	80012e2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0220 	orr.w	r2, r2, #32
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	e007      	b.n	80012f2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0220 	orr.w	r2, r2, #32
 80012f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e006      	b.n	8001304 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
  }
}
 8001304:	4618      	mov	r0, r3
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001320:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d002      	beq.n	800132e <HAL_CAN_ActivateNotification+0x1e>
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d109      	bne.n	8001342 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6959      	ldr	r1, [r3, #20]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e006      	b.n	8001350 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
  }
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d07c      	beq.n	800149c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d023      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f983 	bl	80016ca <HAL_CAN_TxMailbox0CompleteCallback>
 80013c4:	e016      	b.n	80013f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
 80013d8:	e00c      	b.n	80013f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
 80013ec:	e002      	b.n	80013f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f989 	bl	8001706 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d024      	beq.n	8001448 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001406:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f963 	bl	80016de <HAL_CAN_TxMailbox1CompleteCallback>
 8001418:	e016      	b.n	8001448 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
 800142c:	e00c      	b.n	8001448 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	e002      	b.n	8001448 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f969 	bl	800171a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d024      	beq.n	800149c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800145a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f943 	bl	80016f2 <HAL_CAN_TxMailbox2CompleteCallback>
 800146c:	e016      	b.n	800149c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
 8001480:	e00c      	b.n	800149c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
 8001494:	e002      	b.n	800149c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f949 	bl	800172e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00c      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d007      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2210      	movs	r2, #16
 80014be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2208      	movs	r2, #8
 80014da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f930 	bl	8001742 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d009      	beq.n	8001500 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fa90 	bl	8000a20 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00c      	beq.n	8001524 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2210      	movs	r2, #16
 8001522:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2208      	movs	r2, #8
 800153e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f912 	bl	800176a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f8f9 	bl	8001756 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2210      	movs	r2, #16
 800157e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f8fc 	bl	800177e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00b      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d006      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2208      	movs	r2, #8
 80015a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f8f5 	bl	8001792 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d07b      	beq.n	80016aa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d072      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001616:	2b00      	cmp	r3, #0
 8001618:	d043      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001620:	2b00      	cmp	r3, #0
 8001622:	d03e      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800162a:	2b60      	cmp	r3, #96	; 0x60
 800162c:	d02b      	beq.n	8001686 <HAL_CAN_IRQHandler+0x32a>
 800162e:	2b60      	cmp	r3, #96	; 0x60
 8001630:	d82e      	bhi.n	8001690 <HAL_CAN_IRQHandler+0x334>
 8001632:	2b50      	cmp	r3, #80	; 0x50
 8001634:	d022      	beq.n	800167c <HAL_CAN_IRQHandler+0x320>
 8001636:	2b50      	cmp	r3, #80	; 0x50
 8001638:	d82a      	bhi.n	8001690 <HAL_CAN_IRQHandler+0x334>
 800163a:	2b40      	cmp	r3, #64	; 0x40
 800163c:	d019      	beq.n	8001672 <HAL_CAN_IRQHandler+0x316>
 800163e:	2b40      	cmp	r3, #64	; 0x40
 8001640:	d826      	bhi.n	8001690 <HAL_CAN_IRQHandler+0x334>
 8001642:	2b30      	cmp	r3, #48	; 0x30
 8001644:	d010      	beq.n	8001668 <HAL_CAN_IRQHandler+0x30c>
 8001646:	2b30      	cmp	r3, #48	; 0x30
 8001648:	d822      	bhi.n	8001690 <HAL_CAN_IRQHandler+0x334>
 800164a:	2b10      	cmp	r3, #16
 800164c:	d002      	beq.n	8001654 <HAL_CAN_IRQHandler+0x2f8>
 800164e:	2b20      	cmp	r3, #32
 8001650:	d005      	beq.n	800165e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001652:	e01d      	b.n	8001690 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800165c:	e019      	b.n	8001692 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001666:	e014      	b.n	8001692 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	f043 0320 	orr.w	r3, r3, #32
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001670:	e00f      	b.n	8001692 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800167a:	e00a      	b.n	8001692 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001684:	e005      	b.n	8001692 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800168e:	e000      	b.n	8001692 <HAL_CAN_IRQHandler+0x336>
            break;
 8001690:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	699a      	ldr	r2, [r3, #24]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016a0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2204      	movs	r2, #4
 80016a8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f872 	bl	80017a6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <__NVIC_EnableIRQ+0x38>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f7ff ff8e 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff29 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff3e 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff8e 	bl	80018b0 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5d 	bl	800185c <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff31 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffa2 	bl	8001918 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e165      	b.n	8001cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 8154 	bne.w	8001cc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d130      	bne.n	8001a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80ae 	beq.w	8001cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a5c      	ldr	r2, [pc, #368]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b5a      	ldr	r3, [pc, #360]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_GPIO_Init+0x308>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d025      	beq.n	8001bfa <HAL_GPIO_Init+0x21a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_GPIO_Init+0x30c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d01f      	beq.n	8001bf6 <HAL_GPIO_Init+0x216>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_GPIO_Init+0x310>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d019      	beq.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x314>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_GPIO_Init+0x20e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_GPIO_Init+0x318>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <HAL_GPIO_Init+0x20a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4a      	ldr	r2, [pc, #296]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x206>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a49      	ldr	r2, [pc, #292]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_GPIO_Init+0x202>
 8001bde:	2306      	movs	r3, #6
 8001be0:	e00c      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001be2:	2307      	movs	r3, #7
 8001be4:	e00a      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c0c:	4935      	ldr	r1, [pc, #212]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3e:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	f67f ae96 	bls.w	80019fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40013800 	.word	0x40013800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020c00 	.word	0x40020c00
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40021400 	.word	0x40021400
 8001d00:	40021800 	.word	0x40021800
 8001d04:	40013c00 	.word	0x40013c00

08001d08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0a:	b08f      	sub	sp, #60	; 0x3c
 8001d0c:	af0a      	add	r7, sp, #40	; 0x28
 8001d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e116      	b.n	8001f48 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d106      	bne.n	8001d3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f006 fa3d 	bl	80081b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 fcee 	bl	800473a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	687e      	ldr	r6, [r7, #4]
 8001d66:	466d      	mov	r5, sp
 8001d68:	f106 0410 	add.w	r4, r6, #16
 8001d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d78:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7c:	1d33      	adds	r3, r6, #4
 8001d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d80:	6838      	ldr	r0, [r7, #0]
 8001d82:	f002 fbc5 	bl	8004510 <USB_CoreInit>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0d7      	b.n	8001f48 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fcdc 	bl	800475c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e04a      	b.n	8001e40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	333d      	adds	r3, #61	; 0x3d
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	333c      	adds	r3, #60	; 0x3c
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	b298      	uxth	r0, r3
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	3344      	adds	r3, #68	; 0x44
 8001de6:	4602      	mov	r2, r0
 8001de8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	3340      	adds	r3, #64	; 0x40
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3348      	adds	r3, #72	; 0x48
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	334c      	adds	r3, #76	; 0x4c
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	3354      	adds	r3, #84	; 0x54
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3af      	bcc.n	8001daa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
 8001e4e:	e044      	b.n	8001eda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d3b5      	bcc.n	8001e50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	687e      	ldr	r6, [r7, #4]
 8001eec:	466d      	mov	r5, sp
 8001eee:	f106 0410 	add.w	r4, r6, #16
 8001ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001efa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f02:	1d33      	adds	r3, r6, #4
 8001f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f06:	6838      	ldr	r0, [r7, #0]
 8001f08:	f002 fc74 	bl	80047f4 <USB_DevInit>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e014      	b.n	8001f48 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d102      	bne.n	8001f3c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f001 f98c 	bl	8003254 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f003 fdb6 	bl	8005ab2 <USB_DevDisconnect>

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_PCD_Start+0x1c>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e020      	b.n	8001fae <HAL_PCD_Start+0x5e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d109      	bne.n	8001f90 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d005      	beq.n	8001f90 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 fbbf 	bl	8004718 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fd66 	bl	8005a70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fb6:	b590      	push	{r4, r7, lr}
 8001fb8:	b08d      	sub	sp, #52	; 0x34
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fe24 	bl	8005c1a <USB_GetMode>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 84b7 	bne.w	8002948 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fd88 	bl	8005af4 <USB_ReadInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 84ad 	beq.w	8002946 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f003 fd75 	bl	8005af4 <USB_ReadInterrupts>
 800200a:	4603      	mov	r3, r0
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b02      	cmp	r3, #2
 8002012:	d107      	bne.n	8002024 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f002 0202 	and.w	r2, r2, #2
 8002022:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f003 fd63 	bl	8005af4 <USB_ReadInterrupts>
 800202e:	4603      	mov	r3, r0
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b10      	cmp	r3, #16
 8002036:	d161      	bne.n	80020fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0210 	bic.w	r2, r2, #16
 8002046:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f003 020f 	and.w	r2, r3, #15
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	0c5b      	lsrs	r3, r3, #17
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	2b02      	cmp	r3, #2
 8002072:	d124      	bne.n	80020be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d035      	beq.n	80020ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800208a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	6a38      	ldr	r0, [r7, #32]
 8002094:	f003 fb9a 	bl	80057cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a4:	441a      	add	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020b6:	441a      	add	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	621a      	str	r2, [r3, #32]
 80020bc:	e016      	b.n	80020ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	0c5b      	lsrs	r3, r3, #17
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d110      	bne.n	80020ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020d0:	2208      	movs	r2, #8
 80020d2:	4619      	mov	r1, r3
 80020d4:	6a38      	ldr	r0, [r7, #32]
 80020d6:	f003 fb79 	bl	80057cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	6a1a      	ldr	r2, [r3, #32]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020e6:	441a      	add	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0210 	orr.w	r2, r2, #16
 80020fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fcf7 	bl	8005af4 <USB_ReadInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800210c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002110:	f040 80a7 	bne.w	8002262 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f003 fcfc 	bl	8005b1a <USB_ReadDevAllOutEpInterrupt>
 8002122:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002124:	e099      	b.n	800225a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 808e 	beq.w	800224e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f003 fd20 	bl	8005b82 <USB_ReadDevOutEPInterrupt>
 8002142:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215a:	461a      	mov	r2, r3
 800215c:	2301      	movs	r3, #1
 800215e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fef0 	bl	8002f48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217e:	461a      	mov	r2, r3
 8002180:	2308      	movs	r3, #8
 8002182:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 ffc6 	bl	8003118 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a2:	461a      	mov	r2, r3
 80021a4:	2310      	movs	r3, #16
 80021a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d030      	beq.n	8002214 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ba:	2b80      	cmp	r3, #128	; 0x80
 80021bc:	d109      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	3304      	adds	r3, #4
 80021e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	78db      	ldrb	r3, [r3, #3]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d108      	bne.n	8002202 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2200      	movs	r2, #0
 80021f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f006 f901 	bl	8008404 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220e:	461a      	mov	r2, r3
 8002210:	2302      	movs	r3, #2
 8002212:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222a:	461a      	mov	r2, r3
 800222c:	2320      	movs	r3, #32
 800222e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002246:	461a      	mov	r2, r3
 8002248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	3301      	adds	r3, #1
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	2b00      	cmp	r3, #0
 800225e:	f47f af62 	bne.w	8002126 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fc44 	bl	8005af4 <USB_ReadInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002272:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002276:	f040 80db 	bne.w	8002430 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fc65 	bl	8005b4e <USB_ReadDevAllInEpInterrupt>
 8002284:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800228a:	e0cd      	b.n	8002428 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80c2 	beq.w	800241c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 fc8b 	bl	8005bbe <USB_ReadDevInEPInterrupt>
 80022a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d057      	beq.n	8002364 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	2201      	movs	r2, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69f9      	ldr	r1, [r7, #28]
 80022d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022d4:	4013      	ands	r3, r2
 80022d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e4:	461a      	mov	r2, r3
 80022e6:	2301      	movs	r3, #1
 80022e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d132      	bne.n	8002358 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	334c      	adds	r3, #76	; 0x4c
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4403      	add	r3, r0
 8002312:	3348      	adds	r3, #72	; 0x48
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4419      	add	r1, r3
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4403      	add	r3, r0
 8002326:	334c      	adds	r3, #76	; 0x4c
 8002328:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	2b00      	cmp	r3, #0
 800232e:	d113      	bne.n	8002358 <HAL_PCD_IRQHandler+0x3a2>
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	3354      	adds	r3, #84	; 0x54
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d108      	bne.n	8002358 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002350:	461a      	mov	r2, r3
 8002352:	2101      	movs	r1, #1
 8002354:	f003 fc92 	bl	8005c7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f005 ffcb 	bl	80082fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800237a:	461a      	mov	r2, r3
 800237c:	2308      	movs	r3, #8
 800237e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002396:	461a      	mov	r2, r3
 8002398:	2310      	movs	r3, #16
 800239a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b2:	461a      	mov	r2, r3
 80023b4:	2340      	movs	r3, #64	; 0x40
 80023b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d023      	beq.n	800240a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80023c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c4:	6a38      	ldr	r0, [r7, #32]
 80023c6:	f002 fb73 	bl	8004ab0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	3338      	adds	r3, #56	; 0x38
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	3304      	adds	r3, #4
 80023dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	78db      	ldrb	r3, [r3, #3]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d108      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4619      	mov	r1, r3
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f006 f818 	bl	8008428 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002404:	461a      	mov	r2, r3
 8002406:	2302      	movs	r3, #2
 8002408:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fd08 	bl	8002e2c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	3301      	adds	r3, #1
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	2b00      	cmp	r3, #0
 800242c:	f47f af2e 	bne.w	800228c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f003 fb5d 	bl	8005af4 <USB_ReadInterrupts>
 800243a:	4603      	mov	r3, r0
 800243c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002444:	d122      	bne.n	800248c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002460:	2b01      	cmp	r3, #1
 8002462:	d108      	bne.n	8002476 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800246c:	2100      	movs	r1, #0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f006 f992 	bl	8008798 <HAL_PCDEx_LPM_Callback>
 8002474:	e002      	b.n	800247c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f005 ffb6 	bl	80083e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800248a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fb2f 	bl	8005af4 <USB_ReadInterrupts>
 8002496:	4603      	mov	r3, r0
 8002498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024a0:	d112      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d102      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f005 ff72 	bl	800839c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024c6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fb11 	bl	8005af4 <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024dc:	d121      	bne.n	8002522 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80024ec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d111      	bne.n	800251c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	f003 020f 	and.w	r2, r3, #15
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002512:	2101      	movs	r1, #1
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f006 f93f 	bl	8008798 <HAL_PCDEx_LPM_Callback>
 800251a:	e002      	b.n	8002522 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f005 ff3d 	bl	800839c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f003 fae4 	bl	8005af4 <USB_ReadInterrupts>
 800252c:	4603      	mov	r3, r0
 800252e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002536:	f040 80b7 	bne.w	80026a8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2110      	movs	r1, #16
 8002554:	4618      	mov	r0, r3
 8002556:	f002 faab 	bl	8004ab0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255a:	2300      	movs	r3, #0
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255e:	e046      	b.n	80025ee <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800256c:	461a      	mov	r2, r3
 800256e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002572:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	4413      	add	r3, r2
 800257c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002584:	0151      	lsls	r1, r2, #5
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	440a      	add	r2, r1
 800258a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800258e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002592:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a0:	461a      	mov	r2, r3
 80025a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b8:	0151      	lsls	r1, r2, #5
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	440a      	add	r2, r1
 80025be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025d8:	0151      	lsls	r1, r2, #5
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	440a      	add	r2, r1
 80025de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	3301      	adds	r3, #1
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d3b3      	bcc.n	8002560 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002606:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800260a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	2b00      	cmp	r3, #0
 8002612:	d016      	beq.n	8002642 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002624:	f043 030b 	orr.w	r3, r3, #11
 8002628:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263a:	f043 030b 	orr.w	r3, r3, #11
 800263e:	6453      	str	r3, [r2, #68]	; 0x44
 8002640:	e015      	b.n	800266e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002654:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002658:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002668:	f043 030b 	orr.w	r3, r3, #11
 800266c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800267c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002680:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002692:	461a      	mov	r2, r3
 8002694:	f003 faf2 	bl	8005c7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f003 fa21 	bl	8005af4 <USB_ReadInterrupts>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026bc:	d124      	bne.n	8002708 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fab7 	bl	8005c36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 fa6c 	bl	8004baa <USB_GetDevSpeed>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681c      	ldr	r4, [r3, #0]
 80026de:	f000 ff13 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 80026e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	4620      	mov	r0, r4
 80026ee:	f001 ff71 	bl	80045d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f005 fe29 	bl	800834a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002706:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 f9f1 	bl	8005af4 <USB_ReadInterrupts>
 8002712:	4603      	mov	r3, r0
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b08      	cmp	r3, #8
 800271a:	d10a      	bne.n	8002732 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f005 fe06 	bl	800832e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f002 0208 	and.w	r2, r2, #8
 8002730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f003 f9dc 	bl	8005af4 <USB_ReadInterrupts>
 800273c:	4603      	mov	r3, r0
 800273e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002742:	2b80      	cmp	r3, #128	; 0x80
 8002744:	d122      	bne.n	800278c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002752:	2301      	movs	r3, #1
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e014      	b.n	8002782 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	b2db      	uxtb	r3, r3
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fb27 	bl	8002dca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	3301      	adds	r3, #1
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002788:	429a      	cmp	r2, r3
 800278a:	d3e5      	bcc.n	8002758 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f003 f9af 	bl	8005af4 <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a0:	d13b      	bne.n	800281a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027a2:	2301      	movs	r3, #1
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
 80027a6:	e02b      	b.n	8002800 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	3340      	adds	r3, #64	; 0x40
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d115      	bne.n	80027fa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80027ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	da12      	bge.n	80027fa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	333f      	adds	r3, #63	; 0x3f
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	4619      	mov	r1, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fae8 	bl	8002dca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	3301      	adds	r3, #1
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	429a      	cmp	r2, r3
 8002808:	d3ce      	bcc.n	80027a8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f003 f968 	bl	8005af4 <USB_ReadInterrupts>
 8002824:	4603      	mov	r3, r0
 8002826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800282e:	d155      	bne.n	80028dc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002830:	2301      	movs	r3, #1
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
 8002834:	e045      	b.n	80028c2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d12e      	bne.n	80028bc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800285e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002860:	2b00      	cmp	r3, #0
 8002862:	da2b      	bge.n	80028bc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002870:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002874:	429a      	cmp	r2, r3
 8002876:	d121      	bne.n	80028bc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b8:	6053      	str	r3, [r2, #4]
            break;
 80028ba:	e007      	b.n	80028cc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	3301      	adds	r3, #1
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3b4      	bcc.n	8002836 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80028da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 f907 	bl	8005af4 <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f0:	d10a      	bne.n	8002908 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f005 fdaa 	bl	800844c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f003 f8f1 	bl	8005af4 <USB_ReadInterrupts>
 8002912:	4603      	mov	r3, r0
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b04      	cmp	r3, #4
 800291a:	d115      	bne.n	8002948 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f005 fd9a 	bl	8008468 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	430a      	orrs	r2, r1
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	e000      	b.n	8002948 <HAL_PCD_IRQHandler+0x992>
      return;
 8002946:	bf00      	nop
    }
  }
}
 8002948:	3734      	adds	r7, #52	; 0x34
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}

0800294e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_PCD_SetAddress+0x1a>
 8002964:	2302      	movs	r3, #2
 8002966:	e013      	b.n	8002990 <HAL_PCD_SetAddress+0x42>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f003 f84f 	bl	8005a24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	4608      	mov	r0, r1
 80029a2:	4611      	mov	r1, r2
 80029a4:	461a      	mov	r2, r3
 80029a6:	4603      	mov	r3, r0
 80029a8:	70fb      	strb	r3, [r7, #3]
 80029aa:	460b      	mov	r3, r1
 80029ac:	803b      	strh	r3, [r7, #0]
 80029ae:	4613      	mov	r3, r2
 80029b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	da0f      	bge.n	80029de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	f003 020f 	and.w	r2, r3, #15
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	3338      	adds	r3, #56	; 0x38
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	3304      	adds	r3, #4
 80029d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	705a      	strb	r2, [r3, #1]
 80029dc:	e00f      	b.n	80029fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	f003 020f 	and.w	r2, r3, #15
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	3304      	adds	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a0a:	883a      	ldrh	r2, [r7, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	78ba      	ldrb	r2, [r7, #2]
 8002a14:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a28:	78bb      	ldrb	r3, [r7, #2]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d102      	bne.n	8002a34 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_PCD_EP_Open+0xaa>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e00e      	b.n	8002a60 <HAL_PCD_EP_Open+0xc8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68f9      	ldr	r1, [r7, #12]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 f8cf 	bl	8004bf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002a5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	da0f      	bge.n	8002a9c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	f003 020f 	and.w	r2, r3, #15
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	3338      	adds	r3, #56	; 0x38
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	3304      	adds	r3, #4
 8002a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	705a      	strb	r2, [r3, #1]
 8002a9a:	e00f      	b.n	8002abc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	f003 020f 	and.w	r2, r3, #15
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_PCD_EP_Close+0x6e>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e00e      	b.n	8002af4 <HAL_PCD_EP_Close+0x8c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68f9      	ldr	r1, [r7, #12]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 f90d 	bl	8004d04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b0c:	7afb      	ldrb	r3, [r7, #11]
 8002b0e:	f003 020f 	and.w	r2, r3, #15
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4413      	add	r3, r2
 8002b22:	3304      	adds	r3, #4
 8002b24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d102      	bne.n	8002b58 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b58:	7afb      	ldrb	r3, [r7, #11]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6979      	ldr	r1, [r7, #20]
 8002b70:	f002 fbec 	bl	800534c <USB_EP0StartXfer>
 8002b74:	e008      	b.n	8002b88 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	6979      	ldr	r1, [r7, #20]
 8002b84:	f002 f99a 	bl	8004ebc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	f003 020f 	and.w	r2, r3, #15
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002bb4:	681b      	ldr	r3, [r3, #0]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd2:	7afb      	ldrb	r3, [r7, #11]
 8002bd4:	f003 020f 	and.w	r2, r3, #15
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	3338      	adds	r3, #56	; 0x38
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	3304      	adds	r3, #4
 8002be8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c02:	7afb      	ldrb	r3, [r7, #11]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d102      	bne.n	8002c1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c1c:	7afb      	ldrb	r3, [r7, #11]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	6979      	ldr	r1, [r7, #20]
 8002c34:	f002 fb8a 	bl	800534c <USB_EP0StartXfer>
 8002c38:	e008      	b.n	8002c4c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	6979      	ldr	r1, [r7, #20]
 8002c48:	f002 f938 	bl	8004ebc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	f003 020f 	and.w	r2, r3, #15
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d901      	bls.n	8002c74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e050      	b.n	8002d16 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da0f      	bge.n	8002c9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	f003 020f 	and.w	r2, r3, #15
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	3338      	adds	r3, #56	; 0x38
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	3304      	adds	r3, #4
 8002c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2201      	movs	r2, #1
 8002c98:	705a      	strb	r2, [r3, #1]
 8002c9a:	e00d      	b.n	8002cb8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	3304      	adds	r3, #4
 8002cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_PCD_EP_SetStall+0x82>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e01e      	b.n	8002d16 <HAL_PCD_EP_SetStall+0xc0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68f9      	ldr	r1, [r7, #12]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f002 fdc8 	bl	800587c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	b2d9      	uxtb	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d06:	461a      	mov	r2, r3
 8002d08:	f002 ffb8 	bl	8005c7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	f003 020f 	and.w	r2, r3, #15
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d901      	bls.n	8002d3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e042      	b.n	8002dc2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	da0f      	bge.n	8002d64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	f003 020f 	and.w	r2, r3, #15
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	3338      	adds	r3, #56	; 0x38
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	705a      	strb	r2, [r3, #1]
 8002d62:	e00f      	b.n	8002d84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 020f 	and.w	r2, r3, #15
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_PCD_EP_ClrStall+0x86>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e00e      	b.n	8002dc2 <HAL_PCD_EP_ClrStall+0xa4>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68f9      	ldr	r1, [r7, #12]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f002 fdd0 	bl	8005958 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002dd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	da0c      	bge.n	8002df8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	f003 020f 	and.w	r2, r3, #15
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	3338      	adds	r3, #56	; 0x38
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	3304      	adds	r3, #4
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	e00c      	b.n	8002e12 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 020f 	and.w	r2, r3, #15
 8002dfe:	4613      	mov	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3304      	adds	r3, #4
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68f9      	ldr	r1, [r7, #12]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 fbef 	bl	80055fc <USB_EPStopXfer>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e22:	7afb      	ldrb	r3, [r7, #11]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3338      	adds	r3, #56	; 0x38
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3304      	adds	r3, #4
 8002e52:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1a      	ldr	r2, [r3, #32]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d901      	bls.n	8002e64 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e06c      	b.n	8002f3e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d902      	bls.n	8002e80 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	3303      	adds	r3, #3
 8002e84:	089b      	lsrs	r3, r3, #2
 8002e86:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e88:	e02b      	b.n	8002ee2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d902      	bls.n	8002ea6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3303      	adds	r3, #3
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6919      	ldr	r1, [r3, #16]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6978      	ldr	r0, [r7, #20]
 8002ec6:	f002 fc43 	bl	8005750 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	441a      	add	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a1a      	ldr	r2, [r3, #32]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	441a      	add	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d809      	bhi.n	8002f0c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d203      	bcs.n	8002f0c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1be      	bne.n	8002e8a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d811      	bhi.n	8002f3c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	2201      	movs	r2, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	6939      	ldr	r1, [r7, #16]
 8002f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f38:	4013      	ands	r3, r2
 8002f3a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	333c      	adds	r3, #60	; 0x3c
 8002f60:	3304      	adds	r3, #4
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d17b      	bne.n	8003076 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d015      	beq.n	8002fb4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	4a61      	ldr	r2, [pc, #388]	; (8003110 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	f240 80b9 	bls.w	8003104 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80b3 	beq.w	8003104 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002faa:	461a      	mov	r2, r3
 8002fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb0:	6093      	str	r3, [r2, #8]
 8002fb2:	e0a7      	b.n	8003104 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2320      	movs	r3, #32
 8002fce:	6093      	str	r3, [r2, #8]
 8002fd0:	e098      	b.n	8003104 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f040 8093 	bne.w	8003104 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	4a4b      	ldr	r2, [pc, #300]	; (8003110 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d90f      	bls.n	8003006 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003002:	6093      	str	r3, [r2, #8]
 8003004:	e07e      	b.n	8003104 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	0159      	lsls	r1, r3, #5
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	440b      	add	r3, r1
 8003028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003032:	1ad2      	subs	r2, r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d114      	bne.n	8003068 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003050:	461a      	mov	r2, r3
 8003052:	2101      	movs	r1, #1
 8003054:	f002 fe12 	bl	8005c7c <USB_EP0_OutStart>
 8003058:	e006      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	441a      	add	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	4619      	mov	r1, r3
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f005 f928 	bl	80082c4 <HAL_PCD_DataOutStageCallback>
 8003074:	e046      	b.n	8003104 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	4a26      	ldr	r2, [pc, #152]	; (8003114 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d124      	bne.n	80030c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003094:	461a      	mov	r2, r3
 8003096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800309a:	6093      	str	r3, [r2, #8]
 800309c:	e032      	b.n	8003104 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b4:	461a      	mov	r2, r3
 80030b6:	2320      	movs	r3, #32
 80030b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f005 f8ff 	bl	80082c4 <HAL_PCD_DataOutStageCallback>
 80030c6:	e01d      	b.n	8003104 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d114      	bne.n	80030f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d108      	bne.n	80030f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030f0:	461a      	mov	r2, r3
 80030f2:	2100      	movs	r1, #0
 80030f4:	f002 fdc2 	bl	8005c7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f005 f8e0 	bl	80082c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	4f54300a 	.word	0x4f54300a
 8003114:	4f54310a 	.word	0x4f54310a

08003118 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	333c      	adds	r3, #60	; 0x3c
 8003130:	3304      	adds	r3, #4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d90e      	bls.n	800316c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003154:	2b00      	cmp	r3, #0
 8003156:	d009      	beq.n	800316c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003164:	461a      	mov	r2, r3
 8003166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800316a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f005 f897 	bl	80082a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d90c      	bls.n	8003194 <PCD_EP_OutSetupPacket_int+0x7c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d108      	bne.n	8003194 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800318c:	461a      	mov	r2, r3
 800318e:	2101      	movs	r1, #1
 8003190:	f002 fd74 	bl	8005c7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	4f54300a 	.word	0x4f54300a

080031a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]
 80031b0:	4613      	mov	r3, r2
 80031b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031c2:	883b      	ldrh	r3, [r7, #0]
 80031c4:	0419      	lsls	r1, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
 80031d0:	e028      	b.n	8003224 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	0c1b      	lsrs	r3, r3, #16
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	4413      	add	r3, r2
 80031de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031e0:	2300      	movs	r3, #0
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	e00d      	b.n	8003202 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	3340      	adds	r3, #64	; 0x40
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4413      	add	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	3301      	adds	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	3b01      	subs	r3, #1
 8003208:	429a      	cmp	r2, r3
 800320a:	d3ec      	bcc.n	80031e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800320c:	883b      	ldrh	r3, [r7, #0]
 800320e:	0418      	lsls	r0, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6819      	ldr	r1, [r3, #0]
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	3b01      	subs	r3, #1
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	4302      	orrs	r2, r0
 800321c:	3340      	adds	r3, #64	; 0x40
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003286:	f043 0303 	orr.w	r3, r3, #3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_PWREx_EnableOverDrive+0x90>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	4a1f      	ldr	r2, [pc, #124]	; (800332c <HAL_PWREx_EnableOverDrive+0x90>)
 80032b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b4:	6413      	str	r3, [r2, #64]	; 0x40
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_PWREx_EnableOverDrive+0x90>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_PWREx_EnableOverDrive+0x94>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c8:	f7fd fcc6 	bl	8000c58 <HAL_GetTick>
 80032cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032ce:	e009      	b.n	80032e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032d0:	f7fd fcc2 	bl	8000c58 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032de:	d901      	bls.n	80032e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e01f      	b.n	8003324 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <HAL_PWREx_EnableOverDrive+0x98>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d1ee      	bne.n	80032d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032f8:	f7fd fcae 	bl	8000c58 <HAL_GetTick>
 80032fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032fe:	e009      	b.n	8003314 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003300:	f7fd fcaa 	bl	8000c58 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800330e:	d901      	bls.n	8003314 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e007      	b.n	8003324 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003314:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_PWREx_EnableOverDrive+0x98>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003320:	d1ee      	bne.n	8003300 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	420e0040 	.word	0x420e0040
 8003334:	40007000 	.word	0x40007000
 8003338:	420e0044 	.word	0x420e0044

0800333c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0cc      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003350:	4b68      	ldr	r3, [pc, #416]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d90c      	bls.n	8003378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b63      	ldr	r3, [pc, #396]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0b8      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003390:	4b59      	ldr	r3, [pc, #356]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800339a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a8:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4a52      	ldr	r2, [pc, #328]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b4:	4b50      	ldr	r3, [pc, #320]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	494d      	ldr	r1, [pc, #308]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d044      	beq.n	800345c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d107      	bne.n	80033ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d119      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e07f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e06f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e067      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341a:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4934      	ldr	r1, [pc, #208]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800342c:	f7fd fc14 	bl	8000c58 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	e00a      	b.n	800344a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fd fc10 	bl	8000c58 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e04f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 020c 	and.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	429a      	cmp	r2, r3
 800345a:	d1eb      	bne.n	8003434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d20c      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e032      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4916      	ldr	r1, [pc, #88]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	490e      	ldr	r1, [pc, #56]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034c2:	f000 fb57 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	490a      	ldr	r1, [pc, #40]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	5ccb      	ldrb	r3, [r1, r3]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	4a09      	ldr	r2, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1c8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd fb74 	bl	8000bd0 <HAL_InitTick>

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023c00 	.word	0x40023c00
 80034f8:	40023800 	.word	0x40023800
 80034fc:	08009284 	.word	0x08009284
 8003500:	20000000 	.word	0x20000000
 8003504:	20000004 	.word	0x20000004

08003508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <HAL_RCC_GetHCLKFreq+0x14>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000000 	.word	0x20000000

08003520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	; 0x30
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003558:	4b6f      	ldr	r3, [pc, #444]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800355a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800355e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	496c      	ldr	r1, [pc, #432]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003576:	2301      	movs	r3, #1
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d010      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003586:	4b64      	ldr	r3, [pc, #400]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800358c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	4960      	ldr	r1, [pc, #384]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80035a4:	2301      	movs	r3, #1
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d017      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035b4:	4b58      	ldr	r3, [pc, #352]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4955      	ldr	r1, [pc, #340]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035d2:	d101      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80035d4:	2301      	movs	r3, #1
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80035e0:	2301      	movs	r3, #1
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d017      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035f0:	4b49      	ldr	r3, [pc, #292]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	4946      	ldr	r1, [pc, #280]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360e:	d101      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003610:	2301      	movs	r3, #1
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800361c:	2301      	movs	r3, #1
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 808a 	beq.w	8003742 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	4b39      	ldr	r3, [pc, #228]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a38      	ldr	r2, [pc, #224]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a33      	ldr	r2, [pc, #204]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003654:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003656:	f7fd faff 	bl	8000c58 <HAL_GetTick>
 800365a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800365e:	f7fd fafb 	bl	8000c58 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e278      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003670:	4b2a      	ldr	r3, [pc, #168]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800367c:	4b26      	ldr	r3, [pc, #152]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003684:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d02f      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003694:	6a3a      	ldr	r2, [r7, #32]
 8003696:	429a      	cmp	r2, r3
 8003698:	d028      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800369a:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d114      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fd fac9 	bl	8000c58 <HAL_GetTick>
 80036c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fd fac5 	bl	8000c58 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e240      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ee      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f8:	d114      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80036fa:	4b07      	ldr	r3, [pc, #28]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800370a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370e:	4902      	ldr	r1, [pc, #8]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]
 8003714:	e00c      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000
 8003720:	42470e40 	.word	0x42470e40
 8003724:	4b4a      	ldr	r3, [pc, #296]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a49      	ldr	r2, [pc, #292]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800372a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800372e:	6093      	str	r3, [r2, #8]
 8003730:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003732:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	4944      	ldr	r1, [pc, #272]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800373e:	4313      	orrs	r3, r2
 8003740:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b00      	cmp	r3, #0
 800374c:	d004      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003754:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003756:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003764:	4b3a      	ldr	r3, [pc, #232]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	4937      	ldr	r1, [pc, #220]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003786:	4b32      	ldr	r3, [pc, #200]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003794:	492e      	ldr	r1, [pc, #184]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d011      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037a8:	4b29      	ldr	r3, [pc, #164]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	4926      	ldr	r1, [pc, #152]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c6:	d101      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80037c8:	2301      	movs	r3, #1
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80037d8:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	491a      	ldr	r1, [pc, #104]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d011      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003800:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003808:	4911      	ldr	r1, [pc, #68]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003818:	d101      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800381a:	2301      	movs	r3, #1
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	2b01      	cmp	r3, #1
 8003822:	d005      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382c:	f040 80ff 	bne.w	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003836:	f7fd fa0f 	bl	8000c58 <HAL_GetTick>
 800383a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800383c:	e00e      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800383e:	f7fd fa0b 	bl	8000c58 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d907      	bls.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e188      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003850:	40023800 	.word	0x40023800
 8003854:	424711e0 	.word	0x424711e0
 8003858:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800385c:	4b7e      	ldr	r3, [pc, #504]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1ea      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003884:	2b00      	cmp	r3, #0
 8003886:	d028      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d124      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003890:	4b71      	ldr	r3, [pc, #452]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003896:	0c1b      	lsrs	r3, r3, #16
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	3301      	adds	r3, #1
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038a2:	4b6d      	ldr	r3, [pc, #436]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	019b      	lsls	r3, r3, #6
 80038ba:	431a      	orrs	r2, r3
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	3b01      	subs	r3, #1
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	431a      	orrs	r2, r3
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	061b      	lsls	r3, r3, #24
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	071b      	lsls	r3, r3, #28
 80038d2:	4961      	ldr	r1, [pc, #388]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d035      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003904:	d130      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003906:	4b54      	ldr	r3, [pc, #336]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	3301      	adds	r3, #1
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003918:	4b4f      	ldr	r3, [pc, #316]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800391a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391e:	0f1b      	lsrs	r3, r3, #28
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	019b      	lsls	r3, r3, #6
 8003930:	431a      	orrs	r2, r3
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	431a      	orrs	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	071b      	lsls	r3, r3, #28
 8003948:	4943      	ldr	r1, [pc, #268]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003950:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003956:	f023 021f 	bic.w	r2, r3, #31
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	3b01      	subs	r3, #1
 8003960:	493d      	ldr	r1, [pc, #244]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003970:	2b00      	cmp	r3, #0
 8003972:	d029      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800397c:	d124      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800397e:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	3301      	adds	r3, #1
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003990:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003996:	0f1b      	lsrs	r3, r3, #28
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	019b      	lsls	r3, r3, #6
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	431a      	orrs	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	071b      	lsls	r3, r3, #28
 80039c0:	4925      	ldr	r1, [pc, #148]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d016      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	019b      	lsls	r3, r3, #6
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	3b01      	subs	r3, #1
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	071b      	lsls	r3, r3, #28
 80039fa:	4917      	ldr	r1, [pc, #92]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a02:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a08:	f7fd f926 	bl	8000c58 <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a10:	f7fd f922 	bl	8000c58 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e09f      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	f040 8095 	bne.w	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a3c:	f7fd f90c 	bl	8000c58 <HAL_GetTick>
 8003a40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a42:	e00f      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003a44:	f7fd f908 	bl	8000c58 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d908      	bls.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e085      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	42470068 	.word	0x42470068
 8003a60:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a64:	4b41      	ldr	r3, [pc, #260]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a70:	d0e8      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d02b      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d127      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003a9a:	4b34      	ldr	r3, [pc, #208]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699a      	ldr	r2, [r3, #24]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	3b01      	subs	r3, #1
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	061b      	lsls	r3, r3, #24
 8003ac8:	4928      	ldr	r1, [pc, #160]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	4922      	ldr	r1, [pc, #136]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01d      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003afe:	d118      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	0e1b      	lsrs	r3, r3, #24
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	019b      	lsls	r3, r3, #6
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	3b01      	subs	r3, #1
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	4910      	ldr	r1, [pc, #64]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b32:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b38:	f7fd f88e 	bl	8000c58 <HAL_GetTick>
 8003b3c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b40:	f7fd f88a 	bl	8000c58 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e007      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5e:	d1ef      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3730      	adds	r7, #48	; 0x30
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	42470070 	.word	0x42470070

08003b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b78:	b0ae      	sub	sp, #184	; 0xb8
 8003b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b9a:	4bcb      	ldr	r3, [pc, #812]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	f200 8206 	bhi.w	8003fb4 <HAL_RCC_GetSysClockFreq+0x440>
 8003ba8:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003be5 	.word	0x08003be5
 8003bb4:	08003fb5 	.word	0x08003fb5
 8003bb8:	08003fb5 	.word	0x08003fb5
 8003bbc:	08003fb5 	.word	0x08003fb5
 8003bc0:	08003bed 	.word	0x08003bed
 8003bc4:	08003fb5 	.word	0x08003fb5
 8003bc8:	08003fb5 	.word	0x08003fb5
 8003bcc:	08003fb5 	.word	0x08003fb5
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003fb5 	.word	0x08003fb5
 8003bd8:	08003fb5 	.word	0x08003fb5
 8003bdc:	08003fb5 	.word	0x08003fb5
 8003be0:	08003de5 	.word	0x08003de5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4bb9      	ldr	r3, [pc, #740]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x358>)
 8003be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003bea:	e1e7      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bec:	4bb8      	ldr	r3, [pc, #736]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bf2:	e1e3      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf4:	4bb4      	ldr	r3, [pc, #720]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c00:	4bb1      	ldr	r3, [pc, #708]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d071      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0c:	4bae      	ldr	r3, [pc, #696]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c18:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c32:	4622      	mov	r2, r4
 8003c34:	462b      	mov	r3, r5
 8003c36:	f04f 0000 	mov.w	r0, #0
 8003c3a:	f04f 0100 	mov.w	r1, #0
 8003c3e:	0159      	lsls	r1, r3, #5
 8003c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c44:	0150      	lsls	r0, r2, #5
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	1a51      	subs	r1, r2, r1
 8003c4e:	6439      	str	r1, [r7, #64]	; 0x40
 8003c50:	4629      	mov	r1, r5
 8003c52:	eb63 0301 	sbc.w	r3, r3, r1
 8003c56:	647b      	str	r3, [r7, #68]	; 0x44
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003c64:	4649      	mov	r1, r9
 8003c66:	018b      	lsls	r3, r1, #6
 8003c68:	4641      	mov	r1, r8
 8003c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c6e:	4641      	mov	r1, r8
 8003c70:	018a      	lsls	r2, r1, #6
 8003c72:	4641      	mov	r1, r8
 8003c74:	1a51      	subs	r1, r2, r1
 8003c76:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c78:	4649      	mov	r1, r9
 8003c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	00cb      	lsls	r3, r1, #3
 8003c90:	4641      	mov	r1, r8
 8003c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c96:	4641      	mov	r1, r8
 8003c98:	00ca      	lsls	r2, r1, #3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4622      	mov	r2, r4
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	460a      	mov	r2, r1
 8003caa:	eb42 0303 	adc.w	r3, r2, r3
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	024b      	lsls	r3, r1, #9
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	024a      	lsls	r2, r1, #9
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cdc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ce0:	f7fc faee 	bl	80002c0 <__aeabi_uldivmod>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4613      	mov	r3, r2
 8003cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cee:	e067      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf0:	4b75      	ldr	r3, [pc, #468]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cfc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d08:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d0e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d12:	4622      	mov	r2, r4
 8003d14:	462b      	mov	r3, r5
 8003d16:	f04f 0000 	mov.w	r0, #0
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	0159      	lsls	r1, r3, #5
 8003d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d24:	0150      	lsls	r0, r2, #5
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	1a51      	subs	r1, r2, r1
 8003d2e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d30:	4629      	mov	r1, r5
 8003d32:	eb63 0301 	sbc.w	r3, r3, r1
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003d44:	4649      	mov	r1, r9
 8003d46:	018b      	lsls	r3, r1, #6
 8003d48:	4641      	mov	r1, r8
 8003d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d4e:	4641      	mov	r1, r8
 8003d50:	018a      	lsls	r2, r1, #6
 8003d52:	4641      	mov	r1, r8
 8003d54:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d58:	4649      	mov	r1, r9
 8003d5a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d72:	4692      	mov	sl, r2
 8003d74:	469b      	mov	fp, r3
 8003d76:	4623      	mov	r3, r4
 8003d78:	eb1a 0303 	adds.w	r3, sl, r3
 8003d7c:	623b      	str	r3, [r7, #32]
 8003d7e:	462b      	mov	r3, r5
 8003d80:	eb4b 0303 	adc.w	r3, fp, r3
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d92:	4629      	mov	r1, r5
 8003d94:	028b      	lsls	r3, r1, #10
 8003d96:	4621      	mov	r1, r4
 8003d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	028a      	lsls	r2, r1, #10
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003da8:	2200      	movs	r2, #0
 8003daa:	673b      	str	r3, [r7, #112]	; 0x70
 8003dac:	677a      	str	r2, [r7, #116]	; 0x74
 8003dae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003db2:	f7fc fa85 	bl	80002c0 <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4613      	mov	r3, r2
 8003dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dc0:	4b41      	ldr	r3, [pc, #260]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003de2:	e0eb      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003de4:	4b38      	ldr	r3, [pc, #224]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003df0:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d06b      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dfc:	4b32      	ldr	r3, [pc, #200]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	099b      	lsrs	r3, r3, #6
 8003e02:	2200      	movs	r2, #0
 8003e04:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e10:	2300      	movs	r3, #0
 8003e12:	667b      	str	r3, [r7, #100]	; 0x64
 8003e14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003e18:	4622      	mov	r2, r4
 8003e1a:	462b      	mov	r3, r5
 8003e1c:	f04f 0000 	mov.w	r0, #0
 8003e20:	f04f 0100 	mov.w	r1, #0
 8003e24:	0159      	lsls	r1, r3, #5
 8003e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e2a:	0150      	lsls	r0, r2, #5
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4621      	mov	r1, r4
 8003e32:	1a51      	subs	r1, r2, r1
 8003e34:	61b9      	str	r1, [r7, #24]
 8003e36:	4629      	mov	r1, r5
 8003e38:	eb63 0301 	sbc.w	r3, r3, r1
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e4a:	4659      	mov	r1, fp
 8003e4c:	018b      	lsls	r3, r1, #6
 8003e4e:	4651      	mov	r1, sl
 8003e50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e54:	4651      	mov	r1, sl
 8003e56:	018a      	lsls	r2, r1, #6
 8003e58:	4651      	mov	r1, sl
 8003e5a:	ebb2 0801 	subs.w	r8, r2, r1
 8003e5e:	4659      	mov	r1, fp
 8003e60:	eb63 0901 	sbc.w	r9, r3, r1
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e78:	4690      	mov	r8, r2
 8003e7a:	4699      	mov	r9, r3
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	eb18 0303 	adds.w	r3, r8, r3
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	462b      	mov	r3, r5
 8003e86:	eb49 0303 	adc.w	r3, r9, r3
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e98:	4629      	mov	r1, r5
 8003e9a:	024b      	lsls	r3, r1, #9
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	024a      	lsls	r2, r1, #9
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eae:	2200      	movs	r2, #0
 8003eb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eb2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003eb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003eb8:	f7fc fa02 	bl	80002c0 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec6:	e065      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x420>
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	00f42400 	.word	0x00f42400
 8003ed0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed4:	4b3d      	ldr	r3, [pc, #244]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x458>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	099b      	lsrs	r3, r3, #6
 8003eda:	2200      	movs	r2, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	4611      	mov	r1, r2
 8003ee0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ee4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	657b      	str	r3, [r7, #84]	; 0x54
 8003eea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003eee:	4642      	mov	r2, r8
 8003ef0:	464b      	mov	r3, r9
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	0159      	lsls	r1, r3, #5
 8003efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f00:	0150      	lsls	r0, r2, #5
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4641      	mov	r1, r8
 8003f08:	1a51      	subs	r1, r2, r1
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f20:	4659      	mov	r1, fp
 8003f22:	018b      	lsls	r3, r1, #6
 8003f24:	4651      	mov	r1, sl
 8003f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f2a:	4651      	mov	r1, sl
 8003f2c:	018a      	lsls	r2, r1, #6
 8003f2e:	4651      	mov	r1, sl
 8003f30:	1a54      	subs	r4, r2, r1
 8003f32:	4659      	mov	r1, fp
 8003f34:	eb63 0501 	sbc.w	r5, r3, r1
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	00eb      	lsls	r3, r5, #3
 8003f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f46:	00e2      	lsls	r2, r4, #3
 8003f48:	4614      	mov	r4, r2
 8003f4a:	461d      	mov	r5, r3
 8003f4c:	4643      	mov	r3, r8
 8003f4e:	18e3      	adds	r3, r4, r3
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	464b      	mov	r3, r9
 8003f54:	eb45 0303 	adc.w	r3, r5, r3
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f66:	4629      	mov	r1, r5
 8003f68:	028b      	lsls	r3, r1, #10
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f70:	4621      	mov	r1, r4
 8003f72:	028a      	lsls	r2, r1, #10
 8003f74:	4610      	mov	r0, r2
 8003f76:	4619      	mov	r1, r3
 8003f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f80:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003f82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f86:	f7fc f99b 	bl	80002c0 <__aeabi_uldivmod>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4613      	mov	r3, r2
 8003f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f94:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x458>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	0f1b      	lsrs	r3, r3, #28
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fb2:	e003      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	37b8      	adds	r7, #184	; 0xb8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	00f42400 	.word	0x00f42400

08003fd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e28d      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8083 	beq.w	80040fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ff4:	4b94      	ldr	r3, [pc, #592]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d019      	beq.n	8004034 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004000:	4b91      	ldr	r3, [pc, #580]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004008:	2b08      	cmp	r3, #8
 800400a:	d106      	bne.n	800401a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800400c:	4b8e      	ldr	r3, [pc, #568]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004018:	d00c      	beq.n	8004034 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800401a:	4b8b      	ldr	r3, [pc, #556]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d112      	bne.n	800404c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004026:	4b88      	ldr	r3, [pc, #544]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004032:	d10b      	bne.n	800404c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	4b84      	ldr	r3, [pc, #528]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05b      	beq.n	80040f8 <HAL_RCC_OscConfig+0x124>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d157      	bne.n	80040f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e25a      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d106      	bne.n	8004064 <HAL_RCC_OscConfig+0x90>
 8004056:	4b7c      	ldr	r3, [pc, #496]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a7b      	ldr	r2, [pc, #492]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e01d      	b.n	80040a0 <HAL_RCC_OscConfig+0xcc>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0xb4>
 800406e:	4b76      	ldr	r3, [pc, #472]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a75      	ldr	r2, [pc, #468]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b73      	ldr	r3, [pc, #460]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a72      	ldr	r2, [pc, #456]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0xcc>
 8004088:	4b6f      	ldr	r3, [pc, #444]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a6e      	ldr	r2, [pc, #440]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b6c      	ldr	r3, [pc, #432]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a6b      	ldr	r2, [pc, #428]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800409a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fc fdd6 	bl	8000c58 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fc fdd2 	bl	8000c58 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e21f      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c2:	4b61      	ldr	r3, [pc, #388]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0xdc>
 80040ce:	e014      	b.n	80040fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fc fdc2 	bl	8000c58 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fc fdbe 	bl	8000c58 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e20b      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ea:	4b57      	ldr	r3, [pc, #348]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x104>
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d06f      	beq.n	80041e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004106:	4b50      	ldr	r3, [pc, #320]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b00      	cmp	r3, #0
 8004110:	d017      	beq.n	8004142 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004112:	4b4d      	ldr	r3, [pc, #308]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800411a:	2b08      	cmp	r3, #8
 800411c:	d105      	bne.n	800412a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800411e:	4b4a      	ldr	r3, [pc, #296]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412a:	4b47      	ldr	r3, [pc, #284]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004132:	2b0c      	cmp	r3, #12
 8004134:	d11c      	bne.n	8004170 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004136:	4b44      	ldr	r3, [pc, #272]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d116      	bne.n	8004170 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004142:	4b41      	ldr	r3, [pc, #260]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_RCC_OscConfig+0x186>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d001      	beq.n	800415a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e1d3      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415a:	4b3b      	ldr	r3, [pc, #236]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4937      	ldr	r1, [pc, #220]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	e03a      	b.n	80041e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004178:	4b34      	ldr	r3, [pc, #208]	; (800424c <HAL_RCC_OscConfig+0x278>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7fc fd6b 	bl	8000c58 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004186:	f7fc fd67 	bl	8000c58 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e1b4      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004198:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a4:	4b28      	ldr	r3, [pc, #160]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4925      	ldr	r1, [pc, #148]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	600b      	str	r3, [r1, #0]
 80041b8:	e015      	b.n	80041e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <HAL_RCC_OscConfig+0x278>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fc fd4a 	bl	8000c58 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c8:	f7fc fd46 	bl	8000c58 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e193      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041da:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d036      	beq.n	8004260 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d016      	beq.n	8004228 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <HAL_RCC_OscConfig+0x27c>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004200:	f7fc fd2a 	bl	8000c58 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004208:	f7fc fd26 	bl	8000c58 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e173      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421a:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 800421c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0x234>
 8004226:	e01b      	b.n	8004260 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_RCC_OscConfig+0x27c>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fc fd13 	bl	8000c58 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004234:	e00e      	b.n	8004254 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004236:	f7fc fd0f 	bl	8000c58 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d907      	bls.n	8004254 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e15c      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
 8004248:	40023800 	.word	0x40023800
 800424c:	42470000 	.word	0x42470000
 8004250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004254:	4b8a      	ldr	r3, [pc, #552]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ea      	bne.n	8004236 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8097 	beq.w	800439c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426e:	2300      	movs	r3, #0
 8004270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004272:	4b83      	ldr	r3, [pc, #524]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	4b7f      	ldr	r3, [pc, #508]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	4a7e      	ldr	r2, [pc, #504]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
 800428e:	4b7c      	ldr	r3, [pc, #496]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429a:	2301      	movs	r3, #1
 800429c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429e:	4b79      	ldr	r3, [pc, #484]	; (8004484 <HAL_RCC_OscConfig+0x4b0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d118      	bne.n	80042dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042aa:	4b76      	ldr	r3, [pc, #472]	; (8004484 <HAL_RCC_OscConfig+0x4b0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a75      	ldr	r2, [pc, #468]	; (8004484 <HAL_RCC_OscConfig+0x4b0>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b6:	f7fc fccf 	bl	8000c58 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042be:	f7fc fccb 	bl	8000c58 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e118      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d0:	4b6c      	ldr	r3, [pc, #432]	; (8004484 <HAL_RCC_OscConfig+0x4b0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d106      	bne.n	80042f2 <HAL_RCC_OscConfig+0x31e>
 80042e4:	4b66      	ldr	r3, [pc, #408]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	4a65      	ldr	r2, [pc, #404]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6713      	str	r3, [r2, #112]	; 0x70
 80042f0:	e01c      	b.n	800432c <HAL_RCC_OscConfig+0x358>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b05      	cmp	r3, #5
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0x340>
 80042fa:	4b61      	ldr	r3, [pc, #388]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	4a60      	ldr	r2, [pc, #384]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004300:	f043 0304 	orr.w	r3, r3, #4
 8004304:	6713      	str	r3, [r2, #112]	; 0x70
 8004306:	4b5e      	ldr	r3, [pc, #376]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	4a5d      	ldr	r2, [pc, #372]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	6713      	str	r3, [r2, #112]	; 0x70
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0x358>
 8004314:	4b5a      	ldr	r3, [pc, #360]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a59      	ldr	r2, [pc, #356]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
 8004320:	4b57      	ldr	r3, [pc, #348]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a56      	ldr	r2, [pc, #344]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004326:	f023 0304 	bic.w	r3, r3, #4
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fc fc90 	bl	8000c58 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433a:	e00a      	b.n	8004352 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fc fc8c 	bl	8000c58 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e0d7      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004352:	4b4b      	ldr	r3, [pc, #300]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0ee      	beq.n	800433c <HAL_RCC_OscConfig+0x368>
 800435e:	e014      	b.n	800438a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fc fc7a 	bl	8000c58 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004366:	e00a      	b.n	800437e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	f7fc fc76 	bl	8000c58 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	; 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e0c1      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437e:	4b40      	ldr	r3, [pc, #256]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1ee      	bne.n	8004368 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d105      	bne.n	800439c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004390:	4b3b      	ldr	r3, [pc, #236]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	4a3a      	ldr	r2, [pc, #232]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80ad 	beq.w	8004500 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043a6:	4b36      	ldr	r3, [pc, #216]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d060      	beq.n	8004474 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d145      	bne.n	8004446 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ba:	4b33      	ldr	r3, [pc, #204]	; (8004488 <HAL_RCC_OscConfig+0x4b4>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fc fc4a 	bl	8000c58 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fc fc46 	bl	8000c58 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e093      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043da:	4b29      	ldr	r3, [pc, #164]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	019b      	lsls	r3, r3, #6
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	3b01      	subs	r3, #1
 8004400:	041b      	lsls	r3, r3, #16
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	061b      	lsls	r3, r3, #24
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	071b      	lsls	r3, r3, #28
 8004412:	491b      	ldr	r1, [pc, #108]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004414:	4313      	orrs	r3, r2
 8004416:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <HAL_RCC_OscConfig+0x4b4>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fc fc1b 	bl	8000c58 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004426:	f7fc fc17 	bl	8000c58 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e064      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x452>
 8004444:	e05c      	b.n	8004500 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <HAL_RCC_OscConfig+0x4b4>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fc fc04 	bl	8000c58 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004454:	f7fc fc00 	bl	8000c58 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e04d      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_RCC_OscConfig+0x4ac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x480>
 8004472:	e045      	b.n	8004500 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d107      	bne.n	800448c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e040      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
 8004480:	40023800 	.word	0x40023800
 8004484:	40007000 	.word	0x40007000
 8004488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800448c:	4b1f      	ldr	r3, [pc, #124]	; (800450c <HAL_RCC_OscConfig+0x538>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d030      	beq.n	80044fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d129      	bne.n	80044fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d122      	bne.n	80044fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044bc:	4013      	ands	r3, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d119      	bne.n	80044fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	3b01      	subs	r3, #1
 80044d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d10f      	bne.n	80044fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800

08004510 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004510:	b084      	sub	sp, #16
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	f107 001c 	add.w	r0, r7, #28
 800451e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	2b01      	cmp	r3, #1
 8004526:	d122      	bne.n	800456e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800453c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d105      	bne.n	8004562 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f001 fbe8 	bl	8005d38 <USB_CoreReset>
 8004568:	4603      	mov	r3, r0
 800456a:	73fb      	strb	r3, [r7, #15]
 800456c:	e01a      	b.n	80045a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f001 fbdc 	bl	8005d38 <USB_CoreReset>
 8004580:	4603      	mov	r3, r0
 8004582:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
 8004596:	e005      	b.n	80045a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d10b      	bne.n	80045c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f043 0206 	orr.w	r2, r3, #6
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f043 0220 	orr.w	r2, r3, #32
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ce:	b004      	add	sp, #16
 80045d0:	4770      	bx	lr
	...

080045d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	4613      	mov	r3, r2
 80045e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d165      	bne.n	80046b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a41      	ldr	r2, [pc, #260]	; (80046f0 <USB_SetTurnaroundTime+0x11c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d906      	bls.n	80045fe <USB_SetTurnaroundTime+0x2a>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4a40      	ldr	r2, [pc, #256]	; (80046f4 <USB_SetTurnaroundTime+0x120>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d202      	bcs.n	80045fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045f8:	230f      	movs	r3, #15
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e062      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4a3c      	ldr	r2, [pc, #240]	; (80046f4 <USB_SetTurnaroundTime+0x120>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d306      	bcc.n	8004614 <USB_SetTurnaroundTime+0x40>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4a3b      	ldr	r2, [pc, #236]	; (80046f8 <USB_SetTurnaroundTime+0x124>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d202      	bcs.n	8004614 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800460e:	230e      	movs	r3, #14
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e057      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4a38      	ldr	r2, [pc, #224]	; (80046f8 <USB_SetTurnaroundTime+0x124>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d306      	bcc.n	800462a <USB_SetTurnaroundTime+0x56>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4a37      	ldr	r2, [pc, #220]	; (80046fc <USB_SetTurnaroundTime+0x128>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d202      	bcs.n	800462a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004624:	230d      	movs	r3, #13
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e04c      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4a33      	ldr	r2, [pc, #204]	; (80046fc <USB_SetTurnaroundTime+0x128>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d306      	bcc.n	8004640 <USB_SetTurnaroundTime+0x6c>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a32      	ldr	r2, [pc, #200]	; (8004700 <USB_SetTurnaroundTime+0x12c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d802      	bhi.n	8004640 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800463a:	230c      	movs	r3, #12
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e041      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4a2f      	ldr	r2, [pc, #188]	; (8004700 <USB_SetTurnaroundTime+0x12c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d906      	bls.n	8004656 <USB_SetTurnaroundTime+0x82>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4a2e      	ldr	r2, [pc, #184]	; (8004704 <USB_SetTurnaroundTime+0x130>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d802      	bhi.n	8004656 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004650:	230b      	movs	r3, #11
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e036      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4a2a      	ldr	r2, [pc, #168]	; (8004704 <USB_SetTurnaroundTime+0x130>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d906      	bls.n	800466c <USB_SetTurnaroundTime+0x98>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a29      	ldr	r2, [pc, #164]	; (8004708 <USB_SetTurnaroundTime+0x134>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d802      	bhi.n	800466c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004666:	230a      	movs	r3, #10
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e02b      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4a26      	ldr	r2, [pc, #152]	; (8004708 <USB_SetTurnaroundTime+0x134>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d906      	bls.n	8004682 <USB_SetTurnaroundTime+0xae>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a25      	ldr	r2, [pc, #148]	; (800470c <USB_SetTurnaroundTime+0x138>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d202      	bcs.n	8004682 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800467c:	2309      	movs	r3, #9
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e020      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4a21      	ldr	r2, [pc, #132]	; (800470c <USB_SetTurnaroundTime+0x138>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d306      	bcc.n	8004698 <USB_SetTurnaroundTime+0xc4>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4a20      	ldr	r2, [pc, #128]	; (8004710 <USB_SetTurnaroundTime+0x13c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d802      	bhi.n	8004698 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004692:	2308      	movs	r3, #8
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e015      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <USB_SetTurnaroundTime+0x13c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d906      	bls.n	80046ae <USB_SetTurnaroundTime+0xda>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <USB_SetTurnaroundTime+0x140>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d202      	bcs.n	80046ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046a8:	2307      	movs	r3, #7
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e00a      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046ae:	2306      	movs	r3, #6
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	e007      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d102      	bne.n	80046c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046ba:	2309      	movs	r3, #9
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e001      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046c0:	2309      	movs	r3, #9
 80046c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	029b      	lsls	r3, r3, #10
 80046d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046dc:	431a      	orrs	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	00d8acbf 	.word	0x00d8acbf
 80046f4:	00e4e1c0 	.word	0x00e4e1c0
 80046f8:	00f42400 	.word	0x00f42400
 80046fc:	01067380 	.word	0x01067380
 8004700:	011a499f 	.word	0x011a499f
 8004704:	01312cff 	.word	0x01312cff
 8004708:	014ca43f 	.word	0x014ca43f
 800470c:	016e3600 	.word	0x016e3600
 8004710:	01a6ab1f 	.word	0x01a6ab1f
 8004714:	01e84800 	.word	0x01e84800

08004718 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f043 0201 	orr.w	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f023 0201 	bic.w	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d115      	bne.n	80047aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800478a:	2001      	movs	r0, #1
 800478c:	f7fc fa70 	bl	8000c70 <HAL_Delay>
      ms++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3301      	adds	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f001 fa3f 	bl	8005c1a <USB_GetMode>
 800479c:	4603      	mov	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d01e      	beq.n	80047e0 <USB_SetCurrentMode+0x84>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b31      	cmp	r3, #49	; 0x31
 80047a6:	d9f0      	bls.n	800478a <USB_SetCurrentMode+0x2e>
 80047a8:	e01a      	b.n	80047e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d115      	bne.n	80047dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047bc:	2001      	movs	r0, #1
 80047be:	f7fc fa57 	bl	8000c70 <HAL_Delay>
      ms++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f001 fa26 	bl	8005c1a <USB_GetMode>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <USB_SetCurrentMode+0x84>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b31      	cmp	r3, #49	; 0x31
 80047d8:	d9f0      	bls.n	80047bc <USB_SetCurrentMode+0x60>
 80047da:	e001      	b.n	80047e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e005      	b.n	80047ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b32      	cmp	r3, #50	; 0x32
 80047e4:	d101      	bne.n	80047ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047f4:	b084      	sub	sp, #16
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b086      	sub	sp, #24
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	e009      	b.n	8004828 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	3340      	adds	r3, #64	; 0x40
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	2200      	movs	r2, #0
 8004820:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	3301      	adds	r3, #1
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b0e      	cmp	r3, #14
 800482c:	d9f2      	bls.n	8004814 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800482e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d11c      	bne.n	800486e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004842:	f043 0302 	orr.w	r3, r3, #2
 8004846:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e005      	b.n	800487a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004880:	461a      	mov	r2, r3
 8004882:	2300      	movs	r3, #0
 8004884:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488c:	4619      	mov	r1, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004894:	461a      	mov	r2, r3
 8004896:	680b      	ldr	r3, [r1, #0]
 8004898:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10c      	bne.n	80048ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048a6:	2100      	movs	r1, #0
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f965 	bl	8004b78 <USB_SetDevSpeed>
 80048ae:	e008      	b.n	80048c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048b0:	2101      	movs	r1, #1
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f960 	bl	8004b78 <USB_SetDevSpeed>
 80048b8:	e003      	b.n	80048c2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048ba:	2103      	movs	r1, #3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f95b 	bl	8004b78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048c2:	2110      	movs	r1, #16
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f8f3 	bl	8004ab0 <USB_FlushTxFifo>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f91f 	bl	8004b18 <USB_FlushRxFifo>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ea:	461a      	mov	r2, r3
 80048ec:	2300      	movs	r3, #0
 80048ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	461a      	mov	r2, r3
 80048f8:	2300      	movs	r3, #0
 80048fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	461a      	mov	r2, r3
 8004904:	2300      	movs	r3, #0
 8004906:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004908:	2300      	movs	r3, #0
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	e043      	b.n	8004996 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004924:	d118      	bne.n	8004958 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004938:	461a      	mov	r2, r3
 800493a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e013      	b.n	800496a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494e:	461a      	mov	r2, r3
 8004950:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e008      	b.n	800496a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	461a      	mov	r2, r3
 8004966:	2300      	movs	r3, #0
 8004968:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004976:	461a      	mov	r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004988:	461a      	mov	r2, r3
 800498a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800498e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	3301      	adds	r3, #1
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	429a      	cmp	r2, r3
 800499c:	d3b7      	bcc.n	800490e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	e043      	b.n	8004a2c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ba:	d118      	bne.n	80049ee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ce:	461a      	mov	r2, r3
 80049d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	e013      	b.n	8004a00 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e4:	461a      	mov	r2, r3
 80049e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e008      	b.n	8004a00 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	461a      	mov	r2, r3
 80049fc:	2300      	movs	r3, #0
 80049fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2300      	movs	r3, #0
 8004a10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d3b7      	bcc.n	80049a4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f043 0210 	orr.w	r2, r3, #16
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699a      	ldr	r2, [r3, #24]
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <USB_DevInit+0x2b8>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f043 0208 	orr.w	r2, r3, #8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d107      	bne.n	8004a9c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a94:	f043 0304 	orr.w	r3, r3, #4
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aa8:	b004      	add	sp, #16
 8004aaa:	4770      	bx	lr
 8004aac:	803c3800 	.word	0x803c3800

08004ab0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <USB_FlushTxFifo+0x64>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d901      	bls.n	8004ad0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e01b      	b.n	8004b08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	daf2      	bge.n	8004abe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	019b      	lsls	r3, r3, #6
 8004ae0:	f043 0220 	orr.w	r2, r3, #32
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3301      	adds	r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <USB_FlushTxFifo+0x64>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e006      	b.n	8004b08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d0f0      	beq.n	8004ae8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	00030d40 	.word	0x00030d40

08004b18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a11      	ldr	r2, [pc, #68]	; (8004b74 <USB_FlushRxFifo+0x5c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e018      	b.n	8004b68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	daf2      	bge.n	8004b24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2210      	movs	r2, #16
 8004b46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <USB_FlushRxFifo+0x5c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e006      	b.n	8004b68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b10      	cmp	r3, #16
 8004b64:	d0f0      	beq.n	8004b48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	00030d40 	.word	0x00030d40

08004b78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	68f9      	ldr	r1, [r7, #12]
 8004b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b087      	sub	sp, #28
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0306 	and.w	r3, r3, #6
 8004bc2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	75fb      	strb	r3, [r7, #23]
 8004bce:	e00a      	b.n	8004be6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d002      	beq.n	8004bdc <USB_GetDevSpeed+0x32>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b06      	cmp	r3, #6
 8004bda:	d102      	bne.n	8004be2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	75fb      	strb	r3, [r7, #23]
 8004be0:	e001      	b.n	8004be6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004be2:	230f      	movs	r3, #15
 8004be4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d13a      	bne.n	8004c86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	2101      	movs	r1, #1
 8004c22:	fa01 f303 	lsl.w	r3, r1, r3
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	68f9      	ldr	r1, [r7, #12]
 8004c2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d155      	bne.n	8004cf4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	791b      	ldrb	r3, [r3, #4]
 8004c62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	059b      	lsls	r3, r3, #22
 8004c6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e036      	b.n	8004cf4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	2101      	movs	r1, #1
 8004c98:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	68f9      	ldr	r1, [r7, #12]
 8004ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d11a      	bne.n	8004cf4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	791b      	ldrb	r3, [r3, #4]
 8004cd8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	0151      	lsls	r1, r2, #5
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
	...

08004d04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d161      	bne.n	8004de4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d36:	d11f      	bne.n	8004d78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	2101      	movs	r1, #1
 8004d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d98:	4013      	ands	r3, r2
 8004d9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	2101      	movs	r1, #1
 8004dae:	fa01 f303 	lsl.w	r3, r1, r3
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	68f9      	ldr	r1, [r7, #12]
 8004db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	0159      	lsls	r1, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	440b      	add	r3, r1
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4b35      	ldr	r3, [pc, #212]	; (8004eb4 <USB_DeactivateEndpoint+0x1b0>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]
 8004de2:	e060      	b.n	8004ea6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfa:	d11f      	bne.n	8004e3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	43db      	mvns	r3, r3
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	2101      	movs	r1, #1
 8004e72:	fa01 f303 	lsl.w	r3, r1, r3
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e80:	4013      	ands	r3, r2
 8004e82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	0159      	lsls	r1, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	440b      	add	r3, r1
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <USB_DeactivateEndpoint+0x1b4>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	ec337800 	.word	0xec337800
 8004eb8:	eff37800 	.word	0xeff37800

08004ebc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	785b      	ldrb	r3, [r3, #1]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	f040 815c 	bne.w	8005196 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d132      	bne.n	8004f4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f44:	0cdb      	lsrs	r3, r3, #19
 8004f46:	04db      	lsls	r3, r3, #19
 8004f48:	6113      	str	r3, [r2, #16]
 8004f4a:	e074      	b.n	8005036 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f66:	0cdb      	lsrs	r3, r3, #19
 8004f68:	04db      	lsls	r3, r3, #19
 8004f6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6999      	ldr	r1, [r3, #24]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	440b      	add	r3, r1
 8004fa8:	1e59      	subs	r1, r3, #1
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fb2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fb4:	4b9d      	ldr	r3, [pc, #628]	; (800522c <USB_EPStartXfer+0x370>)
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	69b9      	ldr	r1, [r7, #24]
 8004fba:	0148      	lsls	r0, r1, #5
 8004fbc:	69f9      	ldr	r1, [r7, #28]
 8004fbe:	4401      	add	r1, r0
 8004fc0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fde:	69b9      	ldr	r1, [r7, #24]
 8004fe0:	0148      	lsls	r0, r1, #5
 8004fe2:	69f9      	ldr	r1, [r7, #28]
 8004fe4:	4401      	add	r1, r0
 8004fe6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fea:	4313      	orrs	r3, r2
 8004fec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	791b      	ldrb	r3, [r3, #4]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d11f      	bne.n	8005036 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005010:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005014:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005030:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005034:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d14b      	bne.n	80050d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d009      	beq.n	8005058 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	461a      	mov	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	791b      	ldrb	r3, [r3, #4]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d128      	bne.n	80050b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d110      	bne.n	8005092 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	440a      	add	r2, r1
 8005086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	e00f      	b.n	80050b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e133      	b.n	800533c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	791b      	ldrb	r3, [r3, #4]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d015      	beq.n	8005128 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 811b 	beq.w	800533c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	2101      	movs	r1, #1
 8005118:	fa01 f303 	lsl.w	r3, r1, r3
 800511c:	69f9      	ldr	r1, [r7, #28]
 800511e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005122:	4313      	orrs	r3, r2
 8005124:	634b      	str	r3, [r1, #52]	; 0x34
 8005126:	e109      	b.n	800533c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d110      	bne.n	800515a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005152:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	e00f      	b.n	800517a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005178:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6919      	ldr	r1, [r3, #16]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	781a      	ldrb	r2, [r3, #0]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	b298      	uxth	r0, r3
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4603      	mov	r3, r0
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fade 	bl	8005750 <USB_WritePacket>
 8005194:	e0d2      	b.n	800533c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b0:	0cdb      	lsrs	r3, r3, #19
 80051b2:	04db      	lsls	r3, r3, #19
 80051b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d126      	bne.n	8005230 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f8:	69b9      	ldr	r1, [r7, #24]
 80051fa:	0148      	lsls	r0, r1, #5
 80051fc:	69f9      	ldr	r1, [r7, #28]
 80051fe:	4401      	add	r1, r0
 8005200:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005204:	4313      	orrs	r3, r2
 8005206:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005222:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005226:	6113      	str	r3, [r2, #16]
 8005228:	e03a      	b.n	80052a0 <USB_EPStartXfer+0x3e4>
 800522a:	bf00      	nop
 800522c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	699a      	ldr	r2, [r3, #24]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	4413      	add	r3, r2
 800523a:	1e5a      	subs	r2, r3, #1
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	8afa      	ldrh	r2, [r7, #22]
 800524c:	fb03 f202 	mul.w	r2, r3, r2
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	8afb      	ldrh	r3, [r7, #22]
 8005264:	04d9      	lsls	r1, r3, #19
 8005266:	4b38      	ldr	r3, [pc, #224]	; (8005348 <USB_EPStartXfer+0x48c>)
 8005268:	400b      	ands	r3, r1
 800526a:	69b9      	ldr	r1, [r7, #24]
 800526c:	0148      	lsls	r0, r1, #5
 800526e:	69f9      	ldr	r1, [r7, #28]
 8005270:	4401      	add	r1, r0
 8005272:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005276:	4313      	orrs	r3, r2
 8005278:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005290:	69b9      	ldr	r1, [r7, #24]
 8005292:	0148      	lsls	r0, r1, #5
 8005294:	69f9      	ldr	r1, [r7, #28]
 8005296:	4401      	add	r1, r0
 8005298:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800529c:	4313      	orrs	r3, r2
 800529e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d10d      	bne.n	80052c2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d009      	beq.n	80052c2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6919      	ldr	r1, [r3, #16]
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	460a      	mov	r2, r1
 80052c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	791b      	ldrb	r3, [r3, #4]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d128      	bne.n	800531c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d110      	bne.n	80052fc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e00f      	b.n	800531c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	0151      	lsls	r1, r2, #5
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	440a      	add	r2, r1
 8005312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005336:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800533a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	1ff80000 	.word	0x1ff80000

0800534c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	4613      	mov	r3, r2
 8005358:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	2b01      	cmp	r3, #1
 800536a:	f040 80ce 	bne.w	800550a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d132      	bne.n	80053dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005390:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005394:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005398:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d4:	0cdb      	lsrs	r3, r3, #19
 80053d6:	04db      	lsls	r3, r3, #19
 80053d8:	6113      	str	r3, [r2, #16]
 80053da:	e04e      	b.n	800547a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f6:	0cdb      	lsrs	r3, r3, #19
 80053f8:	04db      	lsls	r3, r3, #19
 80053fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005416:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800541a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800541e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	429a      	cmp	r2, r3
 800542a:	d903      	bls.n	8005434 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005452:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800546a:	6939      	ldr	r1, [r7, #16]
 800546c:	0148      	lsls	r0, r1, #5
 800546e:	6979      	ldr	r1, [r7, #20]
 8005470:	4401      	add	r1, r0
 8005472:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005476:	4313      	orrs	r3, r2
 8005478:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d11e      	bne.n	80054be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d009      	beq.n	800549c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005494:	461a      	mov	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	0151      	lsls	r1, r2, #5
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	440a      	add	r2, r1
 80054b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	e097      	b.n	80055ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 8083 	beq.w	80055ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	2101      	movs	r1, #1
 80054fa:	fa01 f303 	lsl.w	r3, r1, r3
 80054fe:	6979      	ldr	r1, [r7, #20]
 8005500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005504:	4313      	orrs	r3, r2
 8005506:	634b      	str	r3, [r1, #52]	; 0x34
 8005508:	e071      	b.n	80055ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	0151      	lsls	r1, r2, #5
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	440a      	add	r2, r1
 8005520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005524:	0cdb      	lsrs	r3, r3, #19
 8005526:	04db      	lsls	r3, r3, #19
 8005528:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005544:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005548:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800554c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005584:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559c:	6939      	ldr	r1, [r7, #16]
 800559e:	0148      	lsls	r0, r1, #5
 80055a0:	6979      	ldr	r1, [r7, #20]
 80055a2:	4401      	add	r1, r0
 80055a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055a8:	4313      	orrs	r3, r2
 80055aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d10d      	bne.n	80055ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6919      	ldr	r1, [r3, #16]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	460a      	mov	r2, r1
 80055cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	0151      	lsls	r1, r2, #5
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	440a      	add	r2, r1
 80055e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d14a      	bne.n	80056b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800562e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005632:	f040 8086 	bne.w	8005742 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	7812      	ldrb	r2, [r2, #0]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005654:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005658:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	7812      	ldrb	r2, [r2, #0]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	440a      	add	r2, r1
 8005674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800567c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f242 7210 	movw	r2, #10000	; 0x2710
 800568a:	4293      	cmp	r3, r2
 800568c:	d902      	bls.n	8005694 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
          break;
 8005692:	e056      	b.n	8005742 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ac:	d0e7      	beq.n	800567e <USB_EPStopXfer+0x82>
 80056ae:	e048      	b.n	8005742 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c8:	d13b      	bne.n	8005742 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	7812      	ldrb	r2, [r2, #0]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	7812      	ldrb	r2, [r2, #0]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005710:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f242 7210 	movw	r2, #10000	; 0x2710
 800571e:	4293      	cmp	r3, r2
 8005720:	d902      	bls.n	8005728 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	75fb      	strb	r3, [r7, #23]
          break;
 8005726:	e00c      	b.n	8005742 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800573c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005740:	d0e7      	beq.n	8005712 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005750:	b480      	push	{r7}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	460b      	mov	r3, r1
 8005760:	71fb      	strb	r3, [r7, #7]
 8005762:	4613      	mov	r3, r2
 8005764:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800576e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	d123      	bne.n	80057be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005776:	88bb      	ldrh	r3, [r7, #4]
 8005778:	3303      	adds	r3, #3
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	e018      	b.n	80057b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	031a      	lsls	r2, r3, #12
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	4413      	add	r3, r2
 800578c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005790:	461a      	mov	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	3301      	adds	r3, #1
 800579c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3301      	adds	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	3301      	adds	r3, #1
 80057a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	3301      	adds	r3, #1
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d3e2      	bcc.n	8005784 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3724      	adds	r7, #36	; 0x24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b08b      	sub	sp, #44	; 0x2c
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	089b      	lsrs	r3, r3, #2
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057f2:	2300      	movs	r3, #0
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	e014      	b.n	8005822 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	601a      	str	r2, [r3, #0]
    pDest++;
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	3301      	adds	r3, #1
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	3301      	adds	r3, #1
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	3301      	adds	r3, #1
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	3301      	adds	r3, #1
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	3301      	adds	r3, #1
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	6a3a      	ldr	r2, [r7, #32]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	429a      	cmp	r2, r3
 8005828:	d3e6      	bcc.n	80057f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800582a:	8bfb      	ldrh	r3, [r7, #30]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01e      	beq.n	800586e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583a:	461a      	mov	r2, r3
 800583c:	f107 0310 	add.w	r3, r7, #16
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
 8005850:	b2da      	uxtb	r2, r3
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	701a      	strb	r2, [r3, #0]
      i++;
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	3301      	adds	r3, #1
 800585a:	623b      	str	r3, [r7, #32]
      pDest++;
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	3301      	adds	r3, #1
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005862:	8bfb      	ldrh	r3, [r7, #30]
 8005864:	3b01      	subs	r3, #1
 8005866:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005868:	8bfb      	ldrh	r3, [r7, #30]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1ea      	bne.n	8005844 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005870:	4618      	mov	r0, r3
 8005872:	372c      	adds	r7, #44	; 0x2c
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d12c      	bne.n	80058f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	db12      	blt.n	80058d0 <USB_EPSetStall+0x54>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00f      	beq.n	80058d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	e02b      	b.n	800594a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	db12      	blt.n	800592a <USB_EPSetStall+0xae>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00f      	beq.n	800592a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	440a      	add	r2, r1
 8005920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005924:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005928:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	440a      	add	r2, r1
 8005940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005944:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005948:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d128      	bne.n	80059c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005992:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	791b      	ldrb	r3, [r3, #4]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d003      	beq.n	80059a4 <USB_EPClearStall+0x4c>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	791b      	ldrb	r3, [r3, #4]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d138      	bne.n	8005a16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	e027      	b.n	8005a16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	791b      	ldrb	r3, [r3, #4]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d003      	beq.n	80059f6 <USB_EPClearStall+0x9e>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	791b      	ldrb	r3, [r3, #4]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d10f      	bne.n	8005a16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a58:	68f9      	ldr	r1, [r7, #12]
 8005a5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a9e:	f023 0302 	bic.w	r3, r3, #2
 8005aa2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005acc:	f023 0303 	bic.w	r3, r3, #3
 8005ad0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae0:	f043 0302 	orr.w	r3, r3, #2
 8005ae4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	0c1b      	lsrs	r3, r3, #16
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	b29b      	uxth	r3, r3
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4013      	ands	r3, r2
 8005bae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b087      	sub	sp, #28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	fa22 f303 	lsr.w	r3, r2, r3
 8005bee:	01db      	lsls	r3, r3, #7
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f003 0301 	and.w	r3, r3, #1
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c54:	f023 0307 	bic.w	r3, r3, #7
 8005c58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	460b      	mov	r3, r1
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	333c      	adds	r3, #60	; 0x3c
 8005c92:	3304      	adds	r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4a26      	ldr	r2, [pc, #152]	; (8005d34 <USB_EP0_OutStart+0xb8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d90a      	bls.n	8005cb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cb0:	d101      	bne.n	8005cb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e037      	b.n	8005d26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce4:	f043 0318 	orr.w	r3, r3, #24
 8005ce8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005cfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d10f      	bne.n	8005d24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	4f54300a 	.word	0x4f54300a

08005d38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3301      	adds	r3, #1
 8005d48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4a13      	ldr	r2, [pc, #76]	; (8005d9c <USB_CoreReset+0x64>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e01b      	b.n	8005d8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	daf2      	bge.n	8005d44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f043 0201 	orr.w	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3301      	adds	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <USB_CoreReset+0x64>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e006      	b.n	8005d8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d0f0      	beq.n	8005d6e <USB_CoreReset+0x36>

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	00030d40 	.word	0x00030d40

08005da0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005dac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005db0:	f002 fd40 	bl	8008834 <USBD_static_malloc>
 8005db4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d109      	bne.n	8005dd0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	32b0      	adds	r2, #176	; 0xb0
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e0d4      	b.n	8005f7a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005dd0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f002 fd9a 	bl	8008910 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	32b0      	adds	r2, #176	; 0xb0
 8005de6:	68f9      	ldr	r1, [r7, #12]
 8005de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	32b0      	adds	r2, #176	; 0xb0
 8005df6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	7c1b      	ldrb	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d138      	bne.n	8005e7a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e08:	4b5e      	ldr	r3, [pc, #376]	; (8005f84 <USBD_CDC_Init+0x1e4>)
 8005e0a:	7819      	ldrb	r1, [r3, #0]
 8005e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e10:	2202      	movs	r2, #2
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f002 fb9d 	bl	8008552 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e18:	4b5a      	ldr	r3, [pc, #360]	; (8005f84 <USBD_CDC_Init+0x1e4>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	f003 020f 	and.w	r2, r3, #15
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	3324      	adds	r3, #36	; 0x24
 8005e2e:	2201      	movs	r2, #1
 8005e30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e32:	4b55      	ldr	r3, [pc, #340]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005e34:	7819      	ldrb	r1, [r3, #0]
 8005e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f002 fb88 	bl	8008552 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e42:	4b51      	ldr	r3, [pc, #324]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	f003 020f 	and.w	r2, r3, #15
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e5e:	4b4b      	ldr	r3, [pc, #300]	; (8005f8c <USBD_CDC_Init+0x1ec>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	f003 020f 	and.w	r2, r3, #15
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	3326      	adds	r3, #38	; 0x26
 8005e74:	2210      	movs	r2, #16
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	e035      	b.n	8005ee6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e7a:	4b42      	ldr	r3, [pc, #264]	; (8005f84 <USBD_CDC_Init+0x1e4>)
 8005e7c:	7819      	ldrb	r1, [r3, #0]
 8005e7e:	2340      	movs	r3, #64	; 0x40
 8005e80:	2202      	movs	r2, #2
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f002 fb65 	bl	8008552 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e88:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <USBD_CDC_Init+0x1e4>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	f003 020f 	and.w	r2, r3, #15
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	3324      	adds	r3, #36	; 0x24
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ea2:	4b39      	ldr	r3, [pc, #228]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005ea4:	7819      	ldrb	r1, [r3, #0]
 8005ea6:	2340      	movs	r3, #64	; 0x40
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f002 fb51 	bl	8008552 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005eb0:	4b35      	ldr	r3, [pc, #212]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	f003 020f 	and.w	r2, r3, #15
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ec8:	2201      	movs	r2, #1
 8005eca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ecc:	4b2f      	ldr	r3, [pc, #188]	; (8005f8c <USBD_CDC_Init+0x1ec>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	f003 020f 	and.w	r2, r3, #15
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	3326      	adds	r3, #38	; 0x26
 8005ee2:	2210      	movs	r2, #16
 8005ee4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ee6:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <USBD_CDC_Init+0x1ec>)
 8005ee8:	7819      	ldrb	r1, [r3, #0]
 8005eea:	2308      	movs	r3, #8
 8005eec:	2203      	movs	r2, #3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f002 fb2f 	bl	8008552 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ef4:	4b25      	ldr	r3, [pc, #148]	; (8005f8c <USBD_CDC_Init+0x1ec>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	f003 020f 	and.w	r2, r3, #15
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	440b      	add	r3, r1
 8005f08:	3324      	adds	r3, #36	; 0x24
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	33b0      	adds	r3, #176	; 0xb0
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005f44:	2302      	movs	r3, #2
 8005f46:	e018      	b.n	8005f7a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7c1b      	ldrb	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f50:	4b0d      	ldr	r3, [pc, #52]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005f52:	7819      	ldrb	r1, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f002 fbe6 	bl	8008730 <USBD_LL_PrepareReceive>
 8005f64:	e008      	b.n	8005f78 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f66:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005f68:	7819      	ldrb	r1, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f70:	2340      	movs	r3, #64	; 0x40
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f002 fbdc 	bl	8008730 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000093 	.word	0x20000093
 8005f88:	20000094 	.word	0x20000094
 8005f8c:	20000095 	.word	0x20000095

08005f90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f9c:	4b3a      	ldr	r3, [pc, #232]	; (8006088 <USBD_CDC_DeInit+0xf8>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f002 fafb 	bl	800859e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005fa8:	4b37      	ldr	r3, [pc, #220]	; (8006088 <USBD_CDC_DeInit+0xf8>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	3324      	adds	r3, #36	; 0x24
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005fc2:	4b32      	ldr	r3, [pc, #200]	; (800608c <USBD_CDC_DeInit+0xfc>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f002 fae8 	bl	800859e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005fce:	4b2f      	ldr	r3, [pc, #188]	; (800608c <USBD_CDC_DeInit+0xfc>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	f003 020f 	and.w	r2, r3, #15
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005fea:	4b29      	ldr	r3, [pc, #164]	; (8006090 <USBD_CDC_DeInit+0x100>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f002 fad4 	bl	800859e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ff6:	4b26      	ldr	r3, [pc, #152]	; (8006090 <USBD_CDC_DeInit+0x100>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	f003 020f 	and.w	r2, r3, #15
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	3324      	adds	r3, #36	; 0x24
 800600c:	2200      	movs	r2, #0
 800600e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006010:	4b1f      	ldr	r3, [pc, #124]	; (8006090 <USBD_CDC_DeInit+0x100>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	f003 020f 	and.w	r2, r3, #15
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	3326      	adds	r3, #38	; 0x26
 8006026:	2200      	movs	r2, #0
 8006028:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	32b0      	adds	r2, #176	; 0xb0
 8006034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01f      	beq.n	800607c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	33b0      	adds	r3, #176	; 0xb0
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	32b0      	adds	r2, #176	; 0xb0
 800605a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605e:	4618      	mov	r0, r3
 8006060:	f002 fbf6 	bl	8008850 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	32b0      	adds	r2, #176	; 0xb0
 800606e:	2100      	movs	r1, #0
 8006070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000093 	.word	0x20000093
 800608c:	20000094 	.word	0x20000094
 8006090:	20000095 	.word	0x20000095

08006094 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	32b0      	adds	r2, #176	; 0xb0
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e0bf      	b.n	8006244 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d050      	beq.n	8006172 <USBD_CDC_Setup+0xde>
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	f040 80af 	bne.w	8006234 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	88db      	ldrh	r3, [r3, #6]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d03a      	beq.n	8006154 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	b25b      	sxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	da1b      	bge.n	8006120 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	33b0      	adds	r3, #176	; 0xb0
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80060fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	88d2      	ldrh	r2, [r2, #6]
 8006104:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	88db      	ldrh	r3, [r3, #6]
 800610a:	2b07      	cmp	r3, #7
 800610c:	bf28      	it	cs
 800610e:	2307      	movcs	r3, #7
 8006110:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	89fa      	ldrh	r2, [r7, #14]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fdb3 	bl	8007c84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800611e:	e090      	b.n	8006242 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	785a      	ldrb	r2, [r3, #1]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	88db      	ldrh	r3, [r3, #6]
 800612e:	2b3f      	cmp	r3, #63	; 0x3f
 8006130:	d803      	bhi.n	800613a <USBD_CDC_Setup+0xa6>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	88db      	ldrh	r3, [r3, #6]
 8006136:	b2da      	uxtb	r2, r3
 8006138:	e000      	b.n	800613c <USBD_CDC_Setup+0xa8>
 800613a:	2240      	movs	r2, #64	; 0x40
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006142:	6939      	ldr	r1, [r7, #16]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800614a:	461a      	mov	r2, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 fdc5 	bl	8007cdc <USBD_CtlPrepareRx>
      break;
 8006152:	e076      	b.n	8006242 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	33b0      	adds	r3, #176	; 0xb0
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	7850      	ldrb	r0, [r2, #1]
 800616a:	2200      	movs	r2, #0
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	4798      	blx	r3
      break;
 8006170:	e067      	b.n	8006242 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	2b0b      	cmp	r3, #11
 8006178:	d851      	bhi.n	800621e <USBD_CDC_Setup+0x18a>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <USBD_CDC_Setup+0xec>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	080061b1 	.word	0x080061b1
 8006184:	0800622d 	.word	0x0800622d
 8006188:	0800621f 	.word	0x0800621f
 800618c:	0800621f 	.word	0x0800621f
 8006190:	0800621f 	.word	0x0800621f
 8006194:	0800621f 	.word	0x0800621f
 8006198:	0800621f 	.word	0x0800621f
 800619c:	0800621f 	.word	0x0800621f
 80061a0:	0800621f 	.word	0x0800621f
 80061a4:	0800621f 	.word	0x0800621f
 80061a8:	080061db 	.word	0x080061db
 80061ac:	08006205 	.word	0x08006205
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d107      	bne.n	80061cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061bc:	f107 030a 	add.w	r3, r7, #10
 80061c0:	2202      	movs	r2, #2
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f001 fd5d 	bl	8007c84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061ca:	e032      	b.n	8006232 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 fce7 	bl	8007ba2 <USBD_CtlError>
            ret = USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	75fb      	strb	r3, [r7, #23]
          break;
 80061d8:	e02b      	b.n	8006232 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d107      	bne.n	80061f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061e6:	f107 030d 	add.w	r3, r7, #13
 80061ea:	2201      	movs	r2, #1
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fd48 	bl	8007c84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061f4:	e01d      	b.n	8006232 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 fcd2 	bl	8007ba2 <USBD_CtlError>
            ret = USBD_FAIL;
 80061fe:	2303      	movs	r3, #3
 8006200:	75fb      	strb	r3, [r7, #23]
          break;
 8006202:	e016      	b.n	8006232 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b03      	cmp	r3, #3
 800620e:	d00f      	beq.n	8006230 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 fcc5 	bl	8007ba2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006218:	2303      	movs	r3, #3
 800621a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800621c:	e008      	b.n	8006230 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 fcbe 	bl	8007ba2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006226:	2303      	movs	r3, #3
 8006228:	75fb      	strb	r3, [r7, #23]
          break;
 800622a:	e002      	b.n	8006232 <USBD_CDC_Setup+0x19e>
          break;
 800622c:	bf00      	nop
 800622e:	e008      	b.n	8006242 <USBD_CDC_Setup+0x1ae>
          break;
 8006230:	bf00      	nop
      }
      break;
 8006232:	e006      	b.n	8006242 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f001 fcb3 	bl	8007ba2 <USBD_CtlError>
      ret = USBD_FAIL;
 800623c:	2303      	movs	r3, #3
 800623e:	75fb      	strb	r3, [r7, #23]
      break;
 8006240:	bf00      	nop
  }

  return (uint8_t)ret;
 8006242:	7dfb      	ldrb	r3, [r7, #23]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800625e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	32b0      	adds	r2, #176	; 0xb0
 800626a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006272:	2303      	movs	r3, #3
 8006274:	e065      	b.n	8006342 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	32b0      	adds	r2, #176	; 0xb0
 8006280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006284:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	f003 020f 	and.w	r2, r3, #15
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	3318      	adds	r3, #24
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d02f      	beq.n	8006300 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	f003 020f 	and.w	r2, r3, #15
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	3318      	adds	r3, #24
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	f003 010f 	and.w	r1, r3, #15
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	460b      	mov	r3, r1
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	440b      	add	r3, r1
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4403      	add	r3, r0
 80062c8:	3348      	adds	r3, #72	; 0x48
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d112      	bne.n	8006300 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	f003 020f 	and.w	r2, r3, #15
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	3318      	adds	r3, #24
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062f2:	78f9      	ldrb	r1, [r7, #3]
 80062f4:	2300      	movs	r3, #0
 80062f6:	2200      	movs	r2, #0
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f002 f9f8 	bl	80086ee <USBD_LL_Transmit>
 80062fe:	e01f      	b.n	8006340 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	33b0      	adds	r3, #176	; 0xb0
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d010      	beq.n	8006340 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	33b0      	adds	r3, #176	; 0xb0
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800633c:	78fa      	ldrb	r2, [r7, #3]
 800633e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	32b0      	adds	r2, #176	; 0xb0
 8006360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006364:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	32b0      	adds	r2, #176	; 0xb0
 8006370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006378:	2303      	movs	r3, #3
 800637a:	e01a      	b.n	80063b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f002 f9f6 	bl	8008772 <USBD_LL_GetRxDataSize>
 8006386:	4602      	mov	r2, r0
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	33b0      	adds	r3, #176	; 0xb0
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063ac:	4611      	mov	r1, r2
 80063ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	32b0      	adds	r2, #176	; 0xb0
 80063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063d8:	2303      	movs	r3, #3
 80063da:	e025      	b.n	8006428 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	33b0      	adds	r3, #176	; 0xb0
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01a      	beq.n	8006426 <USBD_CDC_EP0_RxReady+0x6c>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80063f6:	2bff      	cmp	r3, #255	; 0xff
 80063f8:	d015      	beq.n	8006426 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	33b0      	adds	r3, #176	; 0xb0
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006412:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800641a:	b292      	uxth	r2, r2
 800641c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	22ff      	movs	r2, #255	; 0xff
 8006422:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006438:	2182      	movs	r1, #130	; 0x82
 800643a:	4818      	ldr	r0, [pc, #96]	; (800649c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800643c:	f000 fd4f 	bl	8006ede <USBD_GetEpDesc>
 8006440:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006442:	2101      	movs	r1, #1
 8006444:	4815      	ldr	r0, [pc, #84]	; (800649c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006446:	f000 fd4a 	bl	8006ede <USBD_GetEpDesc>
 800644a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800644c:	2181      	movs	r1, #129	; 0x81
 800644e:	4813      	ldr	r0, [pc, #76]	; (800649c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006450:	f000 fd45 	bl	8006ede <USBD_GetEpDesc>
 8006454:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2210      	movs	r2, #16
 8006460:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d006      	beq.n	8006476 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2200      	movs	r2, #0
 800646c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006470:	711a      	strb	r2, [r3, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d006      	beq.n	800648a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006484:	711a      	strb	r2, [r3, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2243      	movs	r2, #67	; 0x43
 800648e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006490:	4b02      	ldr	r3, [pc, #8]	; (800649c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20000050 	.word	0x20000050

080064a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064a8:	2182      	movs	r1, #130	; 0x82
 80064aa:	4818      	ldr	r0, [pc, #96]	; (800650c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064ac:	f000 fd17 	bl	8006ede <USBD_GetEpDesc>
 80064b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064b2:	2101      	movs	r1, #1
 80064b4:	4815      	ldr	r0, [pc, #84]	; (800650c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064b6:	f000 fd12 	bl	8006ede <USBD_GetEpDesc>
 80064ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064bc:	2181      	movs	r1, #129	; 0x81
 80064be:	4813      	ldr	r0, [pc, #76]	; (800650c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064c0:	f000 fd0d 	bl	8006ede <USBD_GetEpDesc>
 80064c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2210      	movs	r2, #16
 80064d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d006      	beq.n	80064e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2200      	movs	r2, #0
 80064dc:	711a      	strb	r2, [r3, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f042 0202 	orr.w	r2, r2, #2
 80064e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d006      	beq.n	80064fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	711a      	strb	r2, [r3, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f042 0202 	orr.w	r2, r2, #2
 80064f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2243      	movs	r2, #67	; 0x43
 80064fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006500:	4b02      	ldr	r3, [pc, #8]	; (800650c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000050 	.word	0x20000050

08006510 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006518:	2182      	movs	r1, #130	; 0x82
 800651a:	4818      	ldr	r0, [pc, #96]	; (800657c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800651c:	f000 fcdf 	bl	8006ede <USBD_GetEpDesc>
 8006520:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006522:	2101      	movs	r1, #1
 8006524:	4815      	ldr	r0, [pc, #84]	; (800657c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006526:	f000 fcda 	bl	8006ede <USBD_GetEpDesc>
 800652a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800652c:	2181      	movs	r1, #129	; 0x81
 800652e:	4813      	ldr	r0, [pc, #76]	; (800657c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006530:	f000 fcd5 	bl	8006ede <USBD_GetEpDesc>
 8006534:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2210      	movs	r2, #16
 8006540:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d006      	beq.n	8006556 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	2200      	movs	r2, #0
 800654c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006550:	711a      	strb	r2, [r3, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d006      	beq.n	800656a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006564:	711a      	strb	r2, [r3, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2243      	movs	r2, #67	; 0x43
 800656e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006570:	4b02      	ldr	r3, [pc, #8]	; (800657c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000050 	.word	0x20000050

08006580 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	220a      	movs	r2, #10
 800658c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800658e:	4b03      	ldr	r3, [pc, #12]	; (800659c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	2000000c 	.word	0x2000000c

080065a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e009      	b.n	80065c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	33b0      	adds	r3, #176	; 0xb0
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	32b0      	adds	r2, #176	; 0xb0
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e008      	b.n	800660c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	32b0      	adds	r2, #176	; 0xb0
 800662c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006630:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006638:	2303      	movs	r3, #3
 800663a:	e004      	b.n	8006646 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
	...

08006654 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	32b0      	adds	r2, #176	; 0xb0
 8006666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	32b0      	adds	r2, #176	; 0xb0
 800667a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006682:	2303      	movs	r3, #3
 8006684:	e025      	b.n	80066d2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800668c:	2b00      	cmp	r3, #0
 800668e:	d11f      	bne.n	80066d0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2201      	movs	r2, #1
 8006694:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006698:	4b10      	ldr	r3, [pc, #64]	; (80066dc <USBD_CDC_TransmitPacket+0x88>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f003 020f 	and.w	r2, r3, #15
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4403      	add	r3, r0
 80066b2:	3318      	adds	r3, #24
 80066b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80066b6:	4b09      	ldr	r3, [pc, #36]	; (80066dc <USBD_CDC_TransmitPacket+0x88>)
 80066b8:	7819      	ldrb	r1, [r3, #0]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f002 f811 	bl	80086ee <USBD_LL_Transmit>

    ret = USBD_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20000093 	.word	0x20000093

080066e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	32b0      	adds	r2, #176	; 0xb0
 80066f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	32b0      	adds	r2, #176	; 0xb0
 8006702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800670a:	2303      	movs	r3, #3
 800670c:	e018      	b.n	8006740 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	7c1b      	ldrb	r3, [r3, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <USBD_CDC_ReceivePacket+0x68>)
 8006718:	7819      	ldrb	r1, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f002 f803 	bl	8008730 <USBD_LL_PrepareReceive>
 800672a:	e008      	b.n	800673e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <USBD_CDC_ReceivePacket+0x68>)
 800672e:	7819      	ldrb	r1, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006736:	2340      	movs	r3, #64	; 0x40
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 fff9 	bl	8008730 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20000094 	.word	0x20000094

0800674c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006760:	2303      	movs	r3, #3
 8006762:	e01f      	b.n	80067a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	79fa      	ldrb	r2, [r7, #7]
 8006796:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f001 fe73 	bl	8008484 <USBD_LL_Init>
 800679e:	4603      	mov	r3, r0
 80067a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e025      	b.n	8006810 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	32ae      	adds	r2, #174	; 0xae
 80067d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00f      	beq.n	8006800 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	32ae      	adds	r2, #174	; 0xae
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	f107 020e 	add.w	r2, r7, #14
 80067f4:	4610      	mov	r0, r2
 80067f6:	4798      	blx	r3
 80067f8:	4602      	mov	r2, r0
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fe7b 	bl	800851c <USBD_LL_Start>
 8006826:	4603      	mov	r3, r0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006838:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d009      	beq.n	8006874 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	4611      	mov	r1, r2
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	4798      	blx	r3
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	460b      	mov	r3, r1
 8006888:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	4611      	mov	r1, r2
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80068a4:	2303      	movs	r3, #3
 80068a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 f932 	bl	8007b2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068e6:	f003 031f 	and.w	r3, r3, #31
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d01a      	beq.n	8006924 <USBD_LL_SetupStage+0x72>
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d822      	bhi.n	8006938 <USBD_LL_SetupStage+0x86>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <USBD_LL_SetupStage+0x4a>
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d00a      	beq.n	8006910 <USBD_LL_SetupStage+0x5e>
 80068fa:	e01d      	b.n	8006938 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fb5f 	bl	8006fc8 <USBD_StdDevReq>
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]
      break;
 800690e:	e020      	b.n	8006952 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fbc7 	bl	80070ac <USBD_StdItfReq>
 800691e:	4603      	mov	r3, r0
 8006920:	73fb      	strb	r3, [r7, #15]
      break;
 8006922:	e016      	b.n	8006952 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fc29 	bl	8007184 <USBD_StdEPReq>
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
      break;
 8006936:	e00c      	b.n	8006952 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800693e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006942:	b2db      	uxtb	r3, r3
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fe48 	bl	80085dc <USBD_LL_StallEP>
 800694c:	4603      	mov	r3, r0
 800694e:	73fb      	strb	r3, [r7, #15]
      break;
 8006950:	bf00      	nop
  }

  return ret;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	460b      	mov	r3, r1
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800696e:	7afb      	ldrb	r3, [r7, #11]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d16e      	bne.n	8006a52 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800697a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006982:	2b03      	cmp	r3, #3
 8006984:	f040 8098 	bne.w	8006ab8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	429a      	cmp	r2, r3
 8006992:	d913      	bls.n	80069bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	1ad2      	subs	r2, r2, r3
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	4293      	cmp	r3, r2
 80069ac:	bf28      	it	cs
 80069ae:	4613      	movcs	r3, r2
 80069b0:	461a      	mov	r2, r3
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f001 f9ae 	bl	8007d16 <USBD_CtlContinueRx>
 80069ba:	e07d      	b.n	8006ab8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d014      	beq.n	80069f4 <USBD_LL_DataOutStage+0x98>
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d81d      	bhi.n	8006a0a <USBD_LL_DataOutStage+0xae>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <USBD_LL_DataOutStage+0x7c>
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d003      	beq.n	80069de <USBD_LL_DataOutStage+0x82>
 80069d6:	e018      	b.n	8006a0a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	75bb      	strb	r3, [r7, #22]
            break;
 80069dc:	e018      	b.n	8006a10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	4619      	mov	r1, r3
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fa5e 	bl	8006eaa <USBD_CoreFindIF>
 80069ee:	4603      	mov	r3, r0
 80069f0:	75bb      	strb	r3, [r7, #22]
            break;
 80069f2:	e00d      	b.n	8006a10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fa60 	bl	8006ec4 <USBD_CoreFindEP>
 8006a04:	4603      	mov	r3, r0
 8006a06:	75bb      	strb	r3, [r7, #22]
            break;
 8006a08:	e002      	b.n	8006a10 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	75bb      	strb	r3, [r7, #22]
            break;
 8006a0e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a10:	7dbb      	ldrb	r3, [r7, #22]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d119      	bne.n	8006a4a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d113      	bne.n	8006a4a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a22:	7dba      	ldrb	r2, [r7, #22]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	32ae      	adds	r2, #174	; 0xae
 8006a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a32:	7dba      	ldrb	r2, [r7, #22]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a3a:	7dba      	ldrb	r2, [r7, #22]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	32ae      	adds	r2, #174	; 0xae
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f001 f974 	bl	8007d38 <USBD_CtlSendStatus>
 8006a50:	e032      	b.n	8006ab8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a52:	7afb      	ldrb	r3, [r7, #11]
 8006a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fa31 	bl	8006ec4 <USBD_CoreFindEP>
 8006a62:	4603      	mov	r3, r0
 8006a64:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a66:	7dbb      	ldrb	r3, [r7, #22]
 8006a68:	2bff      	cmp	r3, #255	; 0xff
 8006a6a:	d025      	beq.n	8006ab8 <USBD_LL_DataOutStage+0x15c>
 8006a6c:	7dbb      	ldrb	r3, [r7, #22]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d122      	bne.n	8006ab8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d117      	bne.n	8006aae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a7e:	7dba      	ldrb	r2, [r7, #22]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	32ae      	adds	r2, #174	; 0xae
 8006a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00f      	beq.n	8006aae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a8e:	7dba      	ldrb	r2, [r7, #22]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a96:	7dba      	ldrb	r2, [r7, #22]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	32ae      	adds	r2, #174	; 0xae
 8006a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	7afa      	ldrb	r2, [r7, #11]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	4798      	blx	r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	e000      	b.n	8006aba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	460b      	mov	r3, r1
 8006acc:	607a      	str	r2, [r7, #4]
 8006ace:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ad0:	7afb      	ldrb	r3, [r7, #11]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d16f      	bne.n	8006bb6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3314      	adds	r3, #20
 8006ada:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d15a      	bne.n	8006b9c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	689a      	ldr	r2, [r3, #8]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d914      	bls.n	8006b1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	1ad2      	subs	r2, r2, r3
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f001 f8d6 	bl	8007cba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2200      	movs	r2, #0
 8006b12:	2100      	movs	r1, #0
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f001 fe0b 	bl	8008730 <USBD_LL_PrepareReceive>
 8006b1a:	e03f      	b.n	8006b9c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d11c      	bne.n	8006b62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d316      	bcc.n	8006b62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d20f      	bcs.n	8006b62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b42:	2200      	movs	r2, #0
 8006b44:	2100      	movs	r1, #0
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f001 f8b7 	bl	8007cba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b54:	2300      	movs	r3, #0
 8006b56:	2200      	movs	r2, #0
 8006b58:	2100      	movs	r1, #0
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f001 fde8 	bl	8008730 <USBD_LL_PrepareReceive>
 8006b60:	e01c      	b.n	8006b9c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d10f      	bne.n	8006b8e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b8e:	2180      	movs	r1, #128	; 0x80
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f001 fd23 	bl	80085dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f001 f8e1 	bl	8007d5e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d03a      	beq.n	8006c1c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff fe42 	bl	8006830 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006bb4:	e032      	b.n	8006c1c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f97f 	bl	8006ec4 <USBD_CoreFindEP>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	2bff      	cmp	r3, #255	; 0xff
 8006bce:	d025      	beq.n	8006c1c <USBD_LL_DataInStage+0x15a>
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d122      	bne.n	8006c1c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d11c      	bne.n	8006c1c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006be2:	7dfa      	ldrb	r2, [r7, #23]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	32ae      	adds	r2, #174	; 0xae
 8006be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d014      	beq.n	8006c1c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bf2:	7dfa      	ldrb	r2, [r7, #23]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bfa:	7dfa      	ldrb	r2, [r7, #23]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	32ae      	adds	r2, #174	; 0xae
 8006c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	7afa      	ldrb	r2, [r7, #11]
 8006c08:	4611      	mov	r1, r2
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	4798      	blx	r3
 8006c0e:	4603      	mov	r3, r0
 8006c10:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c12:	7dbb      	ldrb	r3, [r7, #22]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c18:	7dbb      	ldrb	r3, [r7, #22]
 8006c1a:	e000      	b.n	8006c1e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d014      	beq.n	8006c8c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00e      	beq.n	8006c8c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6852      	ldr	r2, [r2, #4]
 8006c7a:	b2d2      	uxtb	r2, r2
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c8c:	2340      	movs	r3, #64	; 0x40
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2100      	movs	r1, #0
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fc5d 	bl	8008552 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2240      	movs	r2, #64	; 0x40
 8006ca4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ca8:	2340      	movs	r3, #64	; 0x40
 8006caa:	2200      	movs	r2, #0
 8006cac:	2180      	movs	r1, #128	; 0x80
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 fc4f 	bl	8008552 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2240      	movs	r2, #64	; 0x40
 8006cbe:	621a      	str	r2, [r3, #32]

  return ret;
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2204      	movs	r2, #4
 8006d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d106      	bne.n	8006d38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d110      	bne.n	8006d7c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00b      	beq.n	8006d7c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	32ae      	adds	r2, #174	; 0xae
 8006d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e01c      	b.n	8006de2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d115      	bne.n	8006de0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	32ae      	adds	r2, #174	; 0xae
 8006dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	32ae      	adds	r2, #174	; 0xae
 8006dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	78fa      	ldrb	r2, [r7, #3]
 8006dda:	4611      	mov	r1, r2
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	32ae      	adds	r2, #174	; 0xae
 8006e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e01c      	b.n	8006e46 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d115      	bne.n	8006e44 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	32ae      	adds	r2, #174	; 0xae
 8006e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00b      	beq.n	8006e44 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32ae      	adds	r2, #174	; 0xae
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00e      	beq.n	8006ea0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6852      	ldr	r2, [r2, #4]
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	4611      	mov	r1, r2
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006eb6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ed0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b086      	sub	sp, #24
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	885b      	ldrh	r3, [r3, #2]
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d920      	bls.n	8006f48 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f0e:	e013      	b.n	8006f38 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f10:	f107 030a 	add.w	r3, r7, #10
 8006f14:	4619      	mov	r1, r3
 8006f16:	6978      	ldr	r0, [r7, #20]
 8006f18:	f000 f81b 	bl	8006f52 <USBD_GetNextDesc>
 8006f1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d108      	bne.n	8006f38 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	789b      	ldrb	r3, [r3, #2]
 8006f2e:	78fa      	ldrb	r2, [r7, #3]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d008      	beq.n	8006f46 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	885b      	ldrh	r3, [r3, #2]
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	897b      	ldrh	r3, [r7, #10]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d8e5      	bhi.n	8006f10 <USBD_GetEpDesc+0x32>
 8006f44:	e000      	b.n	8006f48 <USBD_GetEpDesc+0x6a>
          break;
 8006f46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f48:	693b      	ldr	r3, [r7, #16]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	881a      	ldrh	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	4413      	add	r3, r2
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006faa:	8a3b      	ldrh	r3, [r7, #16]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	b21a      	sxth	r2, r3
 8006fb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	b21b      	sxth	r3, r3
 8006fb8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fba:	89fb      	ldrh	r3, [r7, #14]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d005      	beq.n	8006fee <USBD_StdDevReq+0x26>
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d857      	bhi.n	8007096 <USBD_StdDevReq+0xce>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00f      	beq.n	800700a <USBD_StdDevReq+0x42>
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d153      	bne.n	8007096 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	32ae      	adds	r2, #174	; 0xae
 8006ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3
 8007004:	4603      	mov	r3, r0
 8007006:	73fb      	strb	r3, [r7, #15]
      break;
 8007008:	e04a      	b.n	80070a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	2b09      	cmp	r3, #9
 8007010:	d83b      	bhi.n	800708a <USBD_StdDevReq+0xc2>
 8007012:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <USBD_StdDevReq+0x50>)
 8007014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007018:	0800706d 	.word	0x0800706d
 800701c:	08007081 	.word	0x08007081
 8007020:	0800708b 	.word	0x0800708b
 8007024:	08007077 	.word	0x08007077
 8007028:	0800708b 	.word	0x0800708b
 800702c:	0800704b 	.word	0x0800704b
 8007030:	08007041 	.word	0x08007041
 8007034:	0800708b 	.word	0x0800708b
 8007038:	08007063 	.word	0x08007063
 800703c:	08007055 	.word	0x08007055
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa3c 	bl	80074c0 <USBD_GetDescriptor>
          break;
 8007048:	e024      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fbcb 	bl	80077e8 <USBD_SetAddress>
          break;
 8007052:	e01f      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fc0a 	bl	8007870 <USBD_SetConfig>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]
          break;
 8007060:	e018      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fcad 	bl	80079c4 <USBD_GetConfig>
          break;
 800706a:	e013      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fcde 	bl	8007a30 <USBD_GetStatus>
          break;
 8007074:	e00e      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fd0d 	bl	8007a98 <USBD_SetFeature>
          break;
 800707e:	e009      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fd31 	bl	8007aea <USBD_ClrFeature>
          break;
 8007088:	e004      	b.n	8007094 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fd88 	bl	8007ba2 <USBD_CtlError>
          break;
 8007092:	bf00      	nop
      }
      break;
 8007094:	e004      	b.n	80070a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fd82 	bl	8007ba2 <USBD_CtlError>
      break;
 800709e:	bf00      	nop
  }

  return ret;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop

080070ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	d005      	beq.n	80070d2 <USBD_StdItfReq+0x26>
 80070c6:	2b40      	cmp	r3, #64	; 0x40
 80070c8:	d852      	bhi.n	8007170 <USBD_StdItfReq+0xc4>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <USBD_StdItfReq+0x26>
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d14e      	bne.n	8007170 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d840      	bhi.n	8007162 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	889b      	ldrh	r3, [r3, #4]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d836      	bhi.n	8007158 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	889b      	ldrh	r3, [r3, #4]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff fed9 	bl	8006eaa <USBD_CoreFindIF>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	2bff      	cmp	r3, #255	; 0xff
 8007100:	d01d      	beq.n	800713e <USBD_StdItfReq+0x92>
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11a      	bne.n	800713e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007108:	7bba      	ldrb	r2, [r7, #14]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32ae      	adds	r2, #174	; 0xae
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00f      	beq.n	8007138 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007118:	7bba      	ldrb	r2, [r7, #14]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007120:	7bba      	ldrb	r2, [r7, #14]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	32ae      	adds	r2, #174	; 0xae
 8007126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007136:	e004      	b.n	8007142 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007138:	2303      	movs	r3, #3
 800713a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800713c:	e001      	b.n	8007142 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800713e:	2303      	movs	r3, #3
 8007140:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	88db      	ldrh	r3, [r3, #6]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d110      	bne.n	800716c <USBD_StdItfReq+0xc0>
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10d      	bne.n	800716c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fdf1 	bl	8007d38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007156:	e009      	b.n	800716c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fd21 	bl	8007ba2 <USBD_CtlError>
          break;
 8007160:	e004      	b.n	800716c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fd1c 	bl	8007ba2 <USBD_CtlError>
          break;
 800716a:	e000      	b.n	800716e <USBD_StdItfReq+0xc2>
          break;
 800716c:	bf00      	nop
      }
      break;
 800716e:	e004      	b.n	800717a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fd15 	bl	8007ba2 <USBD_CtlError>
      break;
 8007178:	bf00      	nop
  }

  return ret;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	889b      	ldrh	r3, [r3, #4]
 8007196:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	d007      	beq.n	80071b4 <USBD_StdEPReq+0x30>
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	f200 817f 	bhi.w	80074a8 <USBD_StdEPReq+0x324>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d02a      	beq.n	8007204 <USBD_StdEPReq+0x80>
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	f040 817a 	bne.w	80074a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7ff fe83 	bl	8006ec4 <USBD_CoreFindEP>
 80071be:	4603      	mov	r3, r0
 80071c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071c2:	7b7b      	ldrb	r3, [r7, #13]
 80071c4:	2bff      	cmp	r3, #255	; 0xff
 80071c6:	f000 8174 	beq.w	80074b2 <USBD_StdEPReq+0x32e>
 80071ca:	7b7b      	ldrb	r3, [r7, #13]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 8170 	bne.w	80074b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071d2:	7b7a      	ldrb	r2, [r7, #13]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071da:	7b7a      	ldrb	r2, [r7, #13]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	32ae      	adds	r2, #174	; 0xae
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 8163 	beq.w	80074b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071ec:	7b7a      	ldrb	r2, [r7, #13]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	32ae      	adds	r2, #174	; 0xae
 80071f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007202:	e156      	b.n	80074b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d008      	beq.n	800721e <USBD_StdEPReq+0x9a>
 800720c:	2b03      	cmp	r3, #3
 800720e:	f300 8145 	bgt.w	800749c <USBD_StdEPReq+0x318>
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 809b 	beq.w	800734e <USBD_StdEPReq+0x1ca>
 8007218:	2b01      	cmp	r3, #1
 800721a:	d03c      	beq.n	8007296 <USBD_StdEPReq+0x112>
 800721c:	e13e      	b.n	800749c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d002      	beq.n	8007230 <USBD_StdEPReq+0xac>
 800722a:	2b03      	cmp	r3, #3
 800722c:	d016      	beq.n	800725c <USBD_StdEPReq+0xd8>
 800722e:	e02c      	b.n	800728a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00d      	beq.n	8007252 <USBD_StdEPReq+0xce>
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	2b80      	cmp	r3, #128	; 0x80
 800723a:	d00a      	beq.n	8007252 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f9cb 	bl	80085dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007246:	2180      	movs	r1, #128	; 0x80
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 f9c7 	bl	80085dc <USBD_LL_StallEP>
 800724e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007250:	e020      	b.n	8007294 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fca4 	bl	8007ba2 <USBD_CtlError>
              break;
 800725a:	e01b      	b.n	8007294 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	885b      	ldrh	r3, [r3, #2]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10e      	bne.n	8007282 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00b      	beq.n	8007282 <USBD_StdEPReq+0xfe>
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b80      	cmp	r3, #128	; 0x80
 800726e:	d008      	beq.n	8007282 <USBD_StdEPReq+0xfe>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	88db      	ldrh	r3, [r3, #6]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d104      	bne.n	8007282 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 f9ad 	bl	80085dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fd58 	bl	8007d38 <USBD_CtlSendStatus>

              break;
 8007288:	e004      	b.n	8007294 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fc88 	bl	8007ba2 <USBD_CtlError>
              break;
 8007292:	bf00      	nop
          }
          break;
 8007294:	e107      	b.n	80074a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d002      	beq.n	80072a8 <USBD_StdEPReq+0x124>
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d016      	beq.n	80072d4 <USBD_StdEPReq+0x150>
 80072a6:	e04b      	b.n	8007340 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00d      	beq.n	80072ca <USBD_StdEPReq+0x146>
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	2b80      	cmp	r3, #128	; 0x80
 80072b2:	d00a      	beq.n	80072ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 f98f 	bl	80085dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072be:	2180      	movs	r1, #128	; 0x80
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 f98b 	bl	80085dc <USBD_LL_StallEP>
 80072c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072c8:	e040      	b.n	800734c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fc68 	bl	8007ba2 <USBD_CtlError>
              break;
 80072d2:	e03b      	b.n	800734c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	885b      	ldrh	r3, [r3, #2]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d136      	bne.n	800734a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 f995 	bl	800861a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fd21 	bl	8007d38 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff fde2 	bl	8006ec4 <USBD_CoreFindEP>
 8007300:	4603      	mov	r3, r0
 8007302:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007304:	7b7b      	ldrb	r3, [r7, #13]
 8007306:	2bff      	cmp	r3, #255	; 0xff
 8007308:	d01f      	beq.n	800734a <USBD_StdEPReq+0x1c6>
 800730a:	7b7b      	ldrb	r3, [r7, #13]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d11c      	bne.n	800734a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007310:	7b7a      	ldrb	r2, [r7, #13]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007318:	7b7a      	ldrb	r2, [r7, #13]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	32ae      	adds	r2, #174	; 0xae
 800731e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d010      	beq.n	800734a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007328:	7b7a      	ldrb	r2, [r7, #13]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	32ae      	adds	r2, #174	; 0xae
 800732e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
 800733a:	4603      	mov	r3, r0
 800733c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800733e:	e004      	b.n	800734a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fc2d 	bl	8007ba2 <USBD_CtlError>
              break;
 8007348:	e000      	b.n	800734c <USBD_StdEPReq+0x1c8>
              break;
 800734a:	bf00      	nop
          }
          break;
 800734c:	e0ab      	b.n	80074a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d002      	beq.n	8007360 <USBD_StdEPReq+0x1dc>
 800735a:	2b03      	cmp	r3, #3
 800735c:	d032      	beq.n	80073c4 <USBD_StdEPReq+0x240>
 800735e:	e097      	b.n	8007490 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d007      	beq.n	8007376 <USBD_StdEPReq+0x1f2>
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	2b80      	cmp	r3, #128	; 0x80
 800736a:	d004      	beq.n	8007376 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fc17 	bl	8007ba2 <USBD_CtlError>
                break;
 8007374:	e091      	b.n	800749a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800737a:	2b00      	cmp	r3, #0
 800737c:	da0b      	bge.n	8007396 <USBD_StdEPReq+0x212>
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	3310      	adds	r3, #16
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	3304      	adds	r3, #4
 8007394:	e00b      	b.n	80073ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	4413      	add	r3, r2
 80073ac:	3304      	adds	r3, #4
 80073ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2202      	movs	r2, #2
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc61 	bl	8007c84 <USBD_CtlSendData>
              break;
 80073c2:	e06a      	b.n	800749a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	da11      	bge.n	80073f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	f003 020f 	and.w	r2, r3, #15
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	3324      	adds	r3, #36	; 0x24
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d117      	bne.n	8007416 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fbda 	bl	8007ba2 <USBD_CtlError>
                  break;
 80073ee:	e054      	b.n	800749a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	f003 020f 	and.w	r2, r3, #15
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	440b      	add	r3, r1
 8007402:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fbc7 	bl	8007ba2 <USBD_CtlError>
                  break;
 8007414:	e041      	b.n	800749a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007416:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800741a:	2b00      	cmp	r3, #0
 800741c:	da0b      	bge.n	8007436 <USBD_StdEPReq+0x2b2>
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	3310      	adds	r3, #16
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	3304      	adds	r3, #4
 8007434:	e00b      	b.n	800744e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	4413      	add	r3, r2
 800744c:	3304      	adds	r3, #4
 800744e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <USBD_StdEPReq+0x2d8>
 8007456:	7bbb      	ldrb	r3, [r7, #14]
 8007458:	2b80      	cmp	r3, #128	; 0x80
 800745a:	d103      	bne.n	8007464 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e00e      	b.n	8007482 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 f8f5 	bl	8008658 <USBD_LL_IsStallEP>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2201      	movs	r2, #1
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	e002      	b.n	8007482 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2202      	movs	r2, #2
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fbfb 	bl	8007c84 <USBD_CtlSendData>
              break;
 800748e:	e004      	b.n	800749a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fb85 	bl	8007ba2 <USBD_CtlError>
              break;
 8007498:	bf00      	nop
          }
          break;
 800749a:	e004      	b.n	80074a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fb7f 	bl	8007ba2 <USBD_CtlError>
          break;
 80074a4:	bf00      	nop
      }
      break;
 80074a6:	e005      	b.n	80074b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fb79 	bl	8007ba2 <USBD_CtlError>
      break;
 80074b0:	e000      	b.n	80074b4 <USBD_StdEPReq+0x330>
      break;
 80074b2:	bf00      	nop
  }

  return ret;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
	...

080074c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	885b      	ldrh	r3, [r3, #2]
 80074da:	0a1b      	lsrs	r3, r3, #8
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	2b0e      	cmp	r3, #14
 80074e2:	f200 8152 	bhi.w	800778a <USBD_GetDescriptor+0x2ca>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <USBD_GetDescriptor+0x2c>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	0800755d 	.word	0x0800755d
 80074f0:	08007575 	.word	0x08007575
 80074f4:	080075b5 	.word	0x080075b5
 80074f8:	0800778b 	.word	0x0800778b
 80074fc:	0800778b 	.word	0x0800778b
 8007500:	0800772b 	.word	0x0800772b
 8007504:	08007757 	.word	0x08007757
 8007508:	0800778b 	.word	0x0800778b
 800750c:	0800778b 	.word	0x0800778b
 8007510:	0800778b 	.word	0x0800778b
 8007514:	0800778b 	.word	0x0800778b
 8007518:	0800778b 	.word	0x0800778b
 800751c:	0800778b 	.word	0x0800778b
 8007520:	0800778b 	.word	0x0800778b
 8007524:	08007529 	.word	0x08007529
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	7c12      	ldrb	r2, [r2, #16]
 8007540:	f107 0108 	add.w	r1, r7, #8
 8007544:	4610      	mov	r0, r2
 8007546:	4798      	blx	r3
 8007548:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800754a:	e126      	b.n	800779a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fb27 	bl	8007ba2 <USBD_CtlError>
        err++;
 8007554:	7afb      	ldrb	r3, [r7, #11]
 8007556:	3301      	adds	r3, #1
 8007558:	72fb      	strb	r3, [r7, #11]
      break;
 800755a:	e11e      	b.n	800779a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	7c12      	ldrb	r2, [r2, #16]
 8007568:	f107 0108 	add.w	r1, r7, #8
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
 8007570:	60f8      	str	r0, [r7, #12]
      break;
 8007572:	e112      	b.n	800779a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	7c1b      	ldrb	r3, [r3, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10d      	bne.n	8007598 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	f107 0208 	add.w	r2, r7, #8
 8007588:	4610      	mov	r0, r2
 800758a:	4798      	blx	r3
 800758c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3301      	adds	r3, #1
 8007592:	2202      	movs	r2, #2
 8007594:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007596:	e100      	b.n	800779a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	f107 0208 	add.w	r2, r7, #8
 80075a4:	4610      	mov	r0, r2
 80075a6:	4798      	blx	r3
 80075a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3301      	adds	r3, #1
 80075ae:	2202      	movs	r2, #2
 80075b0:	701a      	strb	r2, [r3, #0]
      break;
 80075b2:	e0f2      	b.n	800779a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	885b      	ldrh	r3, [r3, #2]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b05      	cmp	r3, #5
 80075bc:	f200 80ac 	bhi.w	8007718 <USBD_GetDescriptor+0x258>
 80075c0:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <USBD_GetDescriptor+0x108>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	080075e1 	.word	0x080075e1
 80075cc:	08007615 	.word	0x08007615
 80075d0:	08007649 	.word	0x08007649
 80075d4:	0800767d 	.word	0x0800767d
 80075d8:	080076b1 	.word	0x080076b1
 80075dc:	080076e5 	.word	0x080076e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	7c12      	ldrb	r2, [r2, #16]
 80075f8:	f107 0108 	add.w	r1, r7, #8
 80075fc:	4610      	mov	r0, r2
 80075fe:	4798      	blx	r3
 8007600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007602:	e091      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 facb 	bl	8007ba2 <USBD_CtlError>
            err++;
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	3301      	adds	r3, #1
 8007610:	72fb      	strb	r3, [r7, #11]
          break;
 8007612:	e089      	b.n	8007728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	7c12      	ldrb	r2, [r2, #16]
 800762c:	f107 0108 	add.w	r1, r7, #8
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
 8007634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007636:	e077      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fab1 	bl	8007ba2 <USBD_CtlError>
            err++;
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	3301      	adds	r3, #1
 8007644:	72fb      	strb	r3, [r7, #11]
          break;
 8007646:	e06f      	b.n	8007728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	7c12      	ldrb	r2, [r2, #16]
 8007660:	f107 0108 	add.w	r1, r7, #8
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800766a:	e05d      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fa97 	bl	8007ba2 <USBD_CtlError>
            err++;
 8007674:	7afb      	ldrb	r3, [r7, #11]
 8007676:	3301      	adds	r3, #1
 8007678:	72fb      	strb	r3, [r7, #11]
          break;
 800767a:	e055      	b.n	8007728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	7c12      	ldrb	r2, [r2, #16]
 8007694:	f107 0108 	add.w	r1, r7, #8
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769e:	e043      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa7d 	bl	8007ba2 <USBD_CtlError>
            err++;
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	3301      	adds	r3, #1
 80076ac:	72fb      	strb	r3, [r7, #11]
          break;
 80076ae:	e03b      	b.n	8007728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	7c12      	ldrb	r2, [r2, #16]
 80076c8:	f107 0108 	add.w	r1, r7, #8
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d2:	e029      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa63 	bl	8007ba2 <USBD_CtlError>
            err++;
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	3301      	adds	r3, #1
 80076e0:	72fb      	strb	r3, [r7, #11]
          break;
 80076e2:	e021      	b.n	8007728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	7c12      	ldrb	r2, [r2, #16]
 80076fc:	f107 0108 	add.w	r1, r7, #8
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007706:	e00f      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa49 	bl	8007ba2 <USBD_CtlError>
            err++;
 8007710:	7afb      	ldrb	r3, [r7, #11]
 8007712:	3301      	adds	r3, #1
 8007714:	72fb      	strb	r3, [r7, #11]
          break;
 8007716:	e007      	b.n	8007728 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa41 	bl	8007ba2 <USBD_CtlError>
          err++;
 8007720:	7afb      	ldrb	r3, [r7, #11]
 8007722:	3301      	adds	r3, #1
 8007724:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007726:	bf00      	nop
      }
      break;
 8007728:	e037      	b.n	800779a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7c1b      	ldrb	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773a:	f107 0208 	add.w	r2, r7, #8
 800773e:	4610      	mov	r0, r2
 8007740:	4798      	blx	r3
 8007742:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007744:	e029      	b.n	800779a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fa2a 	bl	8007ba2 <USBD_CtlError>
        err++;
 800774e:	7afb      	ldrb	r3, [r7, #11]
 8007750:	3301      	adds	r3, #1
 8007752:	72fb      	strb	r3, [r7, #11]
      break;
 8007754:	e021      	b.n	800779a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	7c1b      	ldrb	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10d      	bne.n	800777a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	f107 0208 	add.w	r2, r7, #8
 800776a:	4610      	mov	r0, r2
 800776c:	4798      	blx	r3
 800776e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	2207      	movs	r2, #7
 8007776:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007778:	e00f      	b.n	800779a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fa10 	bl	8007ba2 <USBD_CtlError>
        err++;
 8007782:	7afb      	ldrb	r3, [r7, #11]
 8007784:	3301      	adds	r3, #1
 8007786:	72fb      	strb	r3, [r7, #11]
      break;
 8007788:	e007      	b.n	800779a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fa08 	bl	8007ba2 <USBD_CtlError>
      err++;
 8007792:	7afb      	ldrb	r3, [r7, #11]
 8007794:	3301      	adds	r3, #1
 8007796:	72fb      	strb	r3, [r7, #11]
      break;
 8007798:	bf00      	nop
  }

  if (err != 0U)
 800779a:	7afb      	ldrb	r3, [r7, #11]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d11e      	bne.n	80077de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	88db      	ldrh	r3, [r3, #6]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d016      	beq.n	80077d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80077a8:	893b      	ldrh	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00e      	beq.n	80077cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	88da      	ldrh	r2, [r3, #6]
 80077b2:	893b      	ldrh	r3, [r7, #8]
 80077b4:	4293      	cmp	r3, r2
 80077b6:	bf28      	it	cs
 80077b8:	4613      	movcs	r3, r2
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077be:	893b      	ldrh	r3, [r7, #8]
 80077c0:	461a      	mov	r2, r3
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fa5d 	bl	8007c84 <USBD_CtlSendData>
 80077ca:	e009      	b.n	80077e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f9e7 	bl	8007ba2 <USBD_CtlError>
 80077d4:	e004      	b.n	80077e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 faae 	bl	8007d38 <USBD_CtlSendStatus>
 80077dc:	e000      	b.n	80077e0 <USBD_GetDescriptor+0x320>
    return;
 80077de:	bf00      	nop
  }
}
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop

080077e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	889b      	ldrh	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d131      	bne.n	800785e <USBD_SetAddress+0x76>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	88db      	ldrh	r3, [r3, #6]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d12d      	bne.n	800785e <USBD_SetAddress+0x76>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	885b      	ldrh	r3, [r3, #2]
 8007806:	2b7f      	cmp	r3, #127	; 0x7f
 8007808:	d829      	bhi.n	800785e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	885b      	ldrh	r3, [r3, #2]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007814:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b03      	cmp	r3, #3
 8007820:	d104      	bne.n	800782c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f9bc 	bl	8007ba2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782a:	e01d      	b.n	8007868 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7bfa      	ldrb	r2, [r7, #15]
 8007830:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 ff39 	bl	80086b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa7a 	bl	8007d38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d004      	beq.n	8007854 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007852:	e009      	b.n	8007868 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785c:	e004      	b.n	8007868 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f99e 	bl	8007ba2 <USBD_CtlError>
  }
}
 8007866:	bf00      	nop
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	885b      	ldrh	r3, [r3, #2]
 8007882:	b2da      	uxtb	r2, r3
 8007884:	4b4e      	ldr	r3, [pc, #312]	; (80079c0 <USBD_SetConfig+0x150>)
 8007886:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007888:	4b4d      	ldr	r3, [pc, #308]	; (80079c0 <USBD_SetConfig+0x150>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d905      	bls.n	800789c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f985 	bl	8007ba2 <USBD_CtlError>
    return USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	e08c      	b.n	80079b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d002      	beq.n	80078ae <USBD_SetConfig+0x3e>
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d029      	beq.n	8007900 <USBD_SetConfig+0x90>
 80078ac:	e075      	b.n	800799a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80078ae:	4b44      	ldr	r3, [pc, #272]	; (80079c0 <USBD_SetConfig+0x150>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d020      	beq.n	80078f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80078b6:	4b42      	ldr	r3, [pc, #264]	; (80079c0 <USBD_SetConfig+0x150>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078c0:	4b3f      	ldr	r3, [pc, #252]	; (80079c0 <USBD_SetConfig+0x150>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fe ffbd 	bl	8006846 <USBD_SetClassConfig>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d008      	beq.n	80078e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f962 	bl	8007ba2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078e6:	e065      	b.n	80079b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fa25 	bl	8007d38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2203      	movs	r2, #3
 80078f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078f6:	e05d      	b.n	80079b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fa1d 	bl	8007d38 <USBD_CtlSendStatus>
      break;
 80078fe:	e059      	b.n	80079b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007900:	4b2f      	ldr	r3, [pc, #188]	; (80079c0 <USBD_SetConfig+0x150>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d112      	bne.n	800792e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007910:	4b2b      	ldr	r3, [pc, #172]	; (80079c0 <USBD_SetConfig+0x150>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800791a:	4b29      	ldr	r3, [pc, #164]	; (80079c0 <USBD_SetConfig+0x150>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fe ffac 	bl	800687e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa06 	bl	8007d38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800792c:	e042      	b.n	80079b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800792e:	4b24      	ldr	r3, [pc, #144]	; (80079c0 <USBD_SetConfig+0x150>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	429a      	cmp	r2, r3
 800793a:	d02a      	beq.n	8007992 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7fe ff9a 	bl	800687e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800794a:	4b1d      	ldr	r3, [pc, #116]	; (80079c0 <USBD_SetConfig+0x150>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007954:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <USBD_SetConfig+0x150>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fe ff73 	bl	8006846 <USBD_SetClassConfig>
 8007960:	4603      	mov	r3, r0
 8007962:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00f      	beq.n	800798a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f918 	bl	8007ba2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fe ff7f 	bl	800687e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007988:	e014      	b.n	80079b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f9d4 	bl	8007d38 <USBD_CtlSendStatus>
      break;
 8007990:	e010      	b.n	80079b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f9d0 	bl	8007d38 <USBD_CtlSendStatus>
      break;
 8007998:	e00c      	b.n	80079b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f900 	bl	8007ba2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079a2:	4b07      	ldr	r3, [pc, #28]	; (80079c0 <USBD_SetConfig+0x150>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7fe ff68 	bl	800687e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80079ae:	2303      	movs	r3, #3
 80079b0:	73fb      	strb	r3, [r7, #15]
      break;
 80079b2:	bf00      	nop
  }

  return ret;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200001c4 	.word	0x200001c4

080079c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	88db      	ldrh	r3, [r3, #6]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d004      	beq.n	80079e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8e2 	bl	8007ba2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079de:	e023      	b.n	8007a28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	dc02      	bgt.n	80079f2 <USBD_GetConfig+0x2e>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dc03      	bgt.n	80079f8 <USBD_GetConfig+0x34>
 80079f0:	e015      	b.n	8007a1e <USBD_GetConfig+0x5a>
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d00b      	beq.n	8007a0e <USBD_GetConfig+0x4a>
 80079f6:	e012      	b.n	8007a1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3308      	adds	r3, #8
 8007a02:	2201      	movs	r2, #1
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f93c 	bl	8007c84 <USBD_CtlSendData>
        break;
 8007a0c:	e00c      	b.n	8007a28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3304      	adds	r3, #4
 8007a12:	2201      	movs	r2, #1
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f934 	bl	8007c84 <USBD_CtlSendData>
        break;
 8007a1c:	e004      	b.n	8007a28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f8be 	bl	8007ba2 <USBD_CtlError>
        break;
 8007a26:	bf00      	nop
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d81e      	bhi.n	8007a86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	88db      	ldrh	r3, [r3, #6]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d004      	beq.n	8007a5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8a5 	bl	8007ba2 <USBD_CtlError>
        break;
 8007a58:	e01a      	b.n	8007a90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d005      	beq.n	8007a76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f043 0202 	orr.w	r2, r3, #2
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f900 	bl	8007c84 <USBD_CtlSendData>
      break;
 8007a84:	e004      	b.n	8007a90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f88a 	bl	8007ba2 <USBD_CtlError>
      break;
 8007a8e:	bf00      	nop
  }
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d107      	bne.n	8007aba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f940 	bl	8007d38 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ab8:	e013      	b.n	8007ae2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	885b      	ldrh	r3, [r3, #2]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d10b      	bne.n	8007ada <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	889b      	ldrh	r3, [r3, #4]
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f930 	bl	8007d38 <USBD_CtlSendStatus>
}
 8007ad8:	e003      	b.n	8007ae2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f860 	bl	8007ba2 <USBD_CtlError>
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d80b      	bhi.n	8007b1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	885b      	ldrh	r3, [r3, #2]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d10c      	bne.n	8007b24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f910 	bl	8007d38 <USBD_CtlSendStatus>
      }
      break;
 8007b18:	e004      	b.n	8007b24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f840 	bl	8007ba2 <USBD_CtlError>
      break;
 8007b22:	e000      	b.n	8007b26 <USBD_ClrFeature+0x3c>
      break;
 8007b24:	bf00      	nop
  }
}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	781a      	ldrb	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f7ff fa17 	bl	8006f8c <SWAPBYTE>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	461a      	mov	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f7ff fa0a 	bl	8006f8c <SWAPBYTE>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7ff f9fd 	bl	8006f8c <SWAPBYTE>
 8007b92:	4603      	mov	r3, r0
 8007b94:	461a      	mov	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	80da      	strh	r2, [r3, #6]
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bac:	2180      	movs	r1, #128	; 0x80
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fd14 	bl	80085dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fd10 	bl	80085dc <USBD_LL_StallEP>
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d036      	beq.n	8007c48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007bde:	6938      	ldr	r0, [r7, #16]
 8007be0:	f000 f836 	bl	8007c50 <USBD_GetLen>
 8007be4:	4603      	mov	r3, r0
 8007be6:	3301      	adds	r3, #1
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	7812      	ldrb	r2, [r2, #0]
 8007bfc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	3301      	adds	r3, #1
 8007c02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	4413      	add	r3, r2
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	3301      	adds	r3, #1
 8007c12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c14:	e013      	b.n	8007c3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	7812      	ldrb	r2, [r2, #0]
 8007c20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	3301      	adds	r3, #1
 8007c26:	613b      	str	r3, [r7, #16]
    idx++;
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	4413      	add	r3, r2
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e7      	bne.n	8007c16 <USBD_GetString+0x52>
 8007c46:	e000      	b.n	8007c4a <USBD_GetString+0x86>
    return;
 8007c48:	bf00      	nop
  }
}
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c60:	e005      	b.n	8007c6e <USBD_GetLen+0x1e>
  {
    len++;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	3301      	adds	r3, #1
 8007c66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1f5      	bne.n	8007c62 <USBD_GetLen+0x12>
  }

  return len;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fd1f 	bl	80086ee <USBD_LL_Transmit>

  return USBD_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	2100      	movs	r1, #0
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fd0e 	bl	80086ee <USBD_LL_Transmit>

  return USBD_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2203      	movs	r2, #3
 8007cec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	2100      	movs	r1, #0
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 fd12 	bl	8008730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	2100      	movs	r1, #0
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 fd01 	bl	8008730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2204      	movs	r2, #4
 8007d44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fccd 	bl	80086ee <USBD_LL_Transmit>

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2205      	movs	r2, #5
 8007d6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2200      	movs	r2, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fcdb 	bl	8008730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4912      	ldr	r1, [pc, #72]	; (8007dd4 <MX_USB_DEVICE_Init+0x50>)
 8007d8c:	4812      	ldr	r0, [pc, #72]	; (8007dd8 <MX_USB_DEVICE_Init+0x54>)
 8007d8e:	f7fe fcdd 	bl	800674c <USBD_Init>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d98:	f7f8 fdbc 	bl	8000914 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d9c:	490f      	ldr	r1, [pc, #60]	; (8007ddc <MX_USB_DEVICE_Init+0x58>)
 8007d9e:	480e      	ldr	r0, [pc, #56]	; (8007dd8 <MX_USB_DEVICE_Init+0x54>)
 8007da0:	f7fe fd04 	bl	80067ac <USBD_RegisterClass>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007daa:	f7f8 fdb3 	bl	8000914 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007dae:	490c      	ldr	r1, [pc, #48]	; (8007de0 <MX_USB_DEVICE_Init+0x5c>)
 8007db0:	4809      	ldr	r0, [pc, #36]	; (8007dd8 <MX_USB_DEVICE_Init+0x54>)
 8007db2:	f7fe fbf5 	bl	80065a0 <USBD_CDC_RegisterInterface>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007dbc:	f7f8 fdaa 	bl	8000914 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007dc0:	4805      	ldr	r0, [pc, #20]	; (8007dd8 <MX_USB_DEVICE_Init+0x54>)
 8007dc2:	f7fe fd29 	bl	8006818 <USBD_Start>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007dcc:	f7f8 fda2 	bl	8000914 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007dd0:	bf00      	nop
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	200000ac 	.word	0x200000ac
 8007dd8:	200001c8 	.word	0x200001c8
 8007ddc:	20000018 	.word	0x20000018
 8007de0:	20000098 	.word	0x20000098

08007de4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007de8:	2200      	movs	r2, #0
 8007dea:	4905      	ldr	r1, [pc, #20]	; (8007e00 <CDC_Init_FS+0x1c>)
 8007dec:	4805      	ldr	r0, [pc, #20]	; (8007e04 <CDC_Init_FS+0x20>)
 8007dee:	f7fe fbf1 	bl	80065d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007df2:	4905      	ldr	r1, [pc, #20]	; (8007e08 <CDC_Init_FS+0x24>)
 8007df4:	4803      	ldr	r0, [pc, #12]	; (8007e04 <CDC_Init_FS+0x20>)
 8007df6:	f7fe fc0f 	bl	8006618 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007dfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20000ca4 	.word	0x20000ca4
 8007e04:	200001c8 	.word	0x200001c8
 8007e08:	200004a4 	.word	0x200004a4

08007e0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	71fb      	strb	r3, [r7, #7]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	2b23      	cmp	r3, #35	; 0x23
 8007e30:	d84a      	bhi.n	8007ec8 <CDC_Control_FS+0xac>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <CDC_Control_FS+0x1c>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007ec9 	.word	0x08007ec9
 8007e3c:	08007ec9 	.word	0x08007ec9
 8007e40:	08007ec9 	.word	0x08007ec9
 8007e44:	08007ec9 	.word	0x08007ec9
 8007e48:	08007ec9 	.word	0x08007ec9
 8007e4c:	08007ec9 	.word	0x08007ec9
 8007e50:	08007ec9 	.word	0x08007ec9
 8007e54:	08007ec9 	.word	0x08007ec9
 8007e58:	08007ec9 	.word	0x08007ec9
 8007e5c:	08007ec9 	.word	0x08007ec9
 8007e60:	08007ec9 	.word	0x08007ec9
 8007e64:	08007ec9 	.word	0x08007ec9
 8007e68:	08007ec9 	.word	0x08007ec9
 8007e6c:	08007ec9 	.word	0x08007ec9
 8007e70:	08007ec9 	.word	0x08007ec9
 8007e74:	08007ec9 	.word	0x08007ec9
 8007e78:	08007ec9 	.word	0x08007ec9
 8007e7c:	08007ec9 	.word	0x08007ec9
 8007e80:	08007ec9 	.word	0x08007ec9
 8007e84:	08007ec9 	.word	0x08007ec9
 8007e88:	08007ec9 	.word	0x08007ec9
 8007e8c:	08007ec9 	.word	0x08007ec9
 8007e90:	08007ec9 	.word	0x08007ec9
 8007e94:	08007ec9 	.word	0x08007ec9
 8007e98:	08007ec9 	.word	0x08007ec9
 8007e9c:	08007ec9 	.word	0x08007ec9
 8007ea0:	08007ec9 	.word	0x08007ec9
 8007ea4:	08007ec9 	.word	0x08007ec9
 8007ea8:	08007ec9 	.word	0x08007ec9
 8007eac:	08007ec9 	.word	0x08007ec9
 8007eb0:	08007ec9 	.word	0x08007ec9
 8007eb4:	08007ec9 	.word	0x08007ec9
 8007eb8:	08007ec9 	.word	0x08007ec9
 8007ebc:	08007ec9 	.word	0x08007ec9
 8007ec0:	08007ec9 	.word	0x08007ec9
 8007ec4:	08007ec9 	.word	0x08007ec9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ec8:	bf00      	nop
  }

  return (USBD_OK);
 8007eca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	4805      	ldr	r0, [pc, #20]	; (8007efc <CDC_Receive_FS+0x24>)
 8007ee6:	f7fe fb97 	bl	8006618 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007eea:	4804      	ldr	r0, [pc, #16]	; (8007efc <CDC_Receive_FS+0x24>)
 8007eec:	f7fe fbf8 	bl	80066e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007ef0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	200001c8 	.word	0x200001c8

08007f00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f10:	4b0d      	ldr	r3, [pc, #52]	; (8007f48 <CDC_Transmit_FS+0x48>)
 8007f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e00b      	b.n	8007f3e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f26:	887b      	ldrh	r3, [r7, #2]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4806      	ldr	r0, [pc, #24]	; (8007f48 <CDC_Transmit_FS+0x48>)
 8007f2e:	f7fe fb51 	bl	80065d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f32:	4805      	ldr	r0, [pc, #20]	; (8007f48 <CDC_Transmit_FS+0x48>)
 8007f34:	f7fe fb8e 	bl	8006654 <USBD_CDC_TransmitPacket>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	200001c8 	.word	0x200001c8

08007f4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	6039      	str	r1, [r7, #0]
 8007f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2212      	movs	r2, #18
 8007f80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f82:	4b03      	ldr	r3, [pc, #12]	; (8007f90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	200000cc 	.word	0x200000cc

08007f94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2204      	movs	r2, #4
 8007fa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fa6:	4b03      	ldr	r3, [pc, #12]	; (8007fb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	200000ec 	.word	0x200000ec

08007fb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	6039      	str	r1, [r7, #0]
 8007fc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fc4:	79fb      	ldrb	r3, [r7, #7]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d105      	bne.n	8007fd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	4907      	ldr	r1, [pc, #28]	; (8007fec <USBD_FS_ProductStrDescriptor+0x34>)
 8007fce:	4808      	ldr	r0, [pc, #32]	; (8007ff0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fd0:	f7ff fdf8 	bl	8007bc4 <USBD_GetString>
 8007fd4:	e004      	b.n	8007fe0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	4904      	ldr	r1, [pc, #16]	; (8007fec <USBD_FS_ProductStrDescriptor+0x34>)
 8007fda:	4805      	ldr	r0, [pc, #20]	; (8007ff0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fdc:	f7ff fdf2 	bl	8007bc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fe0:	4b02      	ldr	r3, [pc, #8]	; (8007fec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	200014a4 	.word	0x200014a4
 8007ff0:	08009244 	.word	0x08009244

08007ff4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	6039      	str	r1, [r7, #0]
 8007ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	4904      	ldr	r1, [pc, #16]	; (8008014 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008004:	4804      	ldr	r0, [pc, #16]	; (8008018 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008006:	f7ff fddd 	bl	8007bc4 <USBD_GetString>
  return USBD_StrDesc;
 800800a:	4b02      	ldr	r3, [pc, #8]	; (8008014 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	200014a4 	.word	0x200014a4
 8008018:	08009254 	.word	0x08009254

0800801c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	6039      	str	r1, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	221a      	movs	r2, #26
 800802c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800802e:	f000 f855 	bl	80080dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008032:	4b02      	ldr	r3, [pc, #8]	; (800803c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	200000f0 	.word	0x200000f0

08008040 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	6039      	str	r1, [r7, #0]
 800804a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d105      	bne.n	800805e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	4907      	ldr	r1, [pc, #28]	; (8008074 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008056:	4808      	ldr	r0, [pc, #32]	; (8008078 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008058:	f7ff fdb4 	bl	8007bc4 <USBD_GetString>
 800805c:	e004      	b.n	8008068 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	4904      	ldr	r1, [pc, #16]	; (8008074 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008062:	4805      	ldr	r0, [pc, #20]	; (8008078 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008064:	f7ff fdae 	bl	8007bc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008068:	4b02      	ldr	r3, [pc, #8]	; (8008074 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	200014a4 	.word	0x200014a4
 8008078:	08009268 	.word	0x08009268

0800807c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	6039      	str	r1, [r7, #0]
 8008086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	4907      	ldr	r1, [pc, #28]	; (80080b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008092:	4808      	ldr	r0, [pc, #32]	; (80080b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008094:	f7ff fd96 	bl	8007bc4 <USBD_GetString>
 8008098:	e004      	b.n	80080a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	4904      	ldr	r1, [pc, #16]	; (80080b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800809e:	4805      	ldr	r0, [pc, #20]	; (80080b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080a0:	f7ff fd90 	bl	8007bc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080a4:	4b02      	ldr	r3, [pc, #8]	; (80080b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	200014a4 	.word	0x200014a4
 80080b4:	08009274 	.word	0x08009274

080080b8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	6039      	str	r1, [r7, #0]
 80080c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	220c      	movs	r2, #12
 80080c8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80080ca:	4b03      	ldr	r3, [pc, #12]	; (80080d8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	200000e0 	.word	0x200000e0

080080dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080e2:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <Get_SerialNum+0x44>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080e8:	4b0e      	ldr	r3, [pc, #56]	; (8008124 <Get_SerialNum+0x48>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080ee:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <Get_SerialNum+0x4c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4413      	add	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d009      	beq.n	8008116 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008102:	2208      	movs	r2, #8
 8008104:	4909      	ldr	r1, [pc, #36]	; (800812c <Get_SerialNum+0x50>)
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 f814 	bl	8008134 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800810c:	2204      	movs	r2, #4
 800810e:	4908      	ldr	r1, [pc, #32]	; (8008130 <Get_SerialNum+0x54>)
 8008110:	68b8      	ldr	r0, [r7, #8]
 8008112:	f000 f80f 	bl	8008134 <IntToUnicode>
  }
}
 8008116:	bf00      	nop
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	1fff7a10 	.word	0x1fff7a10
 8008124:	1fff7a14 	.word	0x1fff7a14
 8008128:	1fff7a18 	.word	0x1fff7a18
 800812c:	200000f2 	.word	0x200000f2
 8008130:	20000102 	.word	0x20000102

08008134 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008146:	2300      	movs	r3, #0
 8008148:	75fb      	strb	r3, [r7, #23]
 800814a:	e027      	b.n	800819c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	0f1b      	lsrs	r3, r3, #28
 8008150:	2b09      	cmp	r3, #9
 8008152:	d80b      	bhi.n	800816c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	0f1b      	lsrs	r3, r3, #28
 8008158:	b2da      	uxtb	r2, r3
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	4619      	mov	r1, r3
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	440b      	add	r3, r1
 8008164:	3230      	adds	r2, #48	; 0x30
 8008166:	b2d2      	uxtb	r2, r2
 8008168:	701a      	strb	r2, [r3, #0]
 800816a:	e00a      	b.n	8008182 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	0f1b      	lsrs	r3, r3, #28
 8008170:	b2da      	uxtb	r2, r3
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	4619      	mov	r1, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	440b      	add	r3, r1
 800817c:	3237      	adds	r2, #55	; 0x37
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	011b      	lsls	r3, r3, #4
 8008186:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	3301      	adds	r3, #1
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	4413      	add	r3, r2
 8008192:	2200      	movs	r2, #0
 8008194:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008196:	7dfb      	ldrb	r3, [r7, #23]
 8008198:	3301      	adds	r3, #1
 800819a:	75fb      	strb	r3, [r7, #23]
 800819c:	7dfa      	ldrb	r2, [r7, #23]
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d3d3      	bcc.n	800814c <IntToUnicode+0x18>
  }
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
	...

080081b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b0a0      	sub	sp, #128	; 0x80
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	605a      	str	r2, [r3, #4]
 80081c6:	609a      	str	r2, [r3, #8]
 80081c8:	60da      	str	r2, [r3, #12]
 80081ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80081cc:	f107 0310 	add.w	r3, r7, #16
 80081d0:	225c      	movs	r2, #92	; 0x5c
 80081d2:	2100      	movs	r1, #0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fb9b 	bl	8008910 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081e2:	d154      	bne.n	800828e <HAL_PCD_MspInit+0xda>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80081e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 80081ea:	2304      	movs	r3, #4
 80081ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 80081ee:	2360      	movs	r3, #96	; 0x60
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80081f2:	2302      	movs	r3, #2
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80081f6:	2304      	movs	r3, #4
 80081f8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80081fa:	2301      	movs	r3, #1
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80081fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008202:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008204:	f107 0310 	add.w	r3, r7, #16
 8008208:	4618      	mov	r0, r3
 800820a:	f7fb f989 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8008214:	f7f8 fb7e 	bl	8000914 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	4b1e      	ldr	r3, [pc, #120]	; (8008298 <HAL_PCD_MspInit+0xe4>)
 800821e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008220:	4a1d      	ldr	r2, [pc, #116]	; (8008298 <HAL_PCD_MspInit+0xe4>)
 8008222:	f043 0301 	orr.w	r3, r3, #1
 8008226:	6313      	str	r3, [r2, #48]	; 0x30
 8008228:	4b1b      	ldr	r3, [pc, #108]	; (8008298 <HAL_PCD_MspInit+0xe4>)
 800822a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008234:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008238:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800823a:	2302      	movs	r3, #2
 800823c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800823e:	2300      	movs	r3, #0
 8008240:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008242:	2303      	movs	r3, #3
 8008244:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008246:	230a      	movs	r3, #10
 8008248:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800824a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800824e:	4619      	mov	r1, r3
 8008250:	4812      	ldr	r0, [pc, #72]	; (800829c <HAL_PCD_MspInit+0xe8>)
 8008252:	f7f9 fbc5 	bl	80019e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008256:	4b10      	ldr	r3, [pc, #64]	; (8008298 <HAL_PCD_MspInit+0xe4>)
 8008258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825a:	4a0f      	ldr	r2, [pc, #60]	; (8008298 <HAL_PCD_MspInit+0xe4>)
 800825c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008260:	6353      	str	r3, [r2, #52]	; 0x34
 8008262:	2300      	movs	r3, #0
 8008264:	60bb      	str	r3, [r7, #8]
 8008266:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <HAL_PCD_MspInit+0xe4>)
 8008268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800826a:	4a0b      	ldr	r2, [pc, #44]	; (8008298 <HAL_PCD_MspInit+0xe4>)
 800826c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008270:	6453      	str	r3, [r2, #68]	; 0x44
 8008272:	4b09      	ldr	r3, [pc, #36]	; (8008298 <HAL_PCD_MspInit+0xe4>)
 8008274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800827a:	60bb      	str	r3, [r7, #8]
 800827c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800827e:	2200      	movs	r2, #0
 8008280:	2100      	movs	r1, #0
 8008282:	2043      	movs	r0, #67	; 0x43
 8008284:	f7f9 fb75 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008288:	2043      	movs	r0, #67	; 0x43
 800828a:	f7f9 fb8e 	bl	80019aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800828e:	bf00      	nop
 8008290:	3780      	adds	r7, #128	; 0x80
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	40023800 	.word	0x40023800
 800829c:	40020000 	.word	0x40020000

080082a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80082b4:	4619      	mov	r1, r3
 80082b6:	4610      	mov	r0, r2
 80082b8:	f7fe fafb 	bl	80068b2 <USBD_LL_SetupStage>
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	78fb      	ldrb	r3, [r7, #3]
 80082ec:	4619      	mov	r1, r3
 80082ee:	f7fe fb35 	bl	800695c <USBD_LL_DataOutStage>
}
 80082f2:	bf00      	nop
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b082      	sub	sp, #8
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	460b      	mov	r3, r1
 8008304:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800830c:	78fa      	ldrb	r2, [r7, #3]
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	4613      	mov	r3, r2
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	440b      	add	r3, r1
 800831a:	334c      	adds	r3, #76	; 0x4c
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	4619      	mov	r1, r3
 8008322:	f7fe fbce 	bl	8006ac2 <USBD_LL_DataInStage>
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800833c:	4618      	mov	r0, r3
 800833e:	f7fe fd02 	bl	8006d46 <USBD_LL_SOF>
}
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008352:	2301      	movs	r3, #1
 8008354:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d102      	bne.n	8008364 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800835e:	2300      	movs	r3, #0
 8008360:	73fb      	strb	r3, [r7, #15]
 8008362:	e008      	b.n	8008376 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d102      	bne.n	8008372 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800836c:	2301      	movs	r3, #1
 800836e:	73fb      	strb	r3, [r7, #15]
 8008370:	e001      	b.n	8008376 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008372:	f7f8 facf 	bl	8000914 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800837c:	7bfa      	ldrb	r2, [r7, #15]
 800837e:	4611      	mov	r1, r2
 8008380:	4618      	mov	r0, r3
 8008382:	f7fe fca2 	bl	8006cca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800838c:	4618      	mov	r0, r3
 800838e:	f7fe fc4a 	bl	8006c26 <USBD_LL_Reset>
}
 8008392:	bf00      	nop
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
	...

0800839c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fc9d 	bl	8006cea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6812      	ldr	r2, [r2, #0]
 80083be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083c2:	f043 0301 	orr.w	r3, r3, #1
 80083c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083d0:	4b04      	ldr	r3, [pc, #16]	; (80083e4 <HAL_PCD_SuspendCallback+0x48>)
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	4a03      	ldr	r2, [pc, #12]	; (80083e4 <HAL_PCD_SuspendCallback+0x48>)
 80083d6:	f043 0306 	orr.w	r3, r3, #6
 80083da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	e000ed00 	.word	0xe000ed00

080083e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fc8d 	bl	8006d16 <USBD_LL_Resume>
}
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008416:	78fa      	ldrb	r2, [r7, #3]
 8008418:	4611      	mov	r1, r2
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe fce5 	bl	8006dea <USBD_LL_IsoOUTIncomplete>
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800843a:	78fa      	ldrb	r2, [r7, #3]
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe fca1 	bl	8006d86 <USBD_LL_IsoINIncomplete>
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe fcf7 	bl	8006e4e <USBD_LL_DevConnected>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe fcf4 	bl	8006e64 <USBD_LL_DevDisconnected>
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d13c      	bne.n	800850e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008494:	4a20      	ldr	r2, [pc, #128]	; (8008518 <USBD_LL_Init+0x94>)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a1e      	ldr	r2, [pc, #120]	; (8008518 <USBD_LL_Init+0x94>)
 80084a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084a4:	4b1c      	ldr	r3, [pc, #112]	; (8008518 <USBD_LL_Init+0x94>)
 80084a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80084ac:	4b1a      	ldr	r3, [pc, #104]	; (8008518 <USBD_LL_Init+0x94>)
 80084ae:	2206      	movs	r2, #6
 80084b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084b2:	4b19      	ldr	r3, [pc, #100]	; (8008518 <USBD_LL_Init+0x94>)
 80084b4:	2202      	movs	r2, #2
 80084b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084b8:	4b17      	ldr	r3, [pc, #92]	; (8008518 <USBD_LL_Init+0x94>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084be:	4b16      	ldr	r3, [pc, #88]	; (8008518 <USBD_LL_Init+0x94>)
 80084c0:	2202      	movs	r2, #2
 80084c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084c4:	4b14      	ldr	r3, [pc, #80]	; (8008518 <USBD_LL_Init+0x94>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80084ca:	4b13      	ldr	r3, [pc, #76]	; (8008518 <USBD_LL_Init+0x94>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80084d0:	4b11      	ldr	r3, [pc, #68]	; (8008518 <USBD_LL_Init+0x94>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80084d6:	4b10      	ldr	r3, [pc, #64]	; (8008518 <USBD_LL_Init+0x94>)
 80084d8:	2200      	movs	r2, #0
 80084da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80084dc:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <USBD_LL_Init+0x94>)
 80084de:	2200      	movs	r2, #0
 80084e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80084e2:	480d      	ldr	r0, [pc, #52]	; (8008518 <USBD_LL_Init+0x94>)
 80084e4:	f7f9 fc10 	bl	8001d08 <HAL_PCD_Init>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80084ee:	f7f8 fa11 	bl	8000914 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80084f2:	2180      	movs	r1, #128	; 0x80
 80084f4:	4808      	ldr	r0, [pc, #32]	; (8008518 <USBD_LL_Init+0x94>)
 80084f6:	f7fa fe9c 	bl	8003232 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80084fa:	2240      	movs	r2, #64	; 0x40
 80084fc:	2100      	movs	r1, #0
 80084fe:	4806      	ldr	r0, [pc, #24]	; (8008518 <USBD_LL_Init+0x94>)
 8008500:	f7fa fe50 	bl	80031a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008504:	2280      	movs	r2, #128	; 0x80
 8008506:	2101      	movs	r1, #1
 8008508:	4803      	ldr	r0, [pc, #12]	; (8008518 <USBD_LL_Init+0x94>)
 800850a:	f7fa fe4b 	bl	80031a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	200016a4 	.word	0x200016a4

0800851c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008532:	4618      	mov	r0, r3
 8008534:	f7f9 fd0c 	bl	8001f50 <HAL_PCD_Start>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f990 	bl	8008864 <USBD_Get_USB_Status>
 8008544:	4603      	mov	r3, r0
 8008546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008548:	7bbb      	ldrb	r3, [r7, #14]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	4608      	mov	r0, r1
 800855c:	4611      	mov	r1, r2
 800855e:	461a      	mov	r2, r3
 8008560:	4603      	mov	r3, r0
 8008562:	70fb      	strb	r3, [r7, #3]
 8008564:	460b      	mov	r3, r1
 8008566:	70bb      	strb	r3, [r7, #2]
 8008568:	4613      	mov	r3, r2
 800856a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800857a:	78bb      	ldrb	r3, [r7, #2]
 800857c:	883a      	ldrh	r2, [r7, #0]
 800857e:	78f9      	ldrb	r1, [r7, #3]
 8008580:	f7fa fa0a 	bl	8002998 <HAL_PCD_EP_Open>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f96a 	bl	8008864 <USBD_Get_USB_Status>
 8008590:	4603      	mov	r3, r0
 8008592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008594:	7bbb      	ldrb	r3, [r7, #14]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085b8:	78fa      	ldrb	r2, [r7, #3]
 80085ba:	4611      	mov	r1, r2
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fa fa53 	bl	8002a68 <HAL_PCD_EP_Close>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 f94b 	bl	8008864 <USBD_Get_USB_Status>
 80085ce:	4603      	mov	r3, r0
 80085d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085f6:	78fa      	ldrb	r2, [r7, #3]
 80085f8:	4611      	mov	r1, r2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fa fb2b 	bl	8002c56 <HAL_PCD_EP_SetStall>
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	4618      	mov	r0, r3
 8008608:	f000 f92c 	bl	8008864 <USBD_Get_USB_Status>
 800860c:	4603      	mov	r3, r0
 800860e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008610:	7bbb      	ldrb	r3, [r7, #14]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	460b      	mov	r3, r1
 8008624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008634:	78fa      	ldrb	r2, [r7, #3]
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f7fa fb70 	bl	8002d1e <HAL_PCD_EP_ClrStall>
 800863e:	4603      	mov	r3, r0
 8008640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 f90d 	bl	8008864 <USBD_Get_USB_Status>
 800864a:	4603      	mov	r3, r0
 800864c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800864e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800866a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800866c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008670:	2b00      	cmp	r3, #0
 8008672:	da0b      	bge.n	800868c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800867a:	68f9      	ldr	r1, [r7, #12]
 800867c:	4613      	mov	r3, r2
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	333e      	adds	r3, #62	; 0x3e
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	e00b      	b.n	80086a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008692:	68f9      	ldr	r1, [r7, #12]
 8008694:	4613      	mov	r3, r2
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80086a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086ca:	78fa      	ldrb	r2, [r7, #3]
 80086cc:	4611      	mov	r1, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fa f93d 	bl	800294e <HAL_PCD_SetAddress>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f8c2 	bl	8008864 <USBD_Get_USB_Status>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b086      	sub	sp, #24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
 80086fa:	460b      	mov	r3, r1
 80086fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800870c:	7af9      	ldrb	r1, [r7, #11]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	f7fa fa56 	bl	8002bc2 <HAL_PCD_EP_Transmit>
 8008716:	4603      	mov	r3, r0
 8008718:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	4618      	mov	r0, r3
 800871e:	f000 f8a1 	bl	8008864 <USBD_Get_USB_Status>
 8008722:	4603      	mov	r3, r0
 8008724:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008726:	7dbb      	ldrb	r3, [r7, #22]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3718      	adds	r7, #24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	607a      	str	r2, [r7, #4]
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	460b      	mov	r3, r1
 800873e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800874e:	7af9      	ldrb	r1, [r7, #11]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	f7fa f9d2 	bl	8002afc <HAL_PCD_EP_Receive>
 8008758:	4603      	mov	r3, r0
 800875a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800875c:	7dfb      	ldrb	r3, [r7, #23]
 800875e:	4618      	mov	r0, r3
 8008760:	f000 f880 	bl	8008864 <USBD_Get_USB_Status>
 8008764:	4603      	mov	r3, r0
 8008766:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008768:	7dbb      	ldrb	r3, [r7, #22]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	460b      	mov	r3, r1
 800877c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008784:	78fa      	ldrb	r2, [r7, #3]
 8008786:	4611      	mov	r1, r2
 8008788:	4618      	mov	r0, r3
 800878a:	f7fa fa02 	bl	8002b92 <HAL_PCD_EP_GetRxCount>
 800878e:	4603      	mov	r3, r0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <HAL_PCDEx_LPM_Callback+0x18>
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d01f      	beq.n	80087ee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80087ae:	e03b      	b.n	8008828 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80087b8:	f7f8 f83a 	bl	8000830 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087bc:	4b1c      	ldr	r3, [pc, #112]	; (8008830 <HAL_PCDEx_LPM_Callback+0x98>)
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	4a1b      	ldr	r2, [pc, #108]	; (8008830 <HAL_PCDEx_LPM_Callback+0x98>)
 80087c2:	f023 0306 	bic.w	r3, r3, #6
 80087c6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	6812      	ldr	r2, [r2, #0]
 80087d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087da:	f023 0301 	bic.w	r3, r3, #1
 80087de:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe fa95 	bl	8006d16 <USBD_LL_Resume>
    break;
 80087ec:	e01c      	b.n	8008828 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6812      	ldr	r2, [r2, #0]
 80087fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008800:	f043 0301 	orr.w	r3, r3, #1
 8008804:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe fa6c 	bl	8006cea <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d005      	beq.n	8008826 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800881a:	4b05      	ldr	r3, [pc, #20]	; (8008830 <HAL_PCDEx_LPM_Callback+0x98>)
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	4a04      	ldr	r2, [pc, #16]	; (8008830 <HAL_PCDEx_LPM_Callback+0x98>)
 8008820:	f043 0306 	orr.w	r3, r3, #6
 8008824:	6113      	str	r3, [r2, #16]
    break;
 8008826:	bf00      	nop
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	e000ed00 	.word	0xe000ed00

08008834 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800883c:	4b03      	ldr	r3, [pc, #12]	; (800884c <USBD_static_malloc+0x18>)
}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	20001bb0 	.word	0x20001bb0

08008850 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]

}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	2b03      	cmp	r3, #3
 8008876:	d817      	bhi.n	80088a8 <USBD_Get_USB_Status+0x44>
 8008878:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <USBD_Get_USB_Status+0x1c>)
 800887a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887e:	bf00      	nop
 8008880:	08008891 	.word	0x08008891
 8008884:	08008897 	.word	0x08008897
 8008888:	0800889d 	.word	0x0800889d
 800888c:	080088a3 	.word	0x080088a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]
    break;
 8008894:	e00b      	b.n	80088ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008896:	2303      	movs	r3, #3
 8008898:	73fb      	strb	r3, [r7, #15]
    break;
 800889a:	e008      	b.n	80088ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800889c:	2301      	movs	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
    break;
 80088a0:	e005      	b.n	80088ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088a2:	2303      	movs	r3, #3
 80088a4:	73fb      	strb	r3, [r7, #15]
    break;
 80088a6:	e002      	b.n	80088ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088a8:	2303      	movs	r3, #3
 80088aa:	73fb      	strb	r3, [r7, #15]
    break;
 80088ac:	bf00      	nop
  }
  return usb_status;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <__errno>:
 80088bc:	4b01      	ldr	r3, [pc, #4]	; (80088c4 <__errno+0x8>)
 80088be:	6818      	ldr	r0, [r3, #0]
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	2000010c 	.word	0x2000010c

080088c8 <__libc_init_array>:
 80088c8:	b570      	push	{r4, r5, r6, lr}
 80088ca:	4d0d      	ldr	r5, [pc, #52]	; (8008900 <__libc_init_array+0x38>)
 80088cc:	4c0d      	ldr	r4, [pc, #52]	; (8008904 <__libc_init_array+0x3c>)
 80088ce:	1b64      	subs	r4, r4, r5
 80088d0:	10a4      	asrs	r4, r4, #2
 80088d2:	2600      	movs	r6, #0
 80088d4:	42a6      	cmp	r6, r4
 80088d6:	d109      	bne.n	80088ec <__libc_init_array+0x24>
 80088d8:	4d0b      	ldr	r5, [pc, #44]	; (8008908 <__libc_init_array+0x40>)
 80088da:	4c0c      	ldr	r4, [pc, #48]	; (800890c <__libc_init_array+0x44>)
 80088dc:	f000 fc8e 	bl	80091fc <_init>
 80088e0:	1b64      	subs	r4, r4, r5
 80088e2:	10a4      	asrs	r4, r4, #2
 80088e4:	2600      	movs	r6, #0
 80088e6:	42a6      	cmp	r6, r4
 80088e8:	d105      	bne.n	80088f6 <__libc_init_array+0x2e>
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f0:	4798      	blx	r3
 80088f2:	3601      	adds	r6, #1
 80088f4:	e7ee      	b.n	80088d4 <__libc_init_array+0xc>
 80088f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088fa:	4798      	blx	r3
 80088fc:	3601      	adds	r6, #1
 80088fe:	e7f2      	b.n	80088e6 <__libc_init_array+0x1e>
 8008900:	080092d0 	.word	0x080092d0
 8008904:	080092d0 	.word	0x080092d0
 8008908:	080092d0 	.word	0x080092d0
 800890c:	080092d4 	.word	0x080092d4

08008910 <memset>:
 8008910:	4402      	add	r2, r0
 8008912:	4603      	mov	r3, r0
 8008914:	4293      	cmp	r3, r2
 8008916:	d100      	bne.n	800891a <memset+0xa>
 8008918:	4770      	bx	lr
 800891a:	f803 1b01 	strb.w	r1, [r3], #1
 800891e:	e7f9      	b.n	8008914 <memset+0x4>

08008920 <siprintf>:
 8008920:	b40e      	push	{r1, r2, r3}
 8008922:	b500      	push	{lr}
 8008924:	b09c      	sub	sp, #112	; 0x70
 8008926:	ab1d      	add	r3, sp, #116	; 0x74
 8008928:	9002      	str	r0, [sp, #8]
 800892a:	9006      	str	r0, [sp, #24]
 800892c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008930:	4809      	ldr	r0, [pc, #36]	; (8008958 <siprintf+0x38>)
 8008932:	9107      	str	r1, [sp, #28]
 8008934:	9104      	str	r1, [sp, #16]
 8008936:	4909      	ldr	r1, [pc, #36]	; (800895c <siprintf+0x3c>)
 8008938:	f853 2b04 	ldr.w	r2, [r3], #4
 800893c:	9105      	str	r1, [sp, #20]
 800893e:	6800      	ldr	r0, [r0, #0]
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	a902      	add	r1, sp, #8
 8008944:	f000 f868 	bl	8008a18 <_svfiprintf_r>
 8008948:	9b02      	ldr	r3, [sp, #8]
 800894a:	2200      	movs	r2, #0
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	b01c      	add	sp, #112	; 0x70
 8008950:	f85d eb04 	ldr.w	lr, [sp], #4
 8008954:	b003      	add	sp, #12
 8008956:	4770      	bx	lr
 8008958:	2000010c 	.word	0x2000010c
 800895c:	ffff0208 	.word	0xffff0208

08008960 <__ssputs_r>:
 8008960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008964:	688e      	ldr	r6, [r1, #8]
 8008966:	429e      	cmp	r6, r3
 8008968:	4682      	mov	sl, r0
 800896a:	460c      	mov	r4, r1
 800896c:	4690      	mov	r8, r2
 800896e:	461f      	mov	r7, r3
 8008970:	d838      	bhi.n	80089e4 <__ssputs_r+0x84>
 8008972:	898a      	ldrh	r2, [r1, #12]
 8008974:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008978:	d032      	beq.n	80089e0 <__ssputs_r+0x80>
 800897a:	6825      	ldr	r5, [r4, #0]
 800897c:	6909      	ldr	r1, [r1, #16]
 800897e:	eba5 0901 	sub.w	r9, r5, r1
 8008982:	6965      	ldr	r5, [r4, #20]
 8008984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800898c:	3301      	adds	r3, #1
 800898e:	444b      	add	r3, r9
 8008990:	106d      	asrs	r5, r5, #1
 8008992:	429d      	cmp	r5, r3
 8008994:	bf38      	it	cc
 8008996:	461d      	movcc	r5, r3
 8008998:	0553      	lsls	r3, r2, #21
 800899a:	d531      	bpl.n	8008a00 <__ssputs_r+0xa0>
 800899c:	4629      	mov	r1, r5
 800899e:	f000 fb63 	bl	8009068 <_malloc_r>
 80089a2:	4606      	mov	r6, r0
 80089a4:	b950      	cbnz	r0, 80089bc <__ssputs_r+0x5c>
 80089a6:	230c      	movs	r3, #12
 80089a8:	f8ca 3000 	str.w	r3, [sl]
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b2:	81a3      	strh	r3, [r4, #12]
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295
 80089b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089bc:	6921      	ldr	r1, [r4, #16]
 80089be:	464a      	mov	r2, r9
 80089c0:	f000 fabe 	bl	8008f40 <memcpy>
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ce:	81a3      	strh	r3, [r4, #12]
 80089d0:	6126      	str	r6, [r4, #16]
 80089d2:	6165      	str	r5, [r4, #20]
 80089d4:	444e      	add	r6, r9
 80089d6:	eba5 0509 	sub.w	r5, r5, r9
 80089da:	6026      	str	r6, [r4, #0]
 80089dc:	60a5      	str	r5, [r4, #8]
 80089de:	463e      	mov	r6, r7
 80089e0:	42be      	cmp	r6, r7
 80089e2:	d900      	bls.n	80089e6 <__ssputs_r+0x86>
 80089e4:	463e      	mov	r6, r7
 80089e6:	6820      	ldr	r0, [r4, #0]
 80089e8:	4632      	mov	r2, r6
 80089ea:	4641      	mov	r1, r8
 80089ec:	f000 fab6 	bl	8008f5c <memmove>
 80089f0:	68a3      	ldr	r3, [r4, #8]
 80089f2:	1b9b      	subs	r3, r3, r6
 80089f4:	60a3      	str	r3, [r4, #8]
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	4433      	add	r3, r6
 80089fa:	6023      	str	r3, [r4, #0]
 80089fc:	2000      	movs	r0, #0
 80089fe:	e7db      	b.n	80089b8 <__ssputs_r+0x58>
 8008a00:	462a      	mov	r2, r5
 8008a02:	f000 fba5 	bl	8009150 <_realloc_r>
 8008a06:	4606      	mov	r6, r0
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d1e1      	bne.n	80089d0 <__ssputs_r+0x70>
 8008a0c:	6921      	ldr	r1, [r4, #16]
 8008a0e:	4650      	mov	r0, sl
 8008a10:	f000 fabe 	bl	8008f90 <_free_r>
 8008a14:	e7c7      	b.n	80089a6 <__ssputs_r+0x46>
	...

08008a18 <_svfiprintf_r>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	4698      	mov	r8, r3
 8008a1e:	898b      	ldrh	r3, [r1, #12]
 8008a20:	061b      	lsls	r3, r3, #24
 8008a22:	b09d      	sub	sp, #116	; 0x74
 8008a24:	4607      	mov	r7, r0
 8008a26:	460d      	mov	r5, r1
 8008a28:	4614      	mov	r4, r2
 8008a2a:	d50e      	bpl.n	8008a4a <_svfiprintf_r+0x32>
 8008a2c:	690b      	ldr	r3, [r1, #16]
 8008a2e:	b963      	cbnz	r3, 8008a4a <_svfiprintf_r+0x32>
 8008a30:	2140      	movs	r1, #64	; 0x40
 8008a32:	f000 fb19 	bl	8009068 <_malloc_r>
 8008a36:	6028      	str	r0, [r5, #0]
 8008a38:	6128      	str	r0, [r5, #16]
 8008a3a:	b920      	cbnz	r0, 8008a46 <_svfiprintf_r+0x2e>
 8008a3c:	230c      	movs	r3, #12
 8008a3e:	603b      	str	r3, [r7, #0]
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	e0d1      	b.n	8008bea <_svfiprintf_r+0x1d2>
 8008a46:	2340      	movs	r3, #64	; 0x40
 8008a48:	616b      	str	r3, [r5, #20]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4e:	2320      	movs	r3, #32
 8008a50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a58:	2330      	movs	r3, #48	; 0x30
 8008a5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c04 <_svfiprintf_r+0x1ec>
 8008a5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a62:	f04f 0901 	mov.w	r9, #1
 8008a66:	4623      	mov	r3, r4
 8008a68:	469a      	mov	sl, r3
 8008a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a6e:	b10a      	cbz	r2, 8008a74 <_svfiprintf_r+0x5c>
 8008a70:	2a25      	cmp	r2, #37	; 0x25
 8008a72:	d1f9      	bne.n	8008a68 <_svfiprintf_r+0x50>
 8008a74:	ebba 0b04 	subs.w	fp, sl, r4
 8008a78:	d00b      	beq.n	8008a92 <_svfiprintf_r+0x7a>
 8008a7a:	465b      	mov	r3, fp
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	4638      	mov	r0, r7
 8008a82:	f7ff ff6d 	bl	8008960 <__ssputs_r>
 8008a86:	3001      	adds	r0, #1
 8008a88:	f000 80aa 	beq.w	8008be0 <_svfiprintf_r+0x1c8>
 8008a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a8e:	445a      	add	r2, fp
 8008a90:	9209      	str	r2, [sp, #36]	; 0x24
 8008a92:	f89a 3000 	ldrb.w	r3, [sl]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 80a2 	beq.w	8008be0 <_svfiprintf_r+0x1c8>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aa6:	f10a 0a01 	add.w	sl, sl, #1
 8008aaa:	9304      	str	r3, [sp, #16]
 8008aac:	9307      	str	r3, [sp, #28]
 8008aae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ab4:	4654      	mov	r4, sl
 8008ab6:	2205      	movs	r2, #5
 8008ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008abc:	4851      	ldr	r0, [pc, #324]	; (8008c04 <_svfiprintf_r+0x1ec>)
 8008abe:	f7f7 fbaf 	bl	8000220 <memchr>
 8008ac2:	9a04      	ldr	r2, [sp, #16]
 8008ac4:	b9d8      	cbnz	r0, 8008afe <_svfiprintf_r+0xe6>
 8008ac6:	06d0      	lsls	r0, r2, #27
 8008ac8:	bf44      	itt	mi
 8008aca:	2320      	movmi	r3, #32
 8008acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ad0:	0711      	lsls	r1, r2, #28
 8008ad2:	bf44      	itt	mi
 8008ad4:	232b      	movmi	r3, #43	; 0x2b
 8008ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ada:	f89a 3000 	ldrb.w	r3, [sl]
 8008ade:	2b2a      	cmp	r3, #42	; 0x2a
 8008ae0:	d015      	beq.n	8008b0e <_svfiprintf_r+0xf6>
 8008ae2:	9a07      	ldr	r2, [sp, #28]
 8008ae4:	4654      	mov	r4, sl
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	f04f 0c0a 	mov.w	ip, #10
 8008aec:	4621      	mov	r1, r4
 8008aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008af2:	3b30      	subs	r3, #48	; 0x30
 8008af4:	2b09      	cmp	r3, #9
 8008af6:	d94e      	bls.n	8008b96 <_svfiprintf_r+0x17e>
 8008af8:	b1b0      	cbz	r0, 8008b28 <_svfiprintf_r+0x110>
 8008afa:	9207      	str	r2, [sp, #28]
 8008afc:	e014      	b.n	8008b28 <_svfiprintf_r+0x110>
 8008afe:	eba0 0308 	sub.w	r3, r0, r8
 8008b02:	fa09 f303 	lsl.w	r3, r9, r3
 8008b06:	4313      	orrs	r3, r2
 8008b08:	9304      	str	r3, [sp, #16]
 8008b0a:	46a2      	mov	sl, r4
 8008b0c:	e7d2      	b.n	8008ab4 <_svfiprintf_r+0x9c>
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	1d19      	adds	r1, r3, #4
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	9103      	str	r1, [sp, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bfbb      	ittet	lt
 8008b1a:	425b      	neglt	r3, r3
 8008b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b20:	9307      	strge	r3, [sp, #28]
 8008b22:	9307      	strlt	r3, [sp, #28]
 8008b24:	bfb8      	it	lt
 8008b26:	9204      	strlt	r2, [sp, #16]
 8008b28:	7823      	ldrb	r3, [r4, #0]
 8008b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b2c:	d10c      	bne.n	8008b48 <_svfiprintf_r+0x130>
 8008b2e:	7863      	ldrb	r3, [r4, #1]
 8008b30:	2b2a      	cmp	r3, #42	; 0x2a
 8008b32:	d135      	bne.n	8008ba0 <_svfiprintf_r+0x188>
 8008b34:	9b03      	ldr	r3, [sp, #12]
 8008b36:	1d1a      	adds	r2, r3, #4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	9203      	str	r2, [sp, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	bfb8      	it	lt
 8008b40:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b44:	3402      	adds	r4, #2
 8008b46:	9305      	str	r3, [sp, #20]
 8008b48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c14 <_svfiprintf_r+0x1fc>
 8008b4c:	7821      	ldrb	r1, [r4, #0]
 8008b4e:	2203      	movs	r2, #3
 8008b50:	4650      	mov	r0, sl
 8008b52:	f7f7 fb65 	bl	8000220 <memchr>
 8008b56:	b140      	cbz	r0, 8008b6a <_svfiprintf_r+0x152>
 8008b58:	2340      	movs	r3, #64	; 0x40
 8008b5a:	eba0 000a 	sub.w	r0, r0, sl
 8008b5e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b62:	9b04      	ldr	r3, [sp, #16]
 8008b64:	4303      	orrs	r3, r0
 8008b66:	3401      	adds	r4, #1
 8008b68:	9304      	str	r3, [sp, #16]
 8008b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b6e:	4826      	ldr	r0, [pc, #152]	; (8008c08 <_svfiprintf_r+0x1f0>)
 8008b70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b74:	2206      	movs	r2, #6
 8008b76:	f7f7 fb53 	bl	8000220 <memchr>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d038      	beq.n	8008bf0 <_svfiprintf_r+0x1d8>
 8008b7e:	4b23      	ldr	r3, [pc, #140]	; (8008c0c <_svfiprintf_r+0x1f4>)
 8008b80:	bb1b      	cbnz	r3, 8008bca <_svfiprintf_r+0x1b2>
 8008b82:	9b03      	ldr	r3, [sp, #12]
 8008b84:	3307      	adds	r3, #7
 8008b86:	f023 0307 	bic.w	r3, r3, #7
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	9303      	str	r3, [sp, #12]
 8008b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b90:	4433      	add	r3, r6
 8008b92:	9309      	str	r3, [sp, #36]	; 0x24
 8008b94:	e767      	b.n	8008a66 <_svfiprintf_r+0x4e>
 8008b96:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	2001      	movs	r0, #1
 8008b9e:	e7a5      	b.n	8008aec <_svfiprintf_r+0xd4>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	3401      	adds	r4, #1
 8008ba4:	9305      	str	r3, [sp, #20]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	f04f 0c0a 	mov.w	ip, #10
 8008bac:	4620      	mov	r0, r4
 8008bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bb2:	3a30      	subs	r2, #48	; 0x30
 8008bb4:	2a09      	cmp	r2, #9
 8008bb6:	d903      	bls.n	8008bc0 <_svfiprintf_r+0x1a8>
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d0c5      	beq.n	8008b48 <_svfiprintf_r+0x130>
 8008bbc:	9105      	str	r1, [sp, #20]
 8008bbe:	e7c3      	b.n	8008b48 <_svfiprintf_r+0x130>
 8008bc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e7f0      	b.n	8008bac <_svfiprintf_r+0x194>
 8008bca:	ab03      	add	r3, sp, #12
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	462a      	mov	r2, r5
 8008bd0:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <_svfiprintf_r+0x1f8>)
 8008bd2:	a904      	add	r1, sp, #16
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f3af 8000 	nop.w
 8008bda:	1c42      	adds	r2, r0, #1
 8008bdc:	4606      	mov	r6, r0
 8008bde:	d1d6      	bne.n	8008b8e <_svfiprintf_r+0x176>
 8008be0:	89ab      	ldrh	r3, [r5, #12]
 8008be2:	065b      	lsls	r3, r3, #25
 8008be4:	f53f af2c 	bmi.w	8008a40 <_svfiprintf_r+0x28>
 8008be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bea:	b01d      	add	sp, #116	; 0x74
 8008bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf0:	ab03      	add	r3, sp, #12
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	462a      	mov	r2, r5
 8008bf6:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <_svfiprintf_r+0x1f8>)
 8008bf8:	a904      	add	r1, sp, #16
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	f000 f87a 	bl	8008cf4 <_printf_i>
 8008c00:	e7eb      	b.n	8008bda <_svfiprintf_r+0x1c2>
 8008c02:	bf00      	nop
 8008c04:	08009294 	.word	0x08009294
 8008c08:	0800929e 	.word	0x0800929e
 8008c0c:	00000000 	.word	0x00000000
 8008c10:	08008961 	.word	0x08008961
 8008c14:	0800929a 	.word	0x0800929a

08008c18 <_printf_common>:
 8008c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c1c:	4616      	mov	r6, r2
 8008c1e:	4699      	mov	r9, r3
 8008c20:	688a      	ldr	r2, [r1, #8]
 8008c22:	690b      	ldr	r3, [r1, #16]
 8008c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	bfb8      	it	lt
 8008c2c:	4613      	movlt	r3, r2
 8008c2e:	6033      	str	r3, [r6, #0]
 8008c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c34:	4607      	mov	r7, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	b10a      	cbz	r2, 8008c3e <_printf_common+0x26>
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	6033      	str	r3, [r6, #0]
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	0699      	lsls	r1, r3, #26
 8008c42:	bf42      	ittt	mi
 8008c44:	6833      	ldrmi	r3, [r6, #0]
 8008c46:	3302      	addmi	r3, #2
 8008c48:	6033      	strmi	r3, [r6, #0]
 8008c4a:	6825      	ldr	r5, [r4, #0]
 8008c4c:	f015 0506 	ands.w	r5, r5, #6
 8008c50:	d106      	bne.n	8008c60 <_printf_common+0x48>
 8008c52:	f104 0a19 	add.w	sl, r4, #25
 8008c56:	68e3      	ldr	r3, [r4, #12]
 8008c58:	6832      	ldr	r2, [r6, #0]
 8008c5a:	1a9b      	subs	r3, r3, r2
 8008c5c:	42ab      	cmp	r3, r5
 8008c5e:	dc26      	bgt.n	8008cae <_printf_common+0x96>
 8008c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c64:	1e13      	subs	r3, r2, #0
 8008c66:	6822      	ldr	r2, [r4, #0]
 8008c68:	bf18      	it	ne
 8008c6a:	2301      	movne	r3, #1
 8008c6c:	0692      	lsls	r2, r2, #26
 8008c6e:	d42b      	bmi.n	8008cc8 <_printf_common+0xb0>
 8008c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c74:	4649      	mov	r1, r9
 8008c76:	4638      	mov	r0, r7
 8008c78:	47c0      	blx	r8
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d01e      	beq.n	8008cbc <_printf_common+0xa4>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	68e5      	ldr	r5, [r4, #12]
 8008c82:	6832      	ldr	r2, [r6, #0]
 8008c84:	f003 0306 	and.w	r3, r3, #6
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	bf08      	it	eq
 8008c8c:	1aad      	subeq	r5, r5, r2
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	6922      	ldr	r2, [r4, #16]
 8008c92:	bf0c      	ite	eq
 8008c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c98:	2500      	movne	r5, #0
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	bfc4      	itt	gt
 8008c9e:	1a9b      	subgt	r3, r3, r2
 8008ca0:	18ed      	addgt	r5, r5, r3
 8008ca2:	2600      	movs	r6, #0
 8008ca4:	341a      	adds	r4, #26
 8008ca6:	42b5      	cmp	r5, r6
 8008ca8:	d11a      	bne.n	8008ce0 <_printf_common+0xc8>
 8008caa:	2000      	movs	r0, #0
 8008cac:	e008      	b.n	8008cc0 <_printf_common+0xa8>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4652      	mov	r2, sl
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	47c0      	blx	r8
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d103      	bne.n	8008cc4 <_printf_common+0xac>
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc4:	3501      	adds	r5, #1
 8008cc6:	e7c6      	b.n	8008c56 <_printf_common+0x3e>
 8008cc8:	18e1      	adds	r1, r4, r3
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	2030      	movs	r0, #48	; 0x30
 8008cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cd2:	4422      	add	r2, r4
 8008cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cdc:	3302      	adds	r3, #2
 8008cde:	e7c7      	b.n	8008c70 <_printf_common+0x58>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	47c0      	blx	r8
 8008cea:	3001      	adds	r0, #1
 8008cec:	d0e6      	beq.n	8008cbc <_printf_common+0xa4>
 8008cee:	3601      	adds	r6, #1
 8008cf0:	e7d9      	b.n	8008ca6 <_printf_common+0x8e>
	...

08008cf4 <_printf_i>:
 8008cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	7e0f      	ldrb	r7, [r1, #24]
 8008cfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cfc:	2f78      	cmp	r7, #120	; 0x78
 8008cfe:	4691      	mov	r9, r2
 8008d00:	4680      	mov	r8, r0
 8008d02:	460c      	mov	r4, r1
 8008d04:	469a      	mov	sl, r3
 8008d06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d0a:	d807      	bhi.n	8008d1c <_printf_i+0x28>
 8008d0c:	2f62      	cmp	r7, #98	; 0x62
 8008d0e:	d80a      	bhi.n	8008d26 <_printf_i+0x32>
 8008d10:	2f00      	cmp	r7, #0
 8008d12:	f000 80d8 	beq.w	8008ec6 <_printf_i+0x1d2>
 8008d16:	2f58      	cmp	r7, #88	; 0x58
 8008d18:	f000 80a3 	beq.w	8008e62 <_printf_i+0x16e>
 8008d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d24:	e03a      	b.n	8008d9c <_printf_i+0xa8>
 8008d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d2a:	2b15      	cmp	r3, #21
 8008d2c:	d8f6      	bhi.n	8008d1c <_printf_i+0x28>
 8008d2e:	a101      	add	r1, pc, #4	; (adr r1, 8008d34 <_printf_i+0x40>)
 8008d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d34:	08008d8d 	.word	0x08008d8d
 8008d38:	08008da1 	.word	0x08008da1
 8008d3c:	08008d1d 	.word	0x08008d1d
 8008d40:	08008d1d 	.word	0x08008d1d
 8008d44:	08008d1d 	.word	0x08008d1d
 8008d48:	08008d1d 	.word	0x08008d1d
 8008d4c:	08008da1 	.word	0x08008da1
 8008d50:	08008d1d 	.word	0x08008d1d
 8008d54:	08008d1d 	.word	0x08008d1d
 8008d58:	08008d1d 	.word	0x08008d1d
 8008d5c:	08008d1d 	.word	0x08008d1d
 8008d60:	08008ead 	.word	0x08008ead
 8008d64:	08008dd1 	.word	0x08008dd1
 8008d68:	08008e8f 	.word	0x08008e8f
 8008d6c:	08008d1d 	.word	0x08008d1d
 8008d70:	08008d1d 	.word	0x08008d1d
 8008d74:	08008ecf 	.word	0x08008ecf
 8008d78:	08008d1d 	.word	0x08008d1d
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008d1d 	.word	0x08008d1d
 8008d84:	08008d1d 	.word	0x08008d1d
 8008d88:	08008e97 	.word	0x08008e97
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	1d1a      	adds	r2, r3, #4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	602a      	str	r2, [r5, #0]
 8008d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e0a3      	b.n	8008ee8 <_printf_i+0x1f4>
 8008da0:	6820      	ldr	r0, [r4, #0]
 8008da2:	6829      	ldr	r1, [r5, #0]
 8008da4:	0606      	lsls	r6, r0, #24
 8008da6:	f101 0304 	add.w	r3, r1, #4
 8008daa:	d50a      	bpl.n	8008dc2 <_printf_i+0xce>
 8008dac:	680e      	ldr	r6, [r1, #0]
 8008dae:	602b      	str	r3, [r5, #0]
 8008db0:	2e00      	cmp	r6, #0
 8008db2:	da03      	bge.n	8008dbc <_printf_i+0xc8>
 8008db4:	232d      	movs	r3, #45	; 0x2d
 8008db6:	4276      	negs	r6, r6
 8008db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dbc:	485e      	ldr	r0, [pc, #376]	; (8008f38 <_printf_i+0x244>)
 8008dbe:	230a      	movs	r3, #10
 8008dc0:	e019      	b.n	8008df6 <_printf_i+0x102>
 8008dc2:	680e      	ldr	r6, [r1, #0]
 8008dc4:	602b      	str	r3, [r5, #0]
 8008dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dca:	bf18      	it	ne
 8008dcc:	b236      	sxthne	r6, r6
 8008dce:	e7ef      	b.n	8008db0 <_printf_i+0xbc>
 8008dd0:	682b      	ldr	r3, [r5, #0]
 8008dd2:	6820      	ldr	r0, [r4, #0]
 8008dd4:	1d19      	adds	r1, r3, #4
 8008dd6:	6029      	str	r1, [r5, #0]
 8008dd8:	0601      	lsls	r1, r0, #24
 8008dda:	d501      	bpl.n	8008de0 <_printf_i+0xec>
 8008ddc:	681e      	ldr	r6, [r3, #0]
 8008dde:	e002      	b.n	8008de6 <_printf_i+0xf2>
 8008de0:	0646      	lsls	r6, r0, #25
 8008de2:	d5fb      	bpl.n	8008ddc <_printf_i+0xe8>
 8008de4:	881e      	ldrh	r6, [r3, #0]
 8008de6:	4854      	ldr	r0, [pc, #336]	; (8008f38 <_printf_i+0x244>)
 8008de8:	2f6f      	cmp	r7, #111	; 0x6f
 8008dea:	bf0c      	ite	eq
 8008dec:	2308      	moveq	r3, #8
 8008dee:	230a      	movne	r3, #10
 8008df0:	2100      	movs	r1, #0
 8008df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008df6:	6865      	ldr	r5, [r4, #4]
 8008df8:	60a5      	str	r5, [r4, #8]
 8008dfa:	2d00      	cmp	r5, #0
 8008dfc:	bfa2      	ittt	ge
 8008dfe:	6821      	ldrge	r1, [r4, #0]
 8008e00:	f021 0104 	bicge.w	r1, r1, #4
 8008e04:	6021      	strge	r1, [r4, #0]
 8008e06:	b90e      	cbnz	r6, 8008e0c <_printf_i+0x118>
 8008e08:	2d00      	cmp	r5, #0
 8008e0a:	d04d      	beq.n	8008ea8 <_printf_i+0x1b4>
 8008e0c:	4615      	mov	r5, r2
 8008e0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e12:	fb03 6711 	mls	r7, r3, r1, r6
 8008e16:	5dc7      	ldrb	r7, [r0, r7]
 8008e18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e1c:	4637      	mov	r7, r6
 8008e1e:	42bb      	cmp	r3, r7
 8008e20:	460e      	mov	r6, r1
 8008e22:	d9f4      	bls.n	8008e0e <_printf_i+0x11a>
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d10b      	bne.n	8008e40 <_printf_i+0x14c>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	07de      	lsls	r6, r3, #31
 8008e2c:	d508      	bpl.n	8008e40 <_printf_i+0x14c>
 8008e2e:	6923      	ldr	r3, [r4, #16]
 8008e30:	6861      	ldr	r1, [r4, #4]
 8008e32:	4299      	cmp	r1, r3
 8008e34:	bfde      	ittt	le
 8008e36:	2330      	movle	r3, #48	; 0x30
 8008e38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e40:	1b52      	subs	r2, r2, r5
 8008e42:	6122      	str	r2, [r4, #16]
 8008e44:	f8cd a000 	str.w	sl, [sp]
 8008e48:	464b      	mov	r3, r9
 8008e4a:	aa03      	add	r2, sp, #12
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	4640      	mov	r0, r8
 8008e50:	f7ff fee2 	bl	8008c18 <_printf_common>
 8008e54:	3001      	adds	r0, #1
 8008e56:	d14c      	bne.n	8008ef2 <_printf_i+0x1fe>
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5c:	b004      	add	sp, #16
 8008e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e62:	4835      	ldr	r0, [pc, #212]	; (8008f38 <_printf_i+0x244>)
 8008e64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e68:	6829      	ldr	r1, [r5, #0]
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e70:	6029      	str	r1, [r5, #0]
 8008e72:	061d      	lsls	r5, r3, #24
 8008e74:	d514      	bpl.n	8008ea0 <_printf_i+0x1ac>
 8008e76:	07df      	lsls	r7, r3, #31
 8008e78:	bf44      	itt	mi
 8008e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e7e:	6023      	strmi	r3, [r4, #0]
 8008e80:	b91e      	cbnz	r6, 8008e8a <_printf_i+0x196>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	f023 0320 	bic.w	r3, r3, #32
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	2310      	movs	r3, #16
 8008e8c:	e7b0      	b.n	8008df0 <_printf_i+0xfc>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	f043 0320 	orr.w	r3, r3, #32
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	2378      	movs	r3, #120	; 0x78
 8008e98:	4828      	ldr	r0, [pc, #160]	; (8008f3c <_printf_i+0x248>)
 8008e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e9e:	e7e3      	b.n	8008e68 <_printf_i+0x174>
 8008ea0:	0659      	lsls	r1, r3, #25
 8008ea2:	bf48      	it	mi
 8008ea4:	b2b6      	uxthmi	r6, r6
 8008ea6:	e7e6      	b.n	8008e76 <_printf_i+0x182>
 8008ea8:	4615      	mov	r5, r2
 8008eaa:	e7bb      	b.n	8008e24 <_printf_i+0x130>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	6826      	ldr	r6, [r4, #0]
 8008eb0:	6961      	ldr	r1, [r4, #20]
 8008eb2:	1d18      	adds	r0, r3, #4
 8008eb4:	6028      	str	r0, [r5, #0]
 8008eb6:	0635      	lsls	r5, r6, #24
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	d501      	bpl.n	8008ec0 <_printf_i+0x1cc>
 8008ebc:	6019      	str	r1, [r3, #0]
 8008ebe:	e002      	b.n	8008ec6 <_printf_i+0x1d2>
 8008ec0:	0670      	lsls	r0, r6, #25
 8008ec2:	d5fb      	bpl.n	8008ebc <_printf_i+0x1c8>
 8008ec4:	8019      	strh	r1, [r3, #0]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	6123      	str	r3, [r4, #16]
 8008eca:	4615      	mov	r5, r2
 8008ecc:	e7ba      	b.n	8008e44 <_printf_i+0x150>
 8008ece:	682b      	ldr	r3, [r5, #0]
 8008ed0:	1d1a      	adds	r2, r3, #4
 8008ed2:	602a      	str	r2, [r5, #0]
 8008ed4:	681d      	ldr	r5, [r3, #0]
 8008ed6:	6862      	ldr	r2, [r4, #4]
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4628      	mov	r0, r5
 8008edc:	f7f7 f9a0 	bl	8000220 <memchr>
 8008ee0:	b108      	cbz	r0, 8008ee6 <_printf_i+0x1f2>
 8008ee2:	1b40      	subs	r0, r0, r5
 8008ee4:	6060      	str	r0, [r4, #4]
 8008ee6:	6863      	ldr	r3, [r4, #4]
 8008ee8:	6123      	str	r3, [r4, #16]
 8008eea:	2300      	movs	r3, #0
 8008eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef0:	e7a8      	b.n	8008e44 <_printf_i+0x150>
 8008ef2:	6923      	ldr	r3, [r4, #16]
 8008ef4:	462a      	mov	r2, r5
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	4640      	mov	r0, r8
 8008efa:	47d0      	blx	sl
 8008efc:	3001      	adds	r0, #1
 8008efe:	d0ab      	beq.n	8008e58 <_printf_i+0x164>
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	079b      	lsls	r3, r3, #30
 8008f04:	d413      	bmi.n	8008f2e <_printf_i+0x23a>
 8008f06:	68e0      	ldr	r0, [r4, #12]
 8008f08:	9b03      	ldr	r3, [sp, #12]
 8008f0a:	4298      	cmp	r0, r3
 8008f0c:	bfb8      	it	lt
 8008f0e:	4618      	movlt	r0, r3
 8008f10:	e7a4      	b.n	8008e5c <_printf_i+0x168>
 8008f12:	2301      	movs	r3, #1
 8008f14:	4632      	mov	r2, r6
 8008f16:	4649      	mov	r1, r9
 8008f18:	4640      	mov	r0, r8
 8008f1a:	47d0      	blx	sl
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d09b      	beq.n	8008e58 <_printf_i+0x164>
 8008f20:	3501      	adds	r5, #1
 8008f22:	68e3      	ldr	r3, [r4, #12]
 8008f24:	9903      	ldr	r1, [sp, #12]
 8008f26:	1a5b      	subs	r3, r3, r1
 8008f28:	42ab      	cmp	r3, r5
 8008f2a:	dcf2      	bgt.n	8008f12 <_printf_i+0x21e>
 8008f2c:	e7eb      	b.n	8008f06 <_printf_i+0x212>
 8008f2e:	2500      	movs	r5, #0
 8008f30:	f104 0619 	add.w	r6, r4, #25
 8008f34:	e7f5      	b.n	8008f22 <_printf_i+0x22e>
 8008f36:	bf00      	nop
 8008f38:	080092a5 	.word	0x080092a5
 8008f3c:	080092b6 	.word	0x080092b6

08008f40 <memcpy>:
 8008f40:	440a      	add	r2, r1
 8008f42:	4291      	cmp	r1, r2
 8008f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f48:	d100      	bne.n	8008f4c <memcpy+0xc>
 8008f4a:	4770      	bx	lr
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f56:	4291      	cmp	r1, r2
 8008f58:	d1f9      	bne.n	8008f4e <memcpy+0xe>
 8008f5a:	bd10      	pop	{r4, pc}

08008f5c <memmove>:
 8008f5c:	4288      	cmp	r0, r1
 8008f5e:	b510      	push	{r4, lr}
 8008f60:	eb01 0402 	add.w	r4, r1, r2
 8008f64:	d902      	bls.n	8008f6c <memmove+0x10>
 8008f66:	4284      	cmp	r4, r0
 8008f68:	4623      	mov	r3, r4
 8008f6a:	d807      	bhi.n	8008f7c <memmove+0x20>
 8008f6c:	1e43      	subs	r3, r0, #1
 8008f6e:	42a1      	cmp	r1, r4
 8008f70:	d008      	beq.n	8008f84 <memmove+0x28>
 8008f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f7a:	e7f8      	b.n	8008f6e <memmove+0x12>
 8008f7c:	4402      	add	r2, r0
 8008f7e:	4601      	mov	r1, r0
 8008f80:	428a      	cmp	r2, r1
 8008f82:	d100      	bne.n	8008f86 <memmove+0x2a>
 8008f84:	bd10      	pop	{r4, pc}
 8008f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f8e:	e7f7      	b.n	8008f80 <memmove+0x24>

08008f90 <_free_r>:
 8008f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f92:	2900      	cmp	r1, #0
 8008f94:	d044      	beq.n	8009020 <_free_r+0x90>
 8008f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f9a:	9001      	str	r0, [sp, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8008fa2:	bfb8      	it	lt
 8008fa4:	18e4      	addlt	r4, r4, r3
 8008fa6:	f000 f913 	bl	80091d0 <__malloc_lock>
 8008faa:	4a1e      	ldr	r2, [pc, #120]	; (8009024 <_free_r+0x94>)
 8008fac:	9801      	ldr	r0, [sp, #4]
 8008fae:	6813      	ldr	r3, [r2, #0]
 8008fb0:	b933      	cbnz	r3, 8008fc0 <_free_r+0x30>
 8008fb2:	6063      	str	r3, [r4, #4]
 8008fb4:	6014      	str	r4, [r2, #0]
 8008fb6:	b003      	add	sp, #12
 8008fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fbc:	f000 b90e 	b.w	80091dc <__malloc_unlock>
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d908      	bls.n	8008fd6 <_free_r+0x46>
 8008fc4:	6825      	ldr	r5, [r4, #0]
 8008fc6:	1961      	adds	r1, r4, r5
 8008fc8:	428b      	cmp	r3, r1
 8008fca:	bf01      	itttt	eq
 8008fcc:	6819      	ldreq	r1, [r3, #0]
 8008fce:	685b      	ldreq	r3, [r3, #4]
 8008fd0:	1949      	addeq	r1, r1, r5
 8008fd2:	6021      	streq	r1, [r4, #0]
 8008fd4:	e7ed      	b.n	8008fb2 <_free_r+0x22>
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	b10b      	cbz	r3, 8008fe0 <_free_r+0x50>
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	d9fa      	bls.n	8008fd6 <_free_r+0x46>
 8008fe0:	6811      	ldr	r1, [r2, #0]
 8008fe2:	1855      	adds	r5, r2, r1
 8008fe4:	42a5      	cmp	r5, r4
 8008fe6:	d10b      	bne.n	8009000 <_free_r+0x70>
 8008fe8:	6824      	ldr	r4, [r4, #0]
 8008fea:	4421      	add	r1, r4
 8008fec:	1854      	adds	r4, r2, r1
 8008fee:	42a3      	cmp	r3, r4
 8008ff0:	6011      	str	r1, [r2, #0]
 8008ff2:	d1e0      	bne.n	8008fb6 <_free_r+0x26>
 8008ff4:	681c      	ldr	r4, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	6053      	str	r3, [r2, #4]
 8008ffa:	4421      	add	r1, r4
 8008ffc:	6011      	str	r1, [r2, #0]
 8008ffe:	e7da      	b.n	8008fb6 <_free_r+0x26>
 8009000:	d902      	bls.n	8009008 <_free_r+0x78>
 8009002:	230c      	movs	r3, #12
 8009004:	6003      	str	r3, [r0, #0]
 8009006:	e7d6      	b.n	8008fb6 <_free_r+0x26>
 8009008:	6825      	ldr	r5, [r4, #0]
 800900a:	1961      	adds	r1, r4, r5
 800900c:	428b      	cmp	r3, r1
 800900e:	bf04      	itt	eq
 8009010:	6819      	ldreq	r1, [r3, #0]
 8009012:	685b      	ldreq	r3, [r3, #4]
 8009014:	6063      	str	r3, [r4, #4]
 8009016:	bf04      	itt	eq
 8009018:	1949      	addeq	r1, r1, r5
 800901a:	6021      	streq	r1, [r4, #0]
 800901c:	6054      	str	r4, [r2, #4]
 800901e:	e7ca      	b.n	8008fb6 <_free_r+0x26>
 8009020:	b003      	add	sp, #12
 8009022:	bd30      	pop	{r4, r5, pc}
 8009024:	20001dd0 	.word	0x20001dd0

08009028 <sbrk_aligned>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	4e0e      	ldr	r6, [pc, #56]	; (8009064 <sbrk_aligned+0x3c>)
 800902c:	460c      	mov	r4, r1
 800902e:	6831      	ldr	r1, [r6, #0]
 8009030:	4605      	mov	r5, r0
 8009032:	b911      	cbnz	r1, 800903a <sbrk_aligned+0x12>
 8009034:	f000 f8bc 	bl	80091b0 <_sbrk_r>
 8009038:	6030      	str	r0, [r6, #0]
 800903a:	4621      	mov	r1, r4
 800903c:	4628      	mov	r0, r5
 800903e:	f000 f8b7 	bl	80091b0 <_sbrk_r>
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	d00a      	beq.n	800905c <sbrk_aligned+0x34>
 8009046:	1cc4      	adds	r4, r0, #3
 8009048:	f024 0403 	bic.w	r4, r4, #3
 800904c:	42a0      	cmp	r0, r4
 800904e:	d007      	beq.n	8009060 <sbrk_aligned+0x38>
 8009050:	1a21      	subs	r1, r4, r0
 8009052:	4628      	mov	r0, r5
 8009054:	f000 f8ac 	bl	80091b0 <_sbrk_r>
 8009058:	3001      	adds	r0, #1
 800905a:	d101      	bne.n	8009060 <sbrk_aligned+0x38>
 800905c:	f04f 34ff 	mov.w	r4, #4294967295
 8009060:	4620      	mov	r0, r4
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	20001dd4 	.word	0x20001dd4

08009068 <_malloc_r>:
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	1ccd      	adds	r5, r1, #3
 800906e:	f025 0503 	bic.w	r5, r5, #3
 8009072:	3508      	adds	r5, #8
 8009074:	2d0c      	cmp	r5, #12
 8009076:	bf38      	it	cc
 8009078:	250c      	movcc	r5, #12
 800907a:	2d00      	cmp	r5, #0
 800907c:	4607      	mov	r7, r0
 800907e:	db01      	blt.n	8009084 <_malloc_r+0x1c>
 8009080:	42a9      	cmp	r1, r5
 8009082:	d905      	bls.n	8009090 <_malloc_r+0x28>
 8009084:	230c      	movs	r3, #12
 8009086:	603b      	str	r3, [r7, #0]
 8009088:	2600      	movs	r6, #0
 800908a:	4630      	mov	r0, r6
 800908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009090:	4e2e      	ldr	r6, [pc, #184]	; (800914c <_malloc_r+0xe4>)
 8009092:	f000 f89d 	bl	80091d0 <__malloc_lock>
 8009096:	6833      	ldr	r3, [r6, #0]
 8009098:	461c      	mov	r4, r3
 800909a:	bb34      	cbnz	r4, 80090ea <_malloc_r+0x82>
 800909c:	4629      	mov	r1, r5
 800909e:	4638      	mov	r0, r7
 80090a0:	f7ff ffc2 	bl	8009028 <sbrk_aligned>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	4604      	mov	r4, r0
 80090a8:	d14d      	bne.n	8009146 <_malloc_r+0xde>
 80090aa:	6834      	ldr	r4, [r6, #0]
 80090ac:	4626      	mov	r6, r4
 80090ae:	2e00      	cmp	r6, #0
 80090b0:	d140      	bne.n	8009134 <_malloc_r+0xcc>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	4631      	mov	r1, r6
 80090b6:	4638      	mov	r0, r7
 80090b8:	eb04 0803 	add.w	r8, r4, r3
 80090bc:	f000 f878 	bl	80091b0 <_sbrk_r>
 80090c0:	4580      	cmp	r8, r0
 80090c2:	d13a      	bne.n	800913a <_malloc_r+0xd2>
 80090c4:	6821      	ldr	r1, [r4, #0]
 80090c6:	3503      	adds	r5, #3
 80090c8:	1a6d      	subs	r5, r5, r1
 80090ca:	f025 0503 	bic.w	r5, r5, #3
 80090ce:	3508      	adds	r5, #8
 80090d0:	2d0c      	cmp	r5, #12
 80090d2:	bf38      	it	cc
 80090d4:	250c      	movcc	r5, #12
 80090d6:	4629      	mov	r1, r5
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ffa5 	bl	8009028 <sbrk_aligned>
 80090de:	3001      	adds	r0, #1
 80090e0:	d02b      	beq.n	800913a <_malloc_r+0xd2>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	442b      	add	r3, r5
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	e00e      	b.n	8009108 <_malloc_r+0xa0>
 80090ea:	6822      	ldr	r2, [r4, #0]
 80090ec:	1b52      	subs	r2, r2, r5
 80090ee:	d41e      	bmi.n	800912e <_malloc_r+0xc6>
 80090f0:	2a0b      	cmp	r2, #11
 80090f2:	d916      	bls.n	8009122 <_malloc_r+0xba>
 80090f4:	1961      	adds	r1, r4, r5
 80090f6:	42a3      	cmp	r3, r4
 80090f8:	6025      	str	r5, [r4, #0]
 80090fa:	bf18      	it	ne
 80090fc:	6059      	strne	r1, [r3, #4]
 80090fe:	6863      	ldr	r3, [r4, #4]
 8009100:	bf08      	it	eq
 8009102:	6031      	streq	r1, [r6, #0]
 8009104:	5162      	str	r2, [r4, r5]
 8009106:	604b      	str	r3, [r1, #4]
 8009108:	4638      	mov	r0, r7
 800910a:	f104 060b 	add.w	r6, r4, #11
 800910e:	f000 f865 	bl	80091dc <__malloc_unlock>
 8009112:	f026 0607 	bic.w	r6, r6, #7
 8009116:	1d23      	adds	r3, r4, #4
 8009118:	1af2      	subs	r2, r6, r3
 800911a:	d0b6      	beq.n	800908a <_malloc_r+0x22>
 800911c:	1b9b      	subs	r3, r3, r6
 800911e:	50a3      	str	r3, [r4, r2]
 8009120:	e7b3      	b.n	800908a <_malloc_r+0x22>
 8009122:	6862      	ldr	r2, [r4, #4]
 8009124:	42a3      	cmp	r3, r4
 8009126:	bf0c      	ite	eq
 8009128:	6032      	streq	r2, [r6, #0]
 800912a:	605a      	strne	r2, [r3, #4]
 800912c:	e7ec      	b.n	8009108 <_malloc_r+0xa0>
 800912e:	4623      	mov	r3, r4
 8009130:	6864      	ldr	r4, [r4, #4]
 8009132:	e7b2      	b.n	800909a <_malloc_r+0x32>
 8009134:	4634      	mov	r4, r6
 8009136:	6876      	ldr	r6, [r6, #4]
 8009138:	e7b9      	b.n	80090ae <_malloc_r+0x46>
 800913a:	230c      	movs	r3, #12
 800913c:	603b      	str	r3, [r7, #0]
 800913e:	4638      	mov	r0, r7
 8009140:	f000 f84c 	bl	80091dc <__malloc_unlock>
 8009144:	e7a1      	b.n	800908a <_malloc_r+0x22>
 8009146:	6025      	str	r5, [r4, #0]
 8009148:	e7de      	b.n	8009108 <_malloc_r+0xa0>
 800914a:	bf00      	nop
 800914c:	20001dd0 	.word	0x20001dd0

08009150 <_realloc_r>:
 8009150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009154:	4680      	mov	r8, r0
 8009156:	4614      	mov	r4, r2
 8009158:	460e      	mov	r6, r1
 800915a:	b921      	cbnz	r1, 8009166 <_realloc_r+0x16>
 800915c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009160:	4611      	mov	r1, r2
 8009162:	f7ff bf81 	b.w	8009068 <_malloc_r>
 8009166:	b92a      	cbnz	r2, 8009174 <_realloc_r+0x24>
 8009168:	f7ff ff12 	bl	8008f90 <_free_r>
 800916c:	4625      	mov	r5, r4
 800916e:	4628      	mov	r0, r5
 8009170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009174:	f000 f838 	bl	80091e8 <_malloc_usable_size_r>
 8009178:	4284      	cmp	r4, r0
 800917a:	4607      	mov	r7, r0
 800917c:	d802      	bhi.n	8009184 <_realloc_r+0x34>
 800917e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009182:	d812      	bhi.n	80091aa <_realloc_r+0x5a>
 8009184:	4621      	mov	r1, r4
 8009186:	4640      	mov	r0, r8
 8009188:	f7ff ff6e 	bl	8009068 <_malloc_r>
 800918c:	4605      	mov	r5, r0
 800918e:	2800      	cmp	r0, #0
 8009190:	d0ed      	beq.n	800916e <_realloc_r+0x1e>
 8009192:	42bc      	cmp	r4, r7
 8009194:	4622      	mov	r2, r4
 8009196:	4631      	mov	r1, r6
 8009198:	bf28      	it	cs
 800919a:	463a      	movcs	r2, r7
 800919c:	f7ff fed0 	bl	8008f40 <memcpy>
 80091a0:	4631      	mov	r1, r6
 80091a2:	4640      	mov	r0, r8
 80091a4:	f7ff fef4 	bl	8008f90 <_free_r>
 80091a8:	e7e1      	b.n	800916e <_realloc_r+0x1e>
 80091aa:	4635      	mov	r5, r6
 80091ac:	e7df      	b.n	800916e <_realloc_r+0x1e>
	...

080091b0 <_sbrk_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d06      	ldr	r5, [pc, #24]	; (80091cc <_sbrk_r+0x1c>)
 80091b4:	2300      	movs	r3, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	4608      	mov	r0, r1
 80091ba:	602b      	str	r3, [r5, #0]
 80091bc:	f7f7 fc74 	bl	8000aa8 <_sbrk>
 80091c0:	1c43      	adds	r3, r0, #1
 80091c2:	d102      	bne.n	80091ca <_sbrk_r+0x1a>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	b103      	cbz	r3, 80091ca <_sbrk_r+0x1a>
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	20001dd8 	.word	0x20001dd8

080091d0 <__malloc_lock>:
 80091d0:	4801      	ldr	r0, [pc, #4]	; (80091d8 <__malloc_lock+0x8>)
 80091d2:	f000 b811 	b.w	80091f8 <__retarget_lock_acquire_recursive>
 80091d6:	bf00      	nop
 80091d8:	20001ddc 	.word	0x20001ddc

080091dc <__malloc_unlock>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__malloc_unlock+0x8>)
 80091de:	f000 b80c 	b.w	80091fa <__retarget_lock_release_recursive>
 80091e2:	bf00      	nop
 80091e4:	20001ddc 	.word	0x20001ddc

080091e8 <_malloc_usable_size_r>:
 80091e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ec:	1f18      	subs	r0, r3, #4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bfbc      	itt	lt
 80091f2:	580b      	ldrlt	r3, [r1, r0]
 80091f4:	18c0      	addlt	r0, r0, r3
 80091f6:	4770      	bx	lr

080091f8 <__retarget_lock_acquire_recursive>:
 80091f8:	4770      	bx	lr

080091fa <__retarget_lock_release_recursive>:
 80091fa:	4770      	bx	lr

080091fc <_init>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	bf00      	nop
 8009200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009202:	bc08      	pop	{r3}
 8009204:	469e      	mov	lr, r3
 8009206:	4770      	bx	lr

08009208 <_fini>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	bf00      	nop
 800920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920e:	bc08      	pop	{r3}
 8009210:	469e      	mov	lr, r3
 8009212:	4770      	bx	lr
