
Telemetry_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080094ac  080094ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009584  08009584  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08009584  08009584  00019584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800958c  0800958c  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800958c  0800958c  0001958c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009590  08009590  00019590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08009594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  20000170  08009704  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de0  08009704  00021de0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122fe  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ac  00000000  00000000  0003249e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00035850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00036648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f9c  00000000  00000000  000372a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001375f  00000000  00000000  0005c244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccb35  00000000  00000000  0006f9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c4d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b60  00000000  00000000  0013c528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000170 	.word	0x20000170
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009494 	.word	0x08009494

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000174 	.word	0x20000174
 800020c:	08009494 	.word	0x08009494

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_CAN2_Init+0x64>)
 80005ca:	4a18      	ldr	r2, [pc, #96]	; (800062c <MX_CAN2_Init+0x68>)
 80005cc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_CAN2_Init+0x64>)
 80005d0:	220a      	movs	r2, #10
 80005d2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_CAN2_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_CAN2_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_CAN2_Init+0x64>)
 80005e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005e6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_CAN2_Init+0x64>)
 80005ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005ee:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_CAN2_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_CAN2_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_CAN2_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_CAN2_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_CAN2_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_CAN2_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_CAN2_Init+0x64>)
 8000616:	f000 fbb9 	bl	8000d8c <HAL_CAN_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000620:	f000 f9e2 	bl	80009e8 <Error_Handler>

//}

  /* USER CODE END CAN2_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000190 	.word	0x20000190
 800062c:	40006800 	.word	0x40006800

08000630 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a24      	ldr	r2, [pc, #144]	; (80006e0 <HAL_CAN_MspInit+0xb0>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d141      	bne.n	80006d6 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <HAL_CAN_MspInit+0xb4>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <HAL_CAN_MspInit+0xb4>)
 800065c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <HAL_CAN_MspInit+0xb4>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_CAN_MspInit+0xb4>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <HAL_CAN_MspInit+0xb4>)
 8000678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_CAN_MspInit+0xb4>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_CAN_MspInit+0xb4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <HAL_CAN_MspInit+0xb4>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_CAN_MspInit+0xb4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80006a6:	2360      	movs	r3, #96	; 0x60
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80006b6:	2309      	movs	r3, #9
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <HAL_CAN_MspInit+0xb8>)
 80006c2:	f001 fad9 	bl	8001c78 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2040      	movs	r0, #64	; 0x40
 80006cc:	f001 fa9d 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80006d0:	2040      	movs	r0, #64	; 0x40
 80006d2:	f001 fab6 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40006800 	.word	0x40006800
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020400 	.word	0x40020400

080006ec <SetCAN_Flag_HeartBeat>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SetCAN_Flag_HeartBeat(uint8_t value) {
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
  CAN_Flag_Status.CAN_Flag_HeartBeat = value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <SetCAN_Flag_HeartBeat+0x1c>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	7013      	strb	r3, [r2, #0]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	2000018c 	.word	0x2000018c

0800070c <CAN_setFilter>:

void CAN_setFilter(){
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef canFil; //CAN Bus Filter

    canFil.FilterBank = 10;
 8000712:	230a      	movs	r3, #10
 8000714:	617b      	str	r3, [r7, #20]
    canFil.FilterMode = CAN_FILTERMODE_IDMASK;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
    canFil.FilterFIFOAssignment = CAN_RX_FIFO0;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
    canFil.FilterIdHigh = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
    canFil.FilterIdLow = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
    canFil.FilterMaskIdHigh = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
    canFil.FilterMaskIdLow = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
    canFil.FilterScale = CAN_FILTERSCALE_32BIT;
 800072e:	2301      	movs	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
    canFil.FilterActivation = ENABLE;
 8000732:	2301      	movs	r3, #1
 8000734:	623b      	str	r3, [r7, #32]
    canFil.SlaveStartFilterBank = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan2, &canFil);
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <CAN_setFilter+0x40>)
 8000740:	f000 fc20 	bl	8000f84 <HAL_CAN_ConfigFilter>
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000190 	.word	0x20000190

08000750 <sendCAN>:
void sendCAN(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef Can_Tx_Header;
	if (CAN_Flag_Status.CAN_Flag_HeartBeat == ENABLE) {
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <sendCAN+0x48>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b01      	cmp	r3, #1
 800075e:	d116      	bne.n	800078e <sendCAN+0x3e>
	    CAN_Flag_Status.CAN_Flag_HeartBeat = DISABLE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <sendCAN+0x48>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]

	    Can_Tx_Header.IDE = CAN_ID_STD;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
	    Can_Tx_Header.StdId = ID_TELEMETRY_HEARTBEAT;
 800076a:	2359      	movs	r3, #89	; 0x59
 800076c:	60bb      	str	r3, [r7, #8]
	    Can_Tx_Header.RTR = CAN_RTR_DATA;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
	    Can_Tx_Header.DLC = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
	    uint8_t empty_mex[0];
	    uint32_t null_point;

	    /* Transmit the message if there is an available mailbox -----------------*/
	    while(HAL_CAN_AddTxMessage(&hcan2, &Can_Tx_Header, empty_mex, &null_point)!=HAL_OK){};
 8000776:	bf00      	nop
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	f107 0208 	add.w	r2, r7, #8
 800077e:	f107 0108 	add.w	r1, r7, #8
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <sendCAN+0x4c>)
 8000784:	f000 fd22 	bl	80011cc <HAL_CAN_AddTxMessage>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f4      	bne.n	8000778 <sendCAN+0x28>
	  }
}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000018c 	.word	0x2000018c
 800079c:	20000190 	.word	0x20000190

080007a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_GPIO_Init+0x84>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <MX_GPIO_Init+0x84>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_GPIO_Init+0x84>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_GPIO_Init+0x84>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <MX_GPIO_Init+0x84>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_GPIO_Init+0x84>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_GPIO_Init+0x84>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <MX_GPIO_Init+0x84>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_GPIO_Init+0x84>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_GPIO_Init+0x84>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <MX_GPIO_Init+0x84>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_GPIO_Init+0x84>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	b0a3      	sub	sp, #140	; 0x8c
 800082c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fa17 	bl	8000c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f867 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f7ff ffb3 	bl	80007a0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800083a:	f007 fbef 	bl	800801c <MX_USB_DEVICE_Init>
  MX_CAN2_Init();
 800083e:	f7ff fec1 	bl	80005c4 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  CAN_setFilter();
 8000842:	f7ff ff63 	bl	800070c <CAN_setFilter>
  HAL_CAN_Start(&hcan2);
 8000846:	482c      	ldr	r0, [pc, #176]	; (80008f8 <main+0xd0>)
 8000848:	f000 fc7c 	bl	8001144 <HAL_CAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sendCAN();
 800084c:	f7ff ff80 	bl	8000750 <sendCAN>
	//HAL_Delay(1000);

	//while(CDC_Transmit_FS((uint8_t *)data, strlen(data))!=USBD_OK);
	//HAL_Delay(50);

	if(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) != 0){
 8000850:	2100      	movs	r1, #0
 8000852:	4829      	ldr	r0, [pc, #164]	; (80008f8 <main+0xd0>)
 8000854:	f000 fea7 	bl	80015a6 <HAL_CAN_GetRxFifoFillLevel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f6      	beq.n	800084c <main+0x24>
		  CAN_RxHeaderTypeDef RxMessage_header;
		  uint8_t Rx_Data[8] = {0,0,0,0,0,0,0,0};
 800085e:	4a27      	ldr	r2, [pc, #156]	; (80008fc <main+0xd4>)
 8000860:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000868:	e883 0003 	stmia.w	r3, {r0, r1}

		  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxMessage_header, Rx_Data);
 800086c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000870:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000874:	2100      	movs	r1, #0
 8000876:	4820      	ldr	r0, [pc, #128]	; (80008f8 <main+0xd0>)
 8000878:	f000 fd83 	bl	8001382 <HAL_CAN_GetRxMessage>

		  char msg[50];

		  sprintf(msg, "@:%ld:%d:%d:%d:%d:%d:%d:%d:%d:%d:|", RxMessage_header.StdId, (uint8_t)RxMessage_header.DLC, Rx_Data[0], Rx_Data[1], Rx_Data[2], Rx_Data[3], Rx_Data[4], Rx_Data[5], Rx_Data[6], Rx_Data[7]);
 800087c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800087e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000880:	b2db      	uxtb	r3, r3
 8000882:	469c      	mov	ip, r3
 8000884:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 800088e:	f897 0046 	ldrb.w	r0, [r7, #70]	; 0x46
 8000892:	4604      	mov	r4, r0
 8000894:	f897 0047 	ldrb.w	r0, [r7, #71]	; 0x47
 8000898:	4605      	mov	r5, r0
 800089a:	f897 0048 	ldrb.w	r0, [r7, #72]	; 0x48
 800089e:	4606      	mov	r6, r0
 80008a0:	f897 0049 	ldrb.w	r0, [r7, #73]	; 0x49
 80008a4:	60b8      	str	r0, [r7, #8]
 80008a6:	f897 004a 	ldrb.w	r0, [r7, #74]	; 0x4a
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 80008b0:	4603      	mov	r3, r0
 80008b2:	f107 0010 	add.w	r0, r7, #16
 80008b6:	9307      	str	r3, [sp, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	9306      	str	r3, [sp, #24]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	9305      	str	r3, [sp, #20]
 80008c0:	9604      	str	r6, [sp, #16]
 80008c2:	9503      	str	r5, [sp, #12]
 80008c4:	9402      	str	r4, [sp, #8]
 80008c6:	9101      	str	r1, [sp, #4]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	4663      	mov	r3, ip
 80008ce:	490c      	ldr	r1, [pc, #48]	; (8000900 <main+0xd8>)
 80008d0:	f008 f972 	bl	8008bb8 <siprintf>

		  while(CDC_Transmit_FS((uint8_t *)msg, strlen(msg)) != USBD_OK);
 80008d4:	bf00      	nop
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fc98 	bl	8000210 <strlen>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f007 fc54 	bl	8008198 <CDC_Transmit_FS>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1ef      	bne.n	80008d6 <main+0xae>
	sendCAN();
 80008f6:	e7a9      	b.n	800084c <main+0x24>
 80008f8:	20000190 	.word	0x20000190
 80008fc:	080094d0 	.word	0x080094d0
 8000900:	080094ac 	.word	0x080094ac

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2234      	movs	r2, #52	; 0x34
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f008 f948 	bl	8008ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <SystemClock_Config+0xdc>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a2b      	ldr	r2, [pc, #172]	; (80009e0 <SystemClock_Config+0xdc>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <SystemClock_Config+0xdc>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <SystemClock_Config+0xe0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <SystemClock_Config+0xe0>)
 800094e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <SystemClock_Config+0xe0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000960:	2301      	movs	r3, #1
 8000962:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000968:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000972:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000974:	2304      	movs	r3, #4
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000978:	23b4      	movs	r3, #180	; 0xb4
 800097a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000980:	2307      	movs	r3, #7
 8000982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000984:	2302      	movs	r3, #2
 8000986:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fc6d 	bl	800426c <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000998:	f000 f826 	bl	80009e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800099c:	f002 fdca 	bl	8003534 <HAL_PWREx_EnableOverDrive>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009a6:	f000 f81f 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009aa:	230f      	movs	r3, #15
 80009ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ae:	2302      	movs	r3, #2
 80009b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2105      	movs	r1, #5
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fe03 	bl	80035d4 <HAL_RCC_ClockConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009d4:	f000 f808 	bl	80009e8 <Error_Handler>
  }
}
 80009d8:	bf00      	nop
 80009da:	3750      	adds	r7, #80	; 0x50
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f938 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  sys_tick_count = HAL_GetTick();
 8000a94:	f000 f94a 	bl	8000d2c <HAL_GetTick>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <SysTick_Handler+0x38>)
 8000a9c:	6013      	str	r3, [r2, #0]
  if((sys_tick_count % 1000) == 0){
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <SysTick_Handler+0x38>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <SysTick_Handler+0x3c>)
 8000aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa8:	099b      	lsrs	r3, r3, #6
 8000aaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aae:	fb01 f303 	mul.w	r3, r1, r3
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <SysTick_Handler+0x32>
	  //tx_heartbeat
	  SetCAN_Flag_HeartBeat(ENABLE);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fe17 	bl	80006ec <SetCAN_Flag_HeartBeat>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200001b8 	.word	0x200001b8
 8000ac8:	10624dd3 	.word	0x10624dd3

08000acc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <CAN2_RX0_IRQHandler+0x10>)
 8000ad2:	f000 fd90 	bl	80015f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000190 	.word	0x20000190

08000ae0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <OTG_FS_IRQHandler+0x10>)
 8000ae6:	f001 fbb2 	bl	800224e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200016a4 	.word	0x200016a4

08000af4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 1 */
void  HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b09a      	sub	sp, #104	; 0x68
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

	  char *usb_callback_str = "SOno in callback\n\r";
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000afe:	667b      	str	r3, [r7, #100]	; 0x64
	  while(CDC_Transmit_FS((uint8_t *)usb_callback_str, strlen(usb_callback_str))!=USBD_OK);
 8000b00:	bf00      	nop
 8000b02:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b04:	f7ff fb84 	bl	8000210 <strlen>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b10:	f007 fb42 	bl	8008198 <CDC_Transmit_FS>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1f3      	bne.n	8000b02 <HAL_CAN_RxFifo0MsgPendingCallback+0xe>

	  CAN_RxHeaderTypeDef RxMessage_header;
	  uint8_t Rx_Data[8]={0};
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8000b1e:	2300      	movs	r3, #0
 8000b20:	647b      	str	r3, [r7, #68]	; 0x44

	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxMessage_header, Rx_Data);
 8000b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4811      	ldr	r0, [pc, #68]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000b2e:	f000 fc28 	bl	8001382 <HAL_CAN_GetRxMessage>

	  char msg[50];
	  sprintf(msg, "Data:%s-ID:%ld\n\r", (char*)Rx_Data, (uint32_t)RxMessage_header.StdId);
 8000b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b34:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b38:	f107 000c 	add.w	r0, r7, #12
 8000b3c:	490e      	ldr	r1, [pc, #56]	; (8000b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000b3e:	f008 f83b 	bl	8008bb8 <siprintf>

	  while(CDC_Transmit_FS((uint8_t *)msg, strlen(msg)) != USBD_OK);
 8000b42:	bf00      	nop
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fb61 	bl	8000210 <strlen>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f007 fb1d 	bl	8008198 <CDC_Transmit_FS>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1ef      	bne.n	8000b44 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3768      	adds	r7, #104	; 0x68
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	080094d8 	.word	0x080094d8
 8000b74:	20000190 	.word	0x20000190
 8000b78:	080094ec 	.word	0x080094ec

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f007 ffd2 	bl	8008b54 <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20020000 	.word	0x20020000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	200001bc 	.word	0x200001bc
 8000be4:	20001de0 	.word	0x20001de0

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c12:	490e      	ldr	r1, [pc, #56]	; (8000c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c28:	4c0b      	ldr	r4, [pc, #44]	; (8000c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c36:	f7ff ffd7 	bl	8000be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f007 ff91 	bl	8008b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3e:	f7ff fdf3 	bl	8000828 <main>
  bx  lr    
 8000c42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000c50:	08009594 	.word	0x08009594
  ldr r2, =_sbss
 8000c54:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000c58:	20001de0 	.word	0x20001de0

08000c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <HAL_Init+0x40>)
 8000c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_Init+0x40>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x40>)
 8000c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 ffb3 	bl	8001bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff feae 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 ffcb 	bl	8001c5e <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 ff93 	bl	8001c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	200001c0 	.word	0x200001c0

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200001c0 	.word	0x200001c0

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_Delay+0x44>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008

08000d8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e0ed      	b.n	8000f7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fc40 	bl	8000630 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0201 	orr.w	r2, r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc0:	f7ff ffb4 	bl	8000d2c <HAL_GetTick>
 8000dc4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dc6:	e012      	b.n	8000dee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc8:	f7ff ffb0 	bl	8000d2c <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b0a      	cmp	r3, #10
 8000dd4:	d90b      	bls.n	8000dee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2205      	movs	r2, #5
 8000de6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e0c5      	b.n	8000f7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0e5      	beq.n	8000dc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0202 	bic.w	r2, r2, #2
 8000e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e0c:	f7ff ff8e 	bl	8000d2c <HAL_GetTick>
 8000e10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e12:	e012      	b.n	8000e3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e14:	f7ff ff8a 	bl	8000d2c <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	d90b      	bls.n	8000e3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2205      	movs	r2, #5
 8000e32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e09f      	b.n	8000f7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e5      	bne.n	8000e14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7e1b      	ldrb	r3, [r3, #24]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d108      	bne.n	8000e62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e007      	b.n	8000e72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7e5b      	ldrb	r3, [r3, #25]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d108      	bne.n	8000e8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e007      	b.n	8000e9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7e9b      	ldrb	r3, [r3, #26]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d108      	bne.n	8000eb6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0220 	orr.w	r2, r2, #32
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e007      	b.n	8000ec6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0220 	bic.w	r2, r2, #32
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7edb      	ldrb	r3, [r3, #27]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d108      	bne.n	8000ee0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0210 	bic.w	r2, r2, #16
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	e007      	b.n	8000ef0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0210 	orr.w	r2, r2, #16
 8000eee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7f1b      	ldrb	r3, [r3, #28]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d108      	bne.n	8000f0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0208 	orr.w	r2, r2, #8
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e007      	b.n	8000f1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0208 	bic.w	r2, r2, #8
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7f5b      	ldrb	r3, [r3, #29]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d108      	bne.n	8000f34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 0204 	orr.w	r2, r2, #4
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e007      	b.n	8000f44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0204 	bic.w	r2, r2, #4
 8000f42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	ea42 0103 	orr.w	r1, r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	1e5a      	subs	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f9a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f9c:	7cfb      	ldrb	r3, [r7, #19]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d003      	beq.n	8000faa <HAL_CAN_ConfigFilter+0x26>
 8000fa2:	7cfb      	ldrb	r3, [r7, #19]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	f040 80be 	bne.w	8001126 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000faa:	4b65      	ldr	r3, [pc, #404]	; (8001140 <HAL_CAN_ConfigFilter+0x1bc>)
 8000fac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fb4:	f043 0201 	orr.w	r2, r3, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fc4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f003 031f 	and.w	r3, r3, #31
 8000fea:	2201      	movs	r2, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d123      	bne.n	8001054 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800102e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3248      	adds	r2, #72	; 0x48
 8001034:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001048:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800104a:	6979      	ldr	r1, [r7, #20]
 800104c:	3348      	adds	r3, #72	; 0x48
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d122      	bne.n	80010a2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	431a      	orrs	r2, r3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800107c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3248      	adds	r2, #72	; 0x48
 8001082:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001096:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001098:	6979      	ldr	r1, [r7, #20]
 800109a:	3348      	adds	r3, #72	; 0x48
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	440b      	add	r3, r1
 80010a0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d109      	bne.n	80010be <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	401a      	ands	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010bc:	e007      	b.n	80010ce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43db      	mvns	r3, r3
 80010e0:	401a      	ands	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010e8:	e007      	b.n	80010fa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	431a      	orrs	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d107      	bne.n	8001112 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	431a      	orrs	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001118:	f023 0201 	bic.w	r2, r3, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e006      	b.n	8001134 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
  }
}
 8001134:	4618      	mov	r0, r3
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40006400 	.word	0x40006400

08001144 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d12e      	bne.n	80011b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2202      	movs	r2, #2
 800115c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001170:	f7ff fddc 	bl	8000d2c <HAL_GetTick>
 8001174:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001176:	e012      	b.n	800119e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001178:	f7ff fdd8 	bl	8000d2c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b0a      	cmp	r3, #10
 8001184:	d90b      	bls.n	800119e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2205      	movs	r2, #5
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e012      	b.n	80011c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1e5      	bne.n	8001178 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e006      	b.n	80011c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
  }
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011ea:	7ffb      	ldrb	r3, [r7, #31]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d003      	beq.n	80011f8 <HAL_CAN_AddTxMessage+0x2c>
 80011f0:	7ffb      	ldrb	r3, [r7, #31]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	f040 80b8 	bne.w	8001368 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10a      	bne.n	8001218 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 80a0 	beq.w	8001358 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	0e1b      	lsrs	r3, r3, #24
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d907      	bls.n	8001238 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e09e      	b.n	8001376 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001238:	2201      	movs	r2, #1
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	409a      	lsls	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10d      	bne.n	8001266 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001254:	68f9      	ldr	r1, [r7, #12]
 8001256:	6809      	ldr	r1, [r1, #0]
 8001258:	431a      	orrs	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3318      	adds	r3, #24
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	440b      	add	r3, r1
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e00f      	b.n	8001286 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001270:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001276:	68f9      	ldr	r1, [r7, #12]
 8001278:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800127a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3318      	adds	r3, #24
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	440b      	add	r3, r1
 8001284:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6819      	ldr	r1, [r3, #0]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3318      	adds	r3, #24
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	440b      	add	r3, r1
 8001296:	3304      	adds	r3, #4
 8001298:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	7d1b      	ldrb	r3, [r3, #20]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d111      	bne.n	80012c6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3318      	adds	r3, #24
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	4413      	add	r3, r2
 80012ae:	3304      	adds	r3, #4
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	6811      	ldr	r1, [r2, #0]
 80012b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3318      	adds	r3, #24
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	440b      	add	r3, r1
 80012c2:	3304      	adds	r3, #4
 80012c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3307      	adds	r3, #7
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	061a      	lsls	r2, r3, #24
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3306      	adds	r3, #6
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3305      	adds	r3, #5
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	4313      	orrs	r3, r2
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	3204      	adds	r2, #4
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	4610      	mov	r0, r2
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	6811      	ldr	r1, [r2, #0]
 80012ee:	ea43 0200 	orr.w	r2, r3, r0
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	440b      	add	r3, r1
 80012f8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3303      	adds	r3, #3
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	061a      	lsls	r2, r3, #24
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3302      	adds	r3, #2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	041b      	lsls	r3, r3, #16
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3301      	adds	r3, #1
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	4313      	orrs	r3, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	4610      	mov	r0, r2
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	6811      	ldr	r1, [r2, #0]
 8001324:	ea43 0200 	orr.w	r2, r3, r0
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	440b      	add	r3, r1
 800132e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001332:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3318      	adds	r3, #24
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	4413      	add	r3, r2
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	6811      	ldr	r1, [r2, #0]
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3318      	adds	r3, #24
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	440b      	add	r3, r1
 8001352:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	e00e      	b.n	8001376 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e006      	b.n	8001376 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
  }
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001382:	b480      	push	{r7}
 8001384:	b087      	sub	sp, #28
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001396:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d003      	beq.n	80013a6 <HAL_CAN_GetRxMessage+0x24>
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	f040 80f3 	bne.w	800158c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10e      	bne.n	80013ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d116      	bne.n	80013e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0e7      	b.n	800159a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d107      	bne.n	80013e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0d8      	b.n	800159a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	331b      	adds	r3, #27
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	4413      	add	r3, r2
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0204 	and.w	r2, r3, #4
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10c      	bne.n	8001420 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	331b      	adds	r3, #27
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0d5b      	lsrs	r3, r3, #21
 8001416:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e00b      	b.n	8001438 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	331b      	adds	r3, #27
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4413      	add	r3, r2
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	08db      	lsrs	r3, r3, #3
 8001430:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	331b      	adds	r3, #27
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4413      	add	r3, r2
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0202 	and.w	r2, r3, #2
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	331b      	adds	r3, #27
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	4413      	add	r3, r2
 800145a:	3304      	adds	r3, #4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 020f 	and.w	r2, r3, #15
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	331b      	adds	r3, #27
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4413      	add	r3, r2
 8001472:	3304      	adds	r3, #4
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	331b      	adds	r3, #27
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4413      	add	r3, r2
 800148a:	3304      	adds	r3, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	0c1b      	lsrs	r3, r3, #16
 8001490:	b29a      	uxth	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	4413      	add	r3, r2
 80014a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0a1a      	lsrs	r2, r3, #8
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4413      	add	r3, r2
 80014d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	0c1a      	lsrs	r2, r3, #16
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	3302      	adds	r3, #2
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0e1a      	lsrs	r2, r3, #24
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3303      	adds	r3, #3
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	4413      	add	r3, r2
 8001504:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	3304      	adds	r3, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	4413      	add	r3, r2
 800151c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	0a1a      	lsrs	r2, r3, #8
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3305      	adds	r3, #5
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	4413      	add	r3, r2
 8001536:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	0c1a      	lsrs	r2, r3, #16
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	3306      	adds	r3, #6
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	4413      	add	r3, r2
 8001550:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0e1a      	lsrs	r2, r3, #24
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	3307      	adds	r3, #7
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d108      	bne.n	8001578 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0220 	orr.w	r2, r2, #32
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	e007      	b.n	8001588 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0220 	orr.w	r2, r2, #32
 8001586:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	e006      	b.n	800159a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
  }
}
 800159a:	4618      	mov	r0, r3
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ba:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015bc:	7afb      	ldrb	r3, [r7, #11]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d002      	beq.n	80015c8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d10f      	bne.n	80015e8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e005      	b.n	80015e8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80015e8:	68fb      	ldr	r3, [r7, #12]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b08a      	sub	sp, #40	; 0x28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d07c      	beq.n	8001736 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d023      	beq.n	800168e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f983 	bl	8001964 <HAL_CAN_TxMailbox0CompleteCallback>
 800165e:	e016      	b.n	800168e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	e00c      	b.n	800168e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
 8001686:	e002      	b.n	800168e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f989 	bl	80019a0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d024      	beq.n	80016e2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f963 	bl	8001978 <HAL_CAN_TxMailbox1CompleteCallback>
 80016b2:	e016      	b.n	80016e2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
 80016c6:	e00c      	b.n	80016e2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
 80016da:	e002      	b.n	80016e2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f969 	bl	80019b4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d024      	beq.n	8001736 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f943 	bl	800198c <HAL_CAN_TxMailbox2CompleteCallback>
 8001706:	e016      	b.n	8001736 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d004      	beq.n	800171c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
 800171a:	e00c      	b.n	8001736 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
 800172e:	e002      	b.n	8001736 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f949 	bl	80019c8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00c      	beq.n	800175a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001750:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2210      	movs	r2, #16
 8001758:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00b      	beq.n	800177c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2208      	movs	r2, #8
 8001774:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f930 	bl	80019dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff f9ad 	bl	8000af4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00c      	beq.n	80017be <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2210      	movs	r2, #16
 80017bc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00b      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2208      	movs	r2, #8
 80017d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f912 	bl	8001a04 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f8f9 	bl	80019f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00b      	beq.n	8001820 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2210      	movs	r2, #16
 8001818:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f8fc 	bl	8001a18 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2208      	movs	r2, #8
 800183a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f8f5 	bl	8001a2c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d07b      	beq.n	8001944 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d072      	beq.n	800193c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d043      	beq.n	800193c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d03e      	beq.n	800193c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018c4:	2b60      	cmp	r3, #96	; 0x60
 80018c6:	d02b      	beq.n	8001920 <HAL_CAN_IRQHandler+0x32a>
 80018c8:	2b60      	cmp	r3, #96	; 0x60
 80018ca:	d82e      	bhi.n	800192a <HAL_CAN_IRQHandler+0x334>
 80018cc:	2b50      	cmp	r3, #80	; 0x50
 80018ce:	d022      	beq.n	8001916 <HAL_CAN_IRQHandler+0x320>
 80018d0:	2b50      	cmp	r3, #80	; 0x50
 80018d2:	d82a      	bhi.n	800192a <HAL_CAN_IRQHandler+0x334>
 80018d4:	2b40      	cmp	r3, #64	; 0x40
 80018d6:	d019      	beq.n	800190c <HAL_CAN_IRQHandler+0x316>
 80018d8:	2b40      	cmp	r3, #64	; 0x40
 80018da:	d826      	bhi.n	800192a <HAL_CAN_IRQHandler+0x334>
 80018dc:	2b30      	cmp	r3, #48	; 0x30
 80018de:	d010      	beq.n	8001902 <HAL_CAN_IRQHandler+0x30c>
 80018e0:	2b30      	cmp	r3, #48	; 0x30
 80018e2:	d822      	bhi.n	800192a <HAL_CAN_IRQHandler+0x334>
 80018e4:	2b10      	cmp	r3, #16
 80018e6:	d002      	beq.n	80018ee <HAL_CAN_IRQHandler+0x2f8>
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d005      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018ec:	e01d      	b.n	800192a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018f6:	e019      	b.n	800192c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	f043 0310 	orr.w	r3, r3, #16
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001900:	e014      	b.n	800192c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f043 0320 	orr.w	r3, r3, #32
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800190a:	e00f      	b.n	800192c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001914:	e00a      	b.n	800192c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800191e:	e005      	b.n	800192c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001928:	e000      	b.n	800192c <HAL_CAN_IRQHandler+0x336>
            break;
 800192a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800193a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2204      	movs	r2, #4
 8001942:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	2b00      	cmp	r3, #0
 8001948:	d008      	beq.n	800195c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f872 	bl	8001a40 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 0307 	and.w	r3, r3, #7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db0b      	blt.n	8001ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <__NVIC_EnableIRQ+0x38>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	; (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	; (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1c3 0307 	rsb	r3, r3, #7
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf28      	it	cs
 8001b66:	2304      	movcs	r3, #4
 8001b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d902      	bls.n	8001b78 <NVIC_EncodePriority+0x30>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3b03      	subs	r3, #3
 8001b76:	e000      	b.n	8001b7a <NVIC_EncodePriority+0x32>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	4313      	orrs	r3, r2
         );
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc0:	d301      	bcc.n	8001bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00f      	b.n	8001be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <SysTick_Config+0x40>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bce:	210f      	movs	r1, #15
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f7ff ff8e 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <SysTick_Config+0x40>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <SysTick_Config+0x40>)
 8001be0:	2207      	movs	r2, #7
 8001be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff29 	bl	8001a54 <__NVIC_SetPriorityGrouping>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1c:	f7ff ff3e 	bl	8001a9c <__NVIC_GetPriorityGrouping>
 8001c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	6978      	ldr	r0, [r7, #20]
 8001c28:	f7ff ff8e 	bl	8001b48 <NVIC_EncodePriority>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff31 	bl	8001ab8 <__NVIC_EnableIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffa2 	bl	8001bb0 <SysTick_Config>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e165      	b.n	8001f60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 8154 	bne.w	8001f5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d005      	beq.n	8001cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d130      	bne.n	8001d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 0201 	and.w	r2, r3, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d017      	beq.n	8001d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d123      	bne.n	8001dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	69b9      	ldr	r1, [r7, #24]
 8001db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80ae 	beq.w	8001f5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a5c      	ldr	r2, [pc, #368]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b5a      	ldr	r3, [pc, #360]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1a:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_GPIO_Init+0x304>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4f      	ldr	r2, [pc, #316]	; (8001f80 <HAL_GPIO_Init+0x308>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d025      	beq.n	8001e92 <HAL_GPIO_Init+0x21a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4e      	ldr	r2, [pc, #312]	; (8001f84 <HAL_GPIO_Init+0x30c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01f      	beq.n	8001e8e <HAL_GPIO_Init+0x216>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4d      	ldr	r2, [pc, #308]	; (8001f88 <HAL_GPIO_Init+0x310>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d019      	beq.n	8001e8a <HAL_GPIO_Init+0x212>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4c      	ldr	r2, [pc, #304]	; (8001f8c <HAL_GPIO_Init+0x314>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_GPIO_Init+0x20e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <HAL_GPIO_Init+0x318>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00d      	beq.n	8001e82 <HAL_GPIO_Init+0x20a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4a      	ldr	r2, [pc, #296]	; (8001f94 <HAL_GPIO_Init+0x31c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <HAL_GPIO_Init+0x206>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a49      	ldr	r2, [pc, #292]	; (8001f98 <HAL_GPIO_Init+0x320>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_GPIO_Init+0x202>
 8001e76:	2306      	movs	r3, #6
 8001e78:	e00c      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	e00a      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e7e:	2305      	movs	r3, #5
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e82:	2304      	movs	r3, #4
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	; (8001f7c <HAL_GPIO_Init+0x304>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed6:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001edc:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f00:	4a26      	ldr	r2, [pc, #152]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f54:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f ae96 	bls.w	8001c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40021400 	.word	0x40021400
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	b08f      	sub	sp, #60	; 0x3c
 8001fa4:	af0a      	add	r7, sp, #40	; 0x28
 8001fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e116      	b.n	80021e0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f006 fa3d 	bl	800844c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f002 fcee 	bl	80049d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	687e      	ldr	r6, [r7, #4]
 8001ffe:	466d      	mov	r5, sp
 8002000:	f106 0410 	add.w	r4, r6, #16
 8002004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002010:	e885 0003 	stmia.w	r5, {r0, r1}
 8002014:	1d33      	adds	r3, r6, #4
 8002016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002018:	6838      	ldr	r0, [r7, #0]
 800201a:	f002 fbc5 	bl	80047a8 <USB_CoreInit>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0d7      	b.n	80021e0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f002 fcdc 	bl	80049f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e04a      	b.n	80020d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	333d      	adds	r3, #61	; 0x3d
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	333c      	adds	r3, #60	; 0x3c
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	b298      	uxth	r0, r3
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3344      	adds	r3, #68	; 0x44
 800207e:	4602      	mov	r2, r0
 8002080:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	3340      	adds	r3, #64	; 0x40
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3348      	adds	r3, #72	; 0x48
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	334c      	adds	r3, #76	; 0x4c
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	3354      	adds	r3, #84	; 0x54
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	3301      	adds	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d3af      	bcc.n	8002042 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	e044      	b.n	8002172 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	3301      	adds	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	d3b5      	bcc.n	80020e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	687e      	ldr	r6, [r7, #4]
 8002184:	466d      	mov	r5, sp
 8002186:	f106 0410 	add.w	r4, r6, #16
 800218a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800218c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800218e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002192:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002196:	e885 0003 	stmia.w	r5, {r0, r1}
 800219a:	1d33      	adds	r3, r6, #4
 800219c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800219e:	6838      	ldr	r0, [r7, #0]
 80021a0:	f002 fc74 	bl	8004a8c <USB_DevInit>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e014      	b.n	80021e0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d102      	bne.n	80021d4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f001 f98c 	bl	80034ec <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 fdb6 	bl	8005d4a <USB_DevDisconnect>

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_PCD_Start+0x1c>
 8002200:	2302      	movs	r3, #2
 8002202:	e020      	b.n	8002246 <HAL_PCD_Start+0x5e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	2b01      	cmp	r3, #1
 8002212:	d109      	bne.n	8002228 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002218:	2b01      	cmp	r3, #1
 800221a:	d005      	beq.n	8002228 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f002 fbbf 	bl	80049b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f003 fd66 	bl	8005d08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800224e:	b590      	push	{r4, r7, lr}
 8002250:	b08d      	sub	sp, #52	; 0x34
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f003 fe24 	bl	8005eb2 <USB_GetMode>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 84b7 	bne.w	8002be0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f003 fd88 	bl	8005d8c <USB_ReadInterrupts>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 84ad 	beq.w	8002bde <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f003 fd75 	bl	8005d8c <USB_ReadInterrupts>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d107      	bne.n	80022bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f002 0202 	and.w	r2, r2, #2
 80022ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 fd63 	bl	8005d8c <USB_ReadInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	d161      	bne.n	8002394 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0210 	bic.w	r2, r2, #16
 80022de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f003 020f 	and.w	r2, r3, #15
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	3304      	adds	r3, #4
 80022fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	0c5b      	lsrs	r3, r3, #17
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	2b02      	cmp	r3, #2
 800230a:	d124      	bne.n	8002356 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d035      	beq.n	8002384 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	6a38      	ldr	r0, [r7, #32]
 800232c:	f003 fb9a 	bl	8005a64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800233c:	441a      	add	r2, r3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800234e:	441a      	add	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	621a      	str	r2, [r3, #32]
 8002354:	e016      	b.n	8002384 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	0c5b      	lsrs	r3, r3, #17
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	2b06      	cmp	r3, #6
 8002360:	d110      	bne.n	8002384 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002368:	2208      	movs	r2, #8
 800236a:	4619      	mov	r1, r3
 800236c:	6a38      	ldr	r0, [r7, #32]
 800236e:	f003 fb79 	bl	8005a64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	6a1a      	ldr	r2, [r3, #32]
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800237e:	441a      	add	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0210 	orr.w	r2, r2, #16
 8002392:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f003 fcf7 	bl	8005d8c <USB_ReadInterrupts>
 800239e:	4603      	mov	r3, r0
 80023a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023a8:	f040 80a7 	bne.w	80024fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f003 fcfc 	bl	8005db2 <USB_ReadDevAllOutEpInterrupt>
 80023ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023bc:	e099      	b.n	80024f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 808e 	beq.w	80024e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 fd20 	bl	8005e1a <USB_ReadDevOutEPInterrupt>
 80023da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00c      	beq.n	8002400 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f2:	461a      	mov	r2, r3
 80023f4:	2301      	movs	r3, #1
 80023f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fef0 	bl	80031e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00c      	beq.n	8002424 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	4413      	add	r3, r2
 8002412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002416:	461a      	mov	r2, r3
 8002418:	2308      	movs	r3, #8
 800241a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800241c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 ffc6 	bl	80033b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243a:	461a      	mov	r2, r3
 800243c:	2310      	movs	r3, #16
 800243e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d030      	beq.n	80024ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	2b80      	cmp	r3, #128	; 0x80
 8002454:	d109      	bne.n	800246a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002464:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002468:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	3304      	adds	r3, #4
 800247e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	78db      	ldrb	r3, [r3, #3]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d108      	bne.n	800249a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2200      	movs	r2, #0
 800248c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	b2db      	uxtb	r3, r3
 8002492:	4619      	mov	r1, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f006 f901 	bl	800869c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a6:	461a      	mov	r2, r3
 80024a8:	2302      	movs	r3, #2
 80024aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c2:	461a      	mov	r2, r3
 80024c4:	2320      	movs	r3, #32
 80024c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024de:	461a      	mov	r2, r3
 80024e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	3301      	adds	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f47f af62 	bne.w	80023be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fc44 	bl	8005d8c <USB_ReadInterrupts>
 8002504:	4603      	mov	r3, r0
 8002506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800250e:	f040 80db 	bne.w	80026c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 fc65 	bl	8005de6 <USB_ReadDevAllInEpInterrupt>
 800251c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002522:	e0cd      	b.n	80026c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80c2 	beq.w	80026b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fc8b 	bl	8005e56 <USB_ReadDevInEPInterrupt>
 8002540:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d057      	beq.n	80025fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	2201      	movs	r2, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43db      	mvns	r3, r3
 8002566:	69f9      	ldr	r1, [r7, #28]
 8002568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800256c:	4013      	ands	r3, r2
 800256e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257c:	461a      	mov	r2, r3
 800257e:	2301      	movs	r3, #1
 8002580:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d132      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	334c      	adds	r3, #76	; 0x4c
 800259a:	6819      	ldr	r1, [r3, #0]
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4403      	add	r3, r0
 80025aa:	3348      	adds	r3, #72	; 0x48
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4419      	add	r1, r3
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4403      	add	r3, r0
 80025be:	334c      	adds	r3, #76	; 0x4c
 80025c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d113      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x3a2>
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	3354      	adds	r3, #84	; 0x54
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d108      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025e8:	461a      	mov	r2, r3
 80025ea:	2101      	movs	r1, #1
 80025ec:	f003 fc92 	bl	8005f14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4619      	mov	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f005 ffcb 	bl	8008592 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002612:	461a      	mov	r2, r3
 8002614:	2308      	movs	r3, #8
 8002616:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800262e:	461a      	mov	r2, r3
 8002630:	2310      	movs	r3, #16
 8002632:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800264a:	461a      	mov	r2, r3
 800264c:	2340      	movs	r3, #64	; 0x40
 800264e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d023      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800265a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265c:	6a38      	ldr	r0, [r7, #32]
 800265e:	f002 fb73 	bl	8004d48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	3338      	adds	r3, #56	; 0x38
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	3304      	adds	r3, #4
 8002674:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	78db      	ldrb	r3, [r3, #3]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d108      	bne.n	8002690 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2200      	movs	r2, #0
 8002682:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f006 f818 	bl	80086c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	4413      	add	r3, r2
 8002698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269c:	461a      	mov	r2, r3
 800269e:	2302      	movs	r3, #2
 80026a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fd08 	bl	80030c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	3301      	adds	r3, #1
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f47f af2e 	bne.w	8002524 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 fb5d 	bl	8005d8c <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026dc:	d122      	bne.n	8002724 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d108      	bne.n	800270e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002704:	2100      	movs	r1, #0
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f006 f992 	bl	8008a30 <HAL_PCDEx_LPM_Callback>
 800270c:	e002      	b.n	8002714 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f005 ffb6 	bl	8008680 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002722:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f003 fb2f 	bl	8005d8c <USB_ReadInterrupts>
 800272e:	4603      	mov	r3, r0
 8002730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002738:	d112      	bne.n	8002760 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d102      	bne.n	8002750 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f005 ff72 	bl	8008634 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800275e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fb11 	bl	8005d8c <USB_ReadInterrupts>
 800276a:	4603      	mov	r3, r0
 800276c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002774:	d121      	bne.n	80027ba <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002784:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d111      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	f003 020f 	and.w	r2, r3, #15
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80027aa:	2101      	movs	r1, #1
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f006 f93f 	bl	8008a30 <HAL_PCDEx_LPM_Callback>
 80027b2:	e002      	b.n	80027ba <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f005 ff3d 	bl	8008634 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fae4 	bl	8005d8c <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ce:	f040 80b7 	bne.w	8002940 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2110      	movs	r1, #16
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 faab 	bl	8004d48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f6:	e046      	b.n	8002886 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002804:	461a      	mov	r2, r3
 8002806:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800280a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	4413      	add	r3, r2
 8002814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281c:	0151      	lsls	r1, r2, #5
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	440a      	add	r2, r1
 8002822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800282a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002838:	461a      	mov	r2, r3
 800283a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800283e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002850:	0151      	lsls	r1, r2, #5
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	440a      	add	r2, r1
 8002856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800285a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800285e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002870:	0151      	lsls	r1, r2, #5
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	440a      	add	r2, r1
 8002876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800287a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800287e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	3301      	adds	r3, #1
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288c:	429a      	cmp	r2, r3
 800288e:	d3b3      	bcc.n	80027f8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d016      	beq.n	80028da <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028bc:	f043 030b 	orr.w	r3, r3, #11
 80028c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d2:	f043 030b 	orr.w	r3, r3, #11
 80028d6:	6453      	str	r3, [r2, #68]	; 0x44
 80028d8:	e015      	b.n	8002906 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002900:	f043 030b 	orr.w	r3, r3, #11
 8002904:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002914:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002918:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800292a:	461a      	mov	r2, r3
 800292c:	f003 faf2 	bl	8005f14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800293e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f003 fa21 	bl	8005d8c <USB_ReadInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002954:	d124      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fab7 	bl	8005ece <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fa6c 	bl	8004e42 <USB_GetDevSpeed>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681c      	ldr	r4, [r3, #0]
 8002976:	f000 ff13 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 800297a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	4620      	mov	r0, r4
 8002986:	f001 ff71 	bl	800486c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f005 fe29 	bl	80085e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800299e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 f9f1 	bl	8005d8c <USB_ReadInterrupts>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d10a      	bne.n	80029ca <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f005 fe06 	bl	80085c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f002 0208 	and.w	r2, r2, #8
 80029c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 f9dc 	bl	8005d8c <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	d122      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ea:	2301      	movs	r3, #1
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	e014      	b.n	8002a1a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fb27 	bl	8003062 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	3301      	adds	r3, #1
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d3e5      	bcc.n	80029f0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f003 f9af 	bl	8005d8c <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a38:	d13b      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3e:	e02b      	b.n	8002a98 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3340      	adds	r3, #64	; 0x40
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d115      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	da12      	bge.n	8002a92 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	333f      	adds	r3, #63	; 0x3f
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fae8 	bl	8003062 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	3301      	adds	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d3ce      	bcc.n	8002a40 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 f968 	bl	8005d8c <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ac6:	d155      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac8:	2301      	movs	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
 8002acc:	e045      	b.n	8002b5a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d12e      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002af6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	da2b      	bge.n	8002b54 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b08:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d121      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b50:	6053      	str	r3, [r2, #4]
            break;
 8002b52:	e007      	b.n	8002b64 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	3301      	adds	r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3b4      	bcc.n	8002ace <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 f907 	bl	8005d8c <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b88:	d10a      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f005 fdaa 	bl	80086e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 f8f1 	bl	8005d8c <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d115      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f005 fd9a 	bl	8008700 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	e000      	b.n	8002be0 <HAL_PCD_IRQHandler+0x992>
      return;
 8002bde:	bf00      	nop
    }
  }
}
 8002be0:	3734      	adds	r7, #52	; 0x34
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd90      	pop	{r4, r7, pc}

08002be6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_PCD_SetAddress+0x1a>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e013      	b.n	8002c28 <HAL_PCD_SetAddress+0x42>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f003 f84f 	bl	8005cbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	4608      	mov	r0, r1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	70fb      	strb	r3, [r7, #3]
 8002c42:	460b      	mov	r3, r1
 8002c44:	803b      	strh	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	da0f      	bge.n	8002c76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	f003 020f 	and.w	r2, r3, #15
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	3338      	adds	r3, #56	; 0x38
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	705a      	strb	r2, [r3, #1]
 8002c74:	e00f      	b.n	8002c96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	f003 020f 	and.w	r2, r3, #15
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ca2:	883a      	ldrh	r2, [r7, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	78ba      	ldrb	r2, [r7, #2]
 8002cac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	785b      	ldrb	r3, [r3, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cc0:	78bb      	ldrb	r3, [r7, #2]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d102      	bne.n	8002ccc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_PCD_EP_Open+0xaa>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e00e      	b.n	8002cf8 <HAL_PCD_EP_Open+0xc8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f002 f8cf 	bl	8004e8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002cf6:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	da0f      	bge.n	8002d34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	f003 020f 	and.w	r2, r3, #15
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	3338      	adds	r3, #56	; 0x38
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4413      	add	r3, r2
 8002d28:	3304      	adds	r3, #4
 8002d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	705a      	strb	r2, [r3, #1]
 8002d32:	e00f      	b.n	8002d54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_PCD_EP_Close+0x6e>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e00e      	b.n	8002d8c <HAL_PCD_EP_Close+0x8c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68f9      	ldr	r1, [r7, #12]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 f90d 	bl	8004f9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	460b      	mov	r3, r1
 8002da2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da4:	7afb      	ldrb	r3, [r7, #11]
 8002da6:	f003 020f 	and.w	r2, r3, #15
 8002daa:	4613      	mov	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4413      	add	r3, r2
 8002dba:	3304      	adds	r3, #4
 8002dbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	6979      	ldr	r1, [r7, #20]
 8002e08:	f002 fbec 	bl	80055e4 <USB_EP0StartXfer>
 8002e0c:	e008      	b.n	8002e20 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	6979      	ldr	r1, [r7, #20]
 8002e1c:	f002 f99a 	bl	8005154 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e4c:	681b      	ldr	r3, [r3, #0]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	460b      	mov	r3, r1
 8002e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6a:	7afb      	ldrb	r3, [r7, #11]
 8002e6c:	f003 020f 	and.w	r2, r3, #15
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	3338      	adds	r3, #56	; 0x38
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3304      	adds	r3, #4
 8002e80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2201      	movs	r2, #1
 8002e98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9a:	7afb      	ldrb	r3, [r7, #11]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d102      	bne.n	8002eb4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6979      	ldr	r1, [r7, #20]
 8002ecc:	f002 fb8a 	bl	80055e4 <USB_EP0StartXfer>
 8002ed0:	e008      	b.n	8002ee4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	6979      	ldr	r1, [r7, #20]
 8002ee0:	f002 f938 	bl	8005154 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d901      	bls.n	8002f0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e050      	b.n	8002fae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da0f      	bge.n	8002f34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	3338      	adds	r3, #56	; 0x38
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
 8002f32:	e00d      	b.n	8002f50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	3304      	adds	r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_PCD_EP_SetStall+0x82>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e01e      	b.n	8002fae <HAL_PCD_EP_SetStall+0xc0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68f9      	ldr	r1, [r7, #12]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f002 fdc8 	bl	8005b14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	b2d9      	uxtb	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f002 ffb8 	bl	8005f14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f003 020f 	and.w	r2, r3, #15
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d901      	bls.n	8002fd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e042      	b.n	800305a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da0f      	bge.n	8002ffc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 020f 	and.w	r2, r3, #15
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	3338      	adds	r3, #56	; 0x38
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	705a      	strb	r2, [r3, #1]
 8002ffa:	e00f      	b.n	800301c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 020f 	and.w	r2, r3, #15
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	3304      	adds	r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_PCD_EP_ClrStall+0x86>
 8003038:	2302      	movs	r3, #2
 800303a:	e00e      	b.n	800305a <HAL_PCD_EP_ClrStall+0xa4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68f9      	ldr	r1, [r7, #12]
 800304a:	4618      	mov	r0, r3
 800304c:	f002 fdd0 	bl	8005bf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800306e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003072:	2b00      	cmp	r3, #0
 8003074:	da0c      	bge.n	8003090 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 020f 	and.w	r2, r3, #15
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	3338      	adds	r3, #56	; 0x38
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4413      	add	r3, r2
 800308a:	3304      	adds	r3, #4
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	e00c      	b.n	80030aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	f003 020f 	and.w	r2, r3, #15
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	3304      	adds	r3, #4
 80030a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 fbef 	bl	8005894 <USB_EPStopXfer>
 80030b6:	4603      	mov	r3, r0
 80030b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030ba:	7afb      	ldrb	r3, [r7, #11]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	3338      	adds	r3, #56	; 0x38
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	3304      	adds	r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d901      	bls.n	80030fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e06c      	b.n	80031d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	429a      	cmp	r2, r3
 8003110:	d902      	bls.n	8003118 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3303      	adds	r3, #3
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003120:	e02b      	b.n	800317a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	429a      	cmp	r2, r3
 8003136:	d902      	bls.n	800313e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3303      	adds	r3, #3
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6919      	ldr	r1, [r3, #16]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003156:	b2db      	uxtb	r3, r3
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4603      	mov	r3, r0
 800315c:	6978      	ldr	r0, [r7, #20]
 800315e:	f002 fc43 	bl	80059e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	441a      	add	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	441a      	add	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	b29b      	uxth	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	429a      	cmp	r2, r3
 800318e:	d809      	bhi.n	80031a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a1a      	ldr	r2, [r3, #32]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003198:	429a      	cmp	r2, r3
 800319a:	d203      	bcs.n	80031a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1be      	bne.n	8003122 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d811      	bhi.n	80031d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	2201      	movs	r2, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	6939      	ldr	r1, [r7, #16]
 80031cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031d0:	4013      	ands	r3, r2
 80031d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	333c      	adds	r3, #60	; 0x3c
 80031f8:	3304      	adds	r3, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d17b      	bne.n	800330e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d015      	beq.n	800324c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4a61      	ldr	r2, [pc, #388]	; (80033a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	f240 80b9 	bls.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80b3 	beq.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003242:	461a      	mov	r2, r3
 8003244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003248:	6093      	str	r3, [r2, #8]
 800324a:	e0a7      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	2320      	movs	r3, #32
 8003266:	6093      	str	r3, [r2, #8]
 8003268:	e098      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f040 8093 	bne.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	4a4b      	ldr	r2, [pc, #300]	; (80033a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d90f      	bls.n	800329e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	461a      	mov	r2, r3
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	6093      	str	r3, [r2, #8]
 800329c:	e07e      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	3304      	adds	r3, #4
 80032b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	0159      	lsls	r1, r3, #5
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	440b      	add	r3, r1
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	1ad2      	subs	r2, r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d114      	bne.n	8003300 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032e8:	461a      	mov	r2, r3
 80032ea:	2101      	movs	r1, #1
 80032ec:	f002 fe12 	bl	8005f14 <USB_EP0_OutStart>
 80032f0:	e006      	b.n	8003300 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	441a      	add	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f005 f928 	bl	800855c <HAL_PCD_DataOutStageCallback>
 800330c:	e046      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	4a26      	ldr	r2, [pc, #152]	; (80033ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d124      	bne.n	8003360 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	461a      	mov	r2, r3
 800332e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003332:	6093      	str	r3, [r2, #8]
 8003334:	e032      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	2320      	movs	r3, #32
 8003350:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f005 f8ff 	bl	800855c <HAL_PCD_DataOutStageCallback>
 800335e:	e01d      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d114      	bne.n	8003390 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003388:	461a      	mov	r2, r3
 800338a:	2100      	movs	r1, #0
 800338c:	f002 fdc2 	bl	8005f14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	4619      	mov	r1, r3
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f005 f8e0 	bl	800855c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	4f54300a 	.word	0x4f54300a
 80033ac:	4f54310a 	.word	0x4f54310a

080033b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	333c      	adds	r3, #60	; 0x3c
 80033c8:	3304      	adds	r3, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a15      	ldr	r2, [pc, #84]	; (8003438 <PCD_EP_OutSetupPacket_int+0x88>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d90e      	bls.n	8003404 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d009      	beq.n	8003404 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003402:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f005 f897 	bl	8008538 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <PCD_EP_OutSetupPacket_int+0x88>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d90c      	bls.n	800342c <PCD_EP_OutSetupPacket_int+0x7c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d108      	bne.n	800342c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003424:	461a      	mov	r2, r3
 8003426:	2101      	movs	r1, #1
 8003428:	f002 fd74 	bl	8005f14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	4f54300a 	.word	0x4f54300a

0800343c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
 8003448:	4613      	mov	r3, r2
 800344a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800345a:	883b      	ldrh	r3, [r7, #0]
 800345c:	0419      	lsls	r1, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	430a      	orrs	r2, r1
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
 8003468:	e028      	b.n	80034bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	4413      	add	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003478:	2300      	movs	r3, #0
 800347a:	73fb      	strb	r3, [r7, #15]
 800347c:	e00d      	b.n	800349a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	3340      	adds	r3, #64	; 0x40
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4413      	add	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	3301      	adds	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	3b01      	subs	r3, #1
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d3ec      	bcc.n	800347e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034a4:	883b      	ldrh	r3, [r7, #0]
 80034a6:	0418      	lsls	r0, r3, #16
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	4302      	orrs	r2, r0
 80034b4:	3340      	adds	r3, #64	; 0x40
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351e:	f043 0303 	orr.w	r3, r3, #3
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a1f      	ldr	r2, [pc, #124]	; (80035c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
 800354e:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003560:	f7fd fbe4 	bl	8000d2c <HAL_GetTick>
 8003564:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003566:	e009      	b.n	800357c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003568:	f7fd fbe0 	bl	8000d2c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003576:	d901      	bls.n	800357c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e01f      	b.n	80035bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800357c:	4b13      	ldr	r3, [pc, #76]	; (80035cc <HAL_PWREx_EnableOverDrive+0x98>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003588:	d1ee      	bne.n	8003568 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800358c:	2201      	movs	r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003590:	f7fd fbcc 	bl	8000d2c <HAL_GetTick>
 8003594:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003596:	e009      	b.n	80035ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003598:	f7fd fbc8 	bl	8000d2c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035a6:	d901      	bls.n	80035ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e007      	b.n	80035bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035ac:	4b07      	ldr	r3, [pc, #28]	; (80035cc <HAL_PWREx_EnableOverDrive+0x98>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035b8:	d1ee      	bne.n	8003598 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	420e0040 	.word	0x420e0040
 80035cc:	40007000 	.word	0x40007000
 80035d0:	420e0044 	.word	0x420e0044

080035d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0cc      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e8:	4b68      	ldr	r3, [pc, #416]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d90c      	bls.n	8003610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b65      	ldr	r3, [pc, #404]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b63      	ldr	r3, [pc, #396]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0b8      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d020      	beq.n	800365e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003628:	4b59      	ldr	r3, [pc, #356]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a58      	ldr	r2, [pc, #352]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003640:	4b53      	ldr	r3, [pc, #332]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a52      	ldr	r2, [pc, #328]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800364a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364c:	4b50      	ldr	r3, [pc, #320]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	494d      	ldr	r1, [pc, #308]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d044      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	4b47      	ldr	r3, [pc, #284]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d119      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e07f      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d003      	beq.n	8003692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368e:	2b03      	cmp	r3, #3
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003692:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e06f      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a2:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e067      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036b2:	4b37      	ldr	r3, [pc, #220]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f023 0203 	bic.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4934      	ldr	r1, [pc, #208]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c4:	f7fd fb32 	bl	8000d2c <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	e00a      	b.n	80036e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036cc:	f7fd fb2e 	bl	8000d2c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e04f      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 020c 	and.w	r2, r3, #12
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d1eb      	bne.n	80036cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d20c      	bcs.n	800371c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b22      	ldr	r3, [pc, #136]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4b20      	ldr	r3, [pc, #128]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e032      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4916      	ldr	r1, [pc, #88]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	490e      	ldr	r1, [pc, #56]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800375a:	f000 fb57 	bl	8003e0c <HAL_RCC_GetSysClockFreq>
 800375e:	4602      	mov	r2, r0
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	490a      	ldr	r1, [pc, #40]	; (8003794 <HAL_RCC_ClockConfig+0x1c0>)
 800376c:	5ccb      	ldrb	r3, [r1, r3]
 800376e:	fa22 f303 	lsr.w	r3, r2, r3
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fa92 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023c00 	.word	0x40023c00
 8003790:	40023800 	.word	0x40023800
 8003794:	08009540 	.word	0x08009540
 8003798:	20000000 	.word	0x20000000
 800379c:	20000004 	.word	0x20000004

080037a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000000 	.word	0x20000000

080037b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08c      	sub	sp, #48	; 0x30
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d010      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80037f0:	4b6f      	ldr	r3, [pc, #444]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	496c      	ldr	r1, [pc, #432]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800380e:	2301      	movs	r3, #1
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d010      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800381e:	4b64      	ldr	r3, [pc, #400]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003824:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	4960      	ldr	r1, [pc, #384]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800383c:	2301      	movs	r3, #1
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d017      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800384c:	4b58      	ldr	r3, [pc, #352]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800384e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003852:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4955      	ldr	r1, [pc, #340]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386a:	d101      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800386c:	2301      	movs	r3, #1
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003878:	2301      	movs	r3, #1
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003888:	4b49      	ldr	r3, [pc, #292]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800388a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800388e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	4946      	ldr	r1, [pc, #280]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038a6:	d101      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80038a8:	2301      	movs	r3, #1
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80038b4:	2301      	movs	r3, #1
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 808a 	beq.w	80039da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	4b39      	ldr	r3, [pc, #228]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	4a38      	ldr	r2, [pc, #224]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d4:	6413      	str	r3, [r2, #64]	; 0x40
 80038d6:	4b36      	ldr	r3, [pc, #216]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038e2:	4b34      	ldr	r3, [pc, #208]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a33      	ldr	r2, [pc, #204]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038ee:	f7fd fa1d 	bl	8000d2c <HAL_GetTick>
 80038f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038f6:	f7fd fa19 	bl	8000d2c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e278      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003908:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003914:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02f      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	429a      	cmp	r2, r3
 8003930:	d028      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003932:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003942:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003948:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800394e:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d114      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800395a:	f7fd f9e7 	bl	8000d2c <HAL_GetTick>
 800395e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	e00a      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fd f9e3 	bl	8000d2c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e240      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ee      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003990:	d114      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	4902      	ldr	r1, [pc, #8]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]
 80039ac:	e00c      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80039ae:	bf00      	nop
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40007000 	.word	0x40007000
 80039b8:	42470e40 	.word	0x42470e40
 80039bc:	4b4a      	ldr	r3, [pc, #296]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4a49      	ldr	r2, [pc, #292]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039c6:	6093      	str	r3, [r2, #8]
 80039c8:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d4:	4944      	ldr	r1, [pc, #272]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80039ec:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80039ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80039fc:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	4937      	ldr	r1, [pc, #220]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a1e:	4b32      	ldr	r3, [pc, #200]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a24:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2c:	492e      	ldr	r1, [pc, #184]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d011      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a40:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a46:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	4926      	ldr	r1, [pc, #152]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003a60:	2301      	movs	r3, #1
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003a70:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	491a      	ldr	r1, [pc, #104]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d011      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003a92:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a98:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	4911      	ldr	r1, [pc, #68]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac4:	f040 80ff 	bne.w	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ace:	f7fd f92d 	bl	8000d2c <HAL_GetTick>
 8003ad2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ad4:	e00e      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ad6:	f7fd f929 	bl	8000d2c <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d907      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e188      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	424711e0 	.word	0x424711e0
 8003af0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003af4:	4b7e      	ldr	r3, [pc, #504]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ea      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d009      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d028      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d124      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b28:	4b71      	ldr	r3, [pc, #452]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2e:	0c1b      	lsrs	r3, r3, #16
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	3301      	adds	r3, #1
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b3a:	4b6d      	ldr	r3, [pc, #436]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b40:	0e1b      	lsrs	r3, r3, #24
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	431a      	orrs	r2, r3
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	041b      	lsls	r3, r3, #16
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	061b      	lsls	r3, r3, #24
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	071b      	lsls	r3, r3, #28
 8003b6a:	4961      	ldr	r1, [pc, #388]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d035      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9c:	d130      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b9e:	4b54      	ldr	r3, [pc, #336]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	3301      	adds	r3, #1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bb0:	4b4f      	ldr	r3, [pc, #316]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb6:	0f1b      	lsrs	r3, r3, #28
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	019b      	lsls	r3, r3, #6
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	041b      	lsls	r3, r3, #16
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	071b      	lsls	r3, r3, #28
 8003be0:	4943      	ldr	r1, [pc, #268]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003be8:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bee:	f023 021f 	bic.w	r2, r3, #31
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	493d      	ldr	r1, [pc, #244]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d029      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c14:	d124      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	3301      	adds	r3, #1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c28:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2e:	0f1b      	lsrs	r3, r3, #28
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	019b      	lsls	r3, r3, #6
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	431a      	orrs	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	071b      	lsls	r3, r3, #28
 8003c58:	4925      	ldr	r1, [pc, #148]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d016      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	019b      	lsls	r3, r3, #6
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	071b      	lsls	r3, r3, #28
 8003c92:	4917      	ldr	r1, [pc, #92]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ca0:	f7fd f844 	bl	8000d2c <HAL_GetTick>
 8003ca4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ca8:	f7fd f840 	bl	8000d2c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e09f      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	f040 8095 	bne.w	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd4:	f7fd f82a 	bl	8000d2c <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cda:	e00f      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003cdc:	f7fd f826 	bl	8000d2c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d908      	bls.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e085      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	42470068 	.word	0x42470068
 8003cf8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cfc:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d08:	d0e8      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d02b      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d127      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003d32:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	3b01      	subs	r3, #1
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	061b      	lsls	r3, r3, #24
 8003d60:	4928      	ldr	r1, [pc, #160]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d68:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d6e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	3b01      	subs	r3, #1
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	4922      	ldr	r1, [pc, #136]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d01d      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d96:	d118      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d98:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	0e1b      	lsrs	r3, r3, #24
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	019b      	lsls	r3, r3, #6
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	3b01      	subs	r3, #1
 8003dba:	041b      	lsls	r3, r3, #16
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	4910      	ldr	r1, [pc, #64]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dd0:	f7fc ffac 	bl	8000d2c <HAL_GetTick>
 8003dd4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003dd8:	f7fc ffa8 	bl	8000d2c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e007      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df6:	d1ef      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3730      	adds	r7, #48	; 0x30
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40023800 	.word	0x40023800
 8003e08:	42470070 	.word	0x42470070

08003e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e10:	b0ae      	sub	sp, #184	; 0xb8
 8003e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e32:	4bcb      	ldr	r3, [pc, #812]	; (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	f200 8206 	bhi.w	800424c <HAL_RCC_GetSysClockFreq+0x440>
 8003e40:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e7d 	.word	0x08003e7d
 8003e4c:	0800424d 	.word	0x0800424d
 8003e50:	0800424d 	.word	0x0800424d
 8003e54:	0800424d 	.word	0x0800424d
 8003e58:	08003e85 	.word	0x08003e85
 8003e5c:	0800424d 	.word	0x0800424d
 8003e60:	0800424d 	.word	0x0800424d
 8003e64:	0800424d 	.word	0x0800424d
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	0800424d 	.word	0x0800424d
 8003e70:	0800424d 	.word	0x0800424d
 8003e74:	0800424d 	.word	0x0800424d
 8003e78:	0800407d 	.word	0x0800407d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4bb9      	ldr	r3, [pc, #740]	; (8004164 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003e82:	e1e7      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e84:	4bb8      	ldr	r3, [pc, #736]	; (8004168 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e8a:	e1e3      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e8c:	4bb4      	ldr	r3, [pc, #720]	; (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e98:	4bb1      	ldr	r3, [pc, #708]	; (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d071      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea4:	4bae      	ldr	r3, [pc, #696]	; (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	099b      	lsrs	r3, r3, #6
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003eb0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ebc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ec6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003eca:	4622      	mov	r2, r4
 8003ecc:	462b      	mov	r3, r5
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	0159      	lsls	r1, r3, #5
 8003ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003edc:	0150      	lsls	r0, r2, #5
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	1a51      	subs	r1, r2, r1
 8003ee6:	6439      	str	r1, [r7, #64]	; 0x40
 8003ee8:	4629      	mov	r1, r5
 8003eea:	eb63 0301 	sbc.w	r3, r3, r1
 8003eee:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003efc:	4649      	mov	r1, r9
 8003efe:	018b      	lsls	r3, r1, #6
 8003f00:	4641      	mov	r1, r8
 8003f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f06:	4641      	mov	r1, r8
 8003f08:	018a      	lsls	r2, r1, #6
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	1a51      	subs	r1, r2, r1
 8003f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f10:	4649      	mov	r1, r9
 8003f12:	eb63 0301 	sbc.w	r3, r3, r1
 8003f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003f24:	4649      	mov	r1, r9
 8003f26:	00cb      	lsls	r3, r1, #3
 8003f28:	4641      	mov	r1, r8
 8003f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f2e:	4641      	mov	r1, r8
 8003f30:	00ca      	lsls	r2, r1, #3
 8003f32:	4610      	mov	r0, r2
 8003f34:	4619      	mov	r1, r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	4622      	mov	r2, r4
 8003f3a:	189b      	adds	r3, r3, r2
 8003f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f3e:	462b      	mov	r3, r5
 8003f40:	460a      	mov	r2, r1
 8003f42:	eb42 0303 	adc.w	r3, r2, r3
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f54:	4629      	mov	r1, r5
 8003f56:	024b      	lsls	r3, r1, #9
 8003f58:	4621      	mov	r1, r4
 8003f5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f5e:	4621      	mov	r1, r4
 8003f60:	024a      	lsls	r2, r1, #9
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003f78:	f7fc f9a2 	bl	80002c0 <__aeabi_uldivmod>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4613      	mov	r3, r2
 8003f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f86:	e067      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f88:	4b75      	ldr	r3, [pc, #468]	; (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fa6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003faa:	4622      	mov	r2, r4
 8003fac:	462b      	mov	r3, r5
 8003fae:	f04f 0000 	mov.w	r0, #0
 8003fb2:	f04f 0100 	mov.w	r1, #0
 8003fb6:	0159      	lsls	r1, r3, #5
 8003fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fbc:	0150      	lsls	r0, r2, #5
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	1a51      	subs	r1, r2, r1
 8003fc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fc8:	4629      	mov	r1, r5
 8003fca:	eb63 0301 	sbc.w	r3, r3, r1
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003fdc:	4649      	mov	r1, r9
 8003fde:	018b      	lsls	r3, r1, #6
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	018a      	lsls	r2, r1, #6
 8003fea:	4641      	mov	r1, r8
 8003fec:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004002:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800400a:	4692      	mov	sl, r2
 800400c:	469b      	mov	fp, r3
 800400e:	4623      	mov	r3, r4
 8004010:	eb1a 0303 	adds.w	r3, sl, r3
 8004014:	623b      	str	r3, [r7, #32]
 8004016:	462b      	mov	r3, r5
 8004018:	eb4b 0303 	adc.w	r3, fp, r3
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800402a:	4629      	mov	r1, r5
 800402c:	028b      	lsls	r3, r1, #10
 800402e:	4621      	mov	r1, r4
 8004030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004034:	4621      	mov	r1, r4
 8004036:	028a      	lsls	r2, r1, #10
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004040:	2200      	movs	r2, #0
 8004042:	673b      	str	r3, [r7, #112]	; 0x70
 8004044:	677a      	str	r2, [r7, #116]	; 0x74
 8004046:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800404a:	f7fc f939 	bl	80002c0 <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4613      	mov	r3, r2
 8004054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004058:	4b41      	ldr	r3, [pc, #260]	; (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800406a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800406e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800407a:	e0eb      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800407c:	4b38      	ldr	r3, [pc, #224]	; (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004088:	4b35      	ldr	r3, [pc, #212]	; (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d06b      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004094:	4b32      	ldr	r3, [pc, #200]	; (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	099b      	lsrs	r3, r3, #6
 800409a:	2200      	movs	r2, #0
 800409c:	66bb      	str	r3, [r7, #104]	; 0x68
 800409e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a6:	663b      	str	r3, [r7, #96]	; 0x60
 80040a8:	2300      	movs	r3, #0
 80040aa:	667b      	str	r3, [r7, #100]	; 0x64
 80040ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80040b0:	4622      	mov	r2, r4
 80040b2:	462b      	mov	r3, r5
 80040b4:	f04f 0000 	mov.w	r0, #0
 80040b8:	f04f 0100 	mov.w	r1, #0
 80040bc:	0159      	lsls	r1, r3, #5
 80040be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c2:	0150      	lsls	r0, r2, #5
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4621      	mov	r1, r4
 80040ca:	1a51      	subs	r1, r2, r1
 80040cc:	61b9      	str	r1, [r7, #24]
 80040ce:	4629      	mov	r1, r5
 80040d0:	eb63 0301 	sbc.w	r3, r3, r1
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040e2:	4659      	mov	r1, fp
 80040e4:	018b      	lsls	r3, r1, #6
 80040e6:	4651      	mov	r1, sl
 80040e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ec:	4651      	mov	r1, sl
 80040ee:	018a      	lsls	r2, r1, #6
 80040f0:	4651      	mov	r1, sl
 80040f2:	ebb2 0801 	subs.w	r8, r2, r1
 80040f6:	4659      	mov	r1, fp
 80040f8:	eb63 0901 	sbc.w	r9, r3, r1
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004108:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800410c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004110:	4690      	mov	r8, r2
 8004112:	4699      	mov	r9, r3
 8004114:	4623      	mov	r3, r4
 8004116:	eb18 0303 	adds.w	r3, r8, r3
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	462b      	mov	r3, r5
 800411e:	eb49 0303 	adc.w	r3, r9, r3
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004130:	4629      	mov	r1, r5
 8004132:	024b      	lsls	r3, r1, #9
 8004134:	4621      	mov	r1, r4
 8004136:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800413a:	4621      	mov	r1, r4
 800413c:	024a      	lsls	r2, r1, #9
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004146:	2200      	movs	r2, #0
 8004148:	65bb      	str	r3, [r7, #88]	; 0x58
 800414a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800414c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004150:	f7fc f8b6 	bl	80002c0 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4613      	mov	r3, r2
 800415a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800415e:	e065      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x420>
 8004160:	40023800 	.word	0x40023800
 8004164:	00f42400 	.word	0x00f42400
 8004168:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416c:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCC_GetSysClockFreq+0x458>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	099b      	lsrs	r3, r3, #6
 8004172:	2200      	movs	r2, #0
 8004174:	4618      	mov	r0, r3
 8004176:	4611      	mov	r1, r2
 8004178:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800417c:	653b      	str	r3, [r7, #80]	; 0x50
 800417e:	2300      	movs	r3, #0
 8004180:	657b      	str	r3, [r7, #84]	; 0x54
 8004182:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004186:	4642      	mov	r2, r8
 8004188:	464b      	mov	r3, r9
 800418a:	f04f 0000 	mov.w	r0, #0
 800418e:	f04f 0100 	mov.w	r1, #0
 8004192:	0159      	lsls	r1, r3, #5
 8004194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004198:	0150      	lsls	r0, r2, #5
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4641      	mov	r1, r8
 80041a0:	1a51      	subs	r1, r2, r1
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	4649      	mov	r1, r9
 80041a6:	eb63 0301 	sbc.w	r3, r3, r1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041b8:	4659      	mov	r1, fp
 80041ba:	018b      	lsls	r3, r1, #6
 80041bc:	4651      	mov	r1, sl
 80041be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041c2:	4651      	mov	r1, sl
 80041c4:	018a      	lsls	r2, r1, #6
 80041c6:	4651      	mov	r1, sl
 80041c8:	1a54      	subs	r4, r2, r1
 80041ca:	4659      	mov	r1, fp
 80041cc:	eb63 0501 	sbc.w	r5, r3, r1
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	00eb      	lsls	r3, r5, #3
 80041da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041de:	00e2      	lsls	r2, r4, #3
 80041e0:	4614      	mov	r4, r2
 80041e2:	461d      	mov	r5, r3
 80041e4:	4643      	mov	r3, r8
 80041e6:	18e3      	adds	r3, r4, r3
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	464b      	mov	r3, r9
 80041ec:	eb45 0303 	adc.w	r3, r5, r3
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041fe:	4629      	mov	r1, r5
 8004200:	028b      	lsls	r3, r1, #10
 8004202:	4621      	mov	r1, r4
 8004204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004208:	4621      	mov	r1, r4
 800420a:	028a      	lsls	r2, r1, #10
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004214:	2200      	movs	r2, #0
 8004216:	64bb      	str	r3, [r7, #72]	; 0x48
 8004218:	64fa      	str	r2, [r7, #76]	; 0x4c
 800421a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800421e:	f7fc f84f 	bl	80002c0 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4613      	mov	r3, r2
 8004228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <HAL_RCC_GetSysClockFreq+0x458>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	0f1b      	lsrs	r3, r3, #28
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800423a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800423e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004242:	fbb2 f3f3 	udiv	r3, r2, r3
 8004246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800424a:	e003      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <HAL_RCC_GetSysClockFreq+0x45c>)
 800424e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004252:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004258:	4618      	mov	r0, r3
 800425a:	37b8      	adds	r7, #184	; 0xb8
 800425c:	46bd      	mov	sp, r7
 800425e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800
 8004268:	00f42400 	.word	0x00f42400

0800426c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e28d      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8083 	beq.w	8004392 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800428c:	4b94      	ldr	r3, [pc, #592]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b04      	cmp	r3, #4
 8004296:	d019      	beq.n	80042cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004298:	4b91      	ldr	r3, [pc, #580]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d106      	bne.n	80042b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042a4:	4b8e      	ldr	r3, [pc, #568]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b0:	d00c      	beq.n	80042cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4b8b      	ldr	r3, [pc, #556]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d112      	bne.n	80042e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042be:	4b88      	ldr	r3, [pc, #544]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ca:	d10b      	bne.n	80042e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	4b84      	ldr	r3, [pc, #528]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d05b      	beq.n	8004390 <HAL_RCC_OscConfig+0x124>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d157      	bne.n	8004390 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e25a      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x90>
 80042ee:	4b7c      	ldr	r3, [pc, #496]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a7b      	ldr	r2, [pc, #492]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xcc>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0xb4>
 8004306:	4b76      	ldr	r3, [pc, #472]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a75      	ldr	r2, [pc, #468]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b73      	ldr	r3, [pc, #460]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a72      	ldr	r2, [pc, #456]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xcc>
 8004320:	4b6f      	ldr	r3, [pc, #444]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6e      	ldr	r2, [pc, #440]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b6c      	ldr	r3, [pc, #432]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a6b      	ldr	r2, [pc, #428]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fc fcf4 	bl	8000d2c <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004348:	f7fc fcf0 	bl	8000d2c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e21f      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b61      	ldr	r3, [pc, #388]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xdc>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fc fce0 	bl	8000d2c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004370:	f7fc fcdc 	bl	8000d2c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e20b      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b57      	ldr	r3, [pc, #348]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x104>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d06f      	beq.n	800447e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800439e:	4b50      	ldr	r3, [pc, #320]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d017      	beq.n	80043da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043aa:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d105      	bne.n	80043c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043b6:	4b4a      	ldr	r3, [pc, #296]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c2:	4b47      	ldr	r3, [pc, #284]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d11c      	bne.n	8004408 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ce:	4b44      	ldr	r3, [pc, #272]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d116      	bne.n	8004408 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043da:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_RCC_OscConfig+0x186>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e1d3      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f2:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4937      	ldr	r1, [pc, #220]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004406:	e03a      	b.n	800447e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d020      	beq.n	8004452 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004410:	4b34      	ldr	r3, [pc, #208]	; (80044e4 <HAL_RCC_OscConfig+0x278>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fc fc89 	bl	8000d2c <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800441e:	f7fc fc85 	bl	8000d2c <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e1b4      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004430:	4b2b      	ldr	r3, [pc, #172]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443c:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4925      	ldr	r1, [pc, #148]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 800444c:	4313      	orrs	r3, r2
 800444e:	600b      	str	r3, [r1, #0]
 8004450:	e015      	b.n	800447e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004452:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <HAL_RCC_OscConfig+0x278>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fc fc68 	bl	8000d2c <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004460:	f7fc fc64 	bl	8000d2c <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e193      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004472:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d036      	beq.n	80044f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d016      	beq.n	80044c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004494:	2201      	movs	r2, #1
 8004496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fc fc48 	bl	8000d2c <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a0:	f7fc fc44 	bl	8000d2c <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e173      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80044b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x234>
 80044be:	e01b      	b.n	80044f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c0:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c6:	f7fc fc31 	bl	8000d2c <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044cc:	e00e      	b.n	80044ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ce:	f7fc fc2d 	bl	8000d2c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d907      	bls.n	80044ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e15c      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
 80044e0:	40023800 	.word	0x40023800
 80044e4:	42470000 	.word	0x42470000
 80044e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	4b8a      	ldr	r3, [pc, #552]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80044ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1ea      	bne.n	80044ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8097 	beq.w	8004634 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450a:	4b83      	ldr	r3, [pc, #524]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10f      	bne.n	8004536 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	4b7f      	ldr	r3, [pc, #508]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	4a7e      	ldr	r2, [pc, #504]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004524:	6413      	str	r3, [r2, #64]	; 0x40
 8004526:	4b7c      	ldr	r3, [pc, #496]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004532:	2301      	movs	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004536:	4b79      	ldr	r3, [pc, #484]	; (800471c <HAL_RCC_OscConfig+0x4b0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d118      	bne.n	8004574 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004542:	4b76      	ldr	r3, [pc, #472]	; (800471c <HAL_RCC_OscConfig+0x4b0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a75      	ldr	r2, [pc, #468]	; (800471c <HAL_RCC_OscConfig+0x4b0>)
 8004548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454e:	f7fc fbed 	bl	8000d2c <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004556:	f7fc fbe9 	bl	8000d2c <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e118      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	4b6c      	ldr	r3, [pc, #432]	; (800471c <HAL_RCC_OscConfig+0x4b0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d106      	bne.n	800458a <HAL_RCC_OscConfig+0x31e>
 800457c:	4b66      	ldr	r3, [pc, #408]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	4a65      	ldr	r2, [pc, #404]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	6713      	str	r3, [r2, #112]	; 0x70
 8004588:	e01c      	b.n	80045c4 <HAL_RCC_OscConfig+0x358>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b05      	cmp	r3, #5
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x340>
 8004592:	4b61      	ldr	r3, [pc, #388]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a60      	ldr	r2, [pc, #384]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004598:	f043 0304 	orr.w	r3, r3, #4
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
 800459e:	4b5e      	ldr	r3, [pc, #376]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a5d      	ldr	r2, [pc, #372]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0x358>
 80045ac:	4b5a      	ldr	r3, [pc, #360]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4a59      	ldr	r2, [pc, #356]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	6713      	str	r3, [r2, #112]	; 0x70
 80045b8:	4b57      	ldr	r3, [pc, #348]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045bc:	4a56      	ldr	r2, [pc, #344]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045be:	f023 0304 	bic.w	r3, r3, #4
 80045c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d015      	beq.n	80045f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fc fbae 	bl	8000d2c <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d4:	f7fc fbaa 	bl	8000d2c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e0d7      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ea:	4b4b      	ldr	r3, [pc, #300]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0ee      	beq.n	80045d4 <HAL_RCC_OscConfig+0x368>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fc fb98 	bl	8000d2c <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fc fb94 	bl	8000d2c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e0c1      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004616:	4b40      	ldr	r3, [pc, #256]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1ee      	bne.n	8004600 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d105      	bne.n	8004634 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004628:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	4a3a      	ldr	r2, [pc, #232]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 800462e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004632:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80ad 	beq.w	8004798 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800463e:	4b36      	ldr	r3, [pc, #216]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b08      	cmp	r3, #8
 8004648:	d060      	beq.n	800470c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d145      	bne.n	80046de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004652:	4b33      	ldr	r3, [pc, #204]	; (8004720 <HAL_RCC_OscConfig+0x4b4>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fc fb68 	bl	8000d2c <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004660:	f7fc fb64 	bl	8000d2c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e093      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004672:	4b29      	ldr	r3, [pc, #164]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69da      	ldr	r2, [r3, #28]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	019b      	lsls	r3, r3, #6
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	3b01      	subs	r3, #1
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	071b      	lsls	r3, r3, #28
 80046aa:	491b      	ldr	r1, [pc, #108]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_RCC_OscConfig+0x4b4>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b6:	f7fc fb39 	bl	8000d2c <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046be:	f7fc fb35 	bl	8000d2c <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e064      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x452>
 80046dc:	e05c      	b.n	8004798 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <HAL_RCC_OscConfig+0x4b4>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fc fb22 	bl	8000d2c <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fc fb1e 	bl	8000d2c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e04d      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x480>
 800470a:	e045      	b.n	8004798 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e040      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
 8004718:	40023800 	.word	0x40023800
 800471c:	40007000 	.word	0x40007000
 8004720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004724:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <HAL_RCC_OscConfig+0x538>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d030      	beq.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d129      	bne.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d122      	bne.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800475a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800475c:	4293      	cmp	r3, r2
 800475e:	d119      	bne.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	3b01      	subs	r3, #1
 800476e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d10f      	bne.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d107      	bne.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d001      	beq.n	8004798 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800

080047a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047a8:	b084      	sub	sp, #16
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	f107 001c 	add.w	r0, r7, #28
 80047b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d122      	bne.n	8004806 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d105      	bne.n	80047fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f001 fbe8 	bl	8005fd0 <USB_CoreReset>
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]
 8004804:	e01a      	b.n	800483c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f001 fbdc 	bl	8005fd0 <USB_CoreReset>
 8004818:	4603      	mov	r3, r0
 800481a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800481c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	639a      	str	r2, [r3, #56]	; 0x38
 800482e:	e005      	b.n	800483c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	2b01      	cmp	r3, #1
 8004840:	d10b      	bne.n	800485a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f043 0206 	orr.w	r2, r3, #6
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004866:	b004      	add	sp, #16
 8004868:	4770      	bx	lr
	...

0800486c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	4613      	mov	r3, r2
 8004878:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d165      	bne.n	800494c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4a41      	ldr	r2, [pc, #260]	; (8004988 <USB_SetTurnaroundTime+0x11c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d906      	bls.n	8004896 <USB_SetTurnaroundTime+0x2a>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4a40      	ldr	r2, [pc, #256]	; (800498c <USB_SetTurnaroundTime+0x120>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d202      	bcs.n	8004896 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004890:	230f      	movs	r3, #15
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	e062      	b.n	800495c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4a3c      	ldr	r2, [pc, #240]	; (800498c <USB_SetTurnaroundTime+0x120>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d306      	bcc.n	80048ac <USB_SetTurnaroundTime+0x40>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4a3b      	ldr	r2, [pc, #236]	; (8004990 <USB_SetTurnaroundTime+0x124>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d202      	bcs.n	80048ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048a6:	230e      	movs	r3, #14
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e057      	b.n	800495c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4a38      	ldr	r2, [pc, #224]	; (8004990 <USB_SetTurnaroundTime+0x124>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d306      	bcc.n	80048c2 <USB_SetTurnaroundTime+0x56>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4a37      	ldr	r2, [pc, #220]	; (8004994 <USB_SetTurnaroundTime+0x128>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d202      	bcs.n	80048c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048bc:	230d      	movs	r3, #13
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e04c      	b.n	800495c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4a33      	ldr	r2, [pc, #204]	; (8004994 <USB_SetTurnaroundTime+0x128>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d306      	bcc.n	80048d8 <USB_SetTurnaroundTime+0x6c>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4a32      	ldr	r2, [pc, #200]	; (8004998 <USB_SetTurnaroundTime+0x12c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d802      	bhi.n	80048d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048d2:	230c      	movs	r3, #12
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e041      	b.n	800495c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4a2f      	ldr	r2, [pc, #188]	; (8004998 <USB_SetTurnaroundTime+0x12c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d906      	bls.n	80048ee <USB_SetTurnaroundTime+0x82>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4a2e      	ldr	r2, [pc, #184]	; (800499c <USB_SetTurnaroundTime+0x130>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d802      	bhi.n	80048ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048e8:	230b      	movs	r3, #11
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e036      	b.n	800495c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <USB_SetTurnaroundTime+0x130>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d906      	bls.n	8004904 <USB_SetTurnaroundTime+0x98>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <USB_SetTurnaroundTime+0x134>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d802      	bhi.n	8004904 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048fe:	230a      	movs	r3, #10
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	e02b      	b.n	800495c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4a26      	ldr	r2, [pc, #152]	; (80049a0 <USB_SetTurnaroundTime+0x134>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d906      	bls.n	800491a <USB_SetTurnaroundTime+0xae>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4a25      	ldr	r2, [pc, #148]	; (80049a4 <USB_SetTurnaroundTime+0x138>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d202      	bcs.n	800491a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004914:	2309      	movs	r3, #9
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	e020      	b.n	800495c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4a21      	ldr	r2, [pc, #132]	; (80049a4 <USB_SetTurnaroundTime+0x138>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d306      	bcc.n	8004930 <USB_SetTurnaroundTime+0xc4>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4a20      	ldr	r2, [pc, #128]	; (80049a8 <USB_SetTurnaroundTime+0x13c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d802      	bhi.n	8004930 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800492a:	2308      	movs	r3, #8
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e015      	b.n	800495c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <USB_SetTurnaroundTime+0x13c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d906      	bls.n	8004946 <USB_SetTurnaroundTime+0xda>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <USB_SetTurnaroundTime+0x140>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d202      	bcs.n	8004946 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004940:	2307      	movs	r3, #7
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e00a      	b.n	800495c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004946:	2306      	movs	r3, #6
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	e007      	b.n	800495c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004952:	2309      	movs	r3, #9
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	e001      	b.n	800495c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004958:	2309      	movs	r3, #9
 800495a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	029b      	lsls	r3, r3, #10
 8004970:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004974:	431a      	orrs	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	00d8acbf 	.word	0x00d8acbf
 800498c:	00e4e1c0 	.word	0x00e4e1c0
 8004990:	00f42400 	.word	0x00f42400
 8004994:	01067380 	.word	0x01067380
 8004998:	011a499f 	.word	0x011a499f
 800499c:	01312cff 	.word	0x01312cff
 80049a0:	014ca43f 	.word	0x014ca43f
 80049a4:	016e3600 	.word	0x016e3600
 80049a8:	01a6ab1f 	.word	0x01a6ab1f
 80049ac:	01e84800 	.word	0x01e84800

080049b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f043 0201 	orr.w	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d115      	bne.n	8004a42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a22:	2001      	movs	r0, #1
 8004a24:	f7fc f98e 	bl	8000d44 <HAL_Delay>
      ms++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f001 fa3f 	bl	8005eb2 <USB_GetMode>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d01e      	beq.n	8004a78 <USB_SetCurrentMode+0x84>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b31      	cmp	r3, #49	; 0x31
 8004a3e:	d9f0      	bls.n	8004a22 <USB_SetCurrentMode+0x2e>
 8004a40:	e01a      	b.n	8004a78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d115      	bne.n	8004a74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a54:	2001      	movs	r0, #1
 8004a56:	f7fc f975 	bl	8000d44 <HAL_Delay>
      ms++;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f001 fa26 	bl	8005eb2 <USB_GetMode>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <USB_SetCurrentMode+0x84>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b31      	cmp	r3, #49	; 0x31
 8004a70:	d9f0      	bls.n	8004a54 <USB_SetCurrentMode+0x60>
 8004a72:	e001      	b.n	8004a78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e005      	b.n	8004a84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b32      	cmp	r3, #50	; 0x32
 8004a7c:	d101      	bne.n	8004a82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	e009      	b.n	8004ac0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	3340      	adds	r3, #64	; 0x40
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	3301      	adds	r3, #1
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b0e      	cmp	r3, #14
 8004ac4:	d9f2      	bls.n	8004aac <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d11c      	bne.n	8004b06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ada:	f043 0302 	orr.w	r3, r3, #2
 8004ade:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e005      	b.n	8004b12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b24:	4619      	mov	r1, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	680b      	ldr	r3, [r1, #0]
 8004b30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d10c      	bne.n	8004b52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d104      	bne.n	8004b48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b3e:	2100      	movs	r1, #0
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f965 	bl	8004e10 <USB_SetDevSpeed>
 8004b46:	e008      	b.n	8004b5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b48:	2101      	movs	r1, #1
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f960 	bl	8004e10 <USB_SetDevSpeed>
 8004b50:	e003      	b.n	8004b5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b52:	2103      	movs	r1, #3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f95b 	bl	8004e10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b5a:	2110      	movs	r1, #16
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8f3 	bl	8004d48 <USB_FlushTxFifo>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f91f 	bl	8004db0 <USB_FlushRxFifo>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	461a      	mov	r2, r3
 8004b84:	2300      	movs	r3, #0
 8004b86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2300      	movs	r3, #0
 8004b92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	e043      	b.n	8004c2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bbc:	d118      	bne.n	8004bf0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e013      	b.n	8004c02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be6:	461a      	mov	r2, r3
 8004be8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e008      	b.n	8004c02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0e:	461a      	mov	r2, r3
 8004c10:	2300      	movs	r3, #0
 8004c12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d3b7      	bcc.n	8004ba6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c36:	2300      	movs	r3, #0
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	e043      	b.n	8004cc4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c52:	d118      	bne.n	8004c86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	461a      	mov	r2, r3
 8004c68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e013      	b.n	8004c98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e008      	b.n	8004c98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c92:	461a      	mov	r2, r3
 8004c94:	2300      	movs	r3, #0
 8004c96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d3b7      	bcc.n	8004c3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004cec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f043 0210 	orr.w	r2, r3, #16
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699a      	ldr	r2, [r3, #24]
 8004d04:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <USB_DevInit+0x2b8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f043 0208 	orr.w	r2, r3, #8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d107      	bne.n	8004d34 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d2c:	f043 0304 	orr.w	r3, r3, #4
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d40:	b004      	add	sp, #16
 8004d42:	4770      	bx	lr
 8004d44:	803c3800 	.word	0x803c3800

08004d48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a13      	ldr	r2, [pc, #76]	; (8004dac <USB_FlushTxFifo+0x64>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d901      	bls.n	8004d68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e01b      	b.n	8004da0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	daf2      	bge.n	8004d56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	019b      	lsls	r3, r3, #6
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4a08      	ldr	r2, [pc, #32]	; (8004dac <USB_FlushTxFifo+0x64>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e006      	b.n	8004da0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d0f0      	beq.n	8004d80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	00030d40 	.word	0x00030d40

08004db0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4a11      	ldr	r2, [pc, #68]	; (8004e0c <USB_FlushRxFifo+0x5c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e018      	b.n	8004e00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	daf2      	bge.n	8004dbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2210      	movs	r2, #16
 8004dde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a08      	ldr	r2, [pc, #32]	; (8004e0c <USB_FlushRxFifo+0x5c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e006      	b.n	8004e00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	d0f0      	beq.n	8004de0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	00030d40 	.word	0x00030d40

08004e10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e30:	4313      	orrs	r3, r2
 8004e32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b087      	sub	sp, #28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0306 	and.w	r3, r3, #6
 8004e5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e62:	2300      	movs	r3, #0
 8004e64:	75fb      	strb	r3, [r7, #23]
 8004e66:	e00a      	b.n	8004e7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d002      	beq.n	8004e74 <USB_GetDevSpeed+0x32>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b06      	cmp	r3, #6
 8004e72:	d102      	bne.n	8004e7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e74:	2302      	movs	r3, #2
 8004e76:	75fb      	strb	r3, [r7, #23]
 8004e78:	e001      	b.n	8004e7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e7a:	230f      	movs	r3, #15
 8004e7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	785b      	ldrb	r3, [r3, #1]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d13a      	bne.n	8004f1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	2101      	movs	r1, #1
 8004eba:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	68f9      	ldr	r1, [r7, #12]
 8004ec2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d155      	bne.n	8004f8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	791b      	ldrb	r3, [r3, #4]
 8004efa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004efc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	059b      	lsls	r3, r3, #22
 8004f02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f04:	4313      	orrs	r3, r2
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	e036      	b.n	8004f8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f24:	69da      	ldr	r2, [r3, #28]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	2101      	movs	r1, #1
 8004f30:	fa01 f303 	lsl.w	r3, r1, r3
 8004f34:	041b      	lsls	r3, r3, #16
 8004f36:	68f9      	ldr	r1, [r7, #12]
 8004f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d11a      	bne.n	8004f8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	791b      	ldrb	r3, [r3, #4]
 8004f70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f72:	430b      	orrs	r3, r1
 8004f74:	4313      	orrs	r3, r2
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d161      	bne.n	800507c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fce:	d11f      	bne.n	8005010 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	0151      	lsls	r1, r2, #5
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	440a      	add	r2, r1
 8005006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800500e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	2101      	movs	r1, #1
 8005022:	fa01 f303 	lsl.w	r3, r1, r3
 8005026:	b29b      	uxth	r3, r3
 8005028:	43db      	mvns	r3, r3
 800502a:	68f9      	ldr	r1, [r7, #12]
 800502c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005030:	4013      	ands	r3, r2
 8005032:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	b29b      	uxth	r3, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005054:	4013      	ands	r3, r2
 8005056:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	0159      	lsls	r1, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	440b      	add	r3, r1
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	4619      	mov	r1, r3
 8005074:	4b35      	ldr	r3, [pc, #212]	; (800514c <USB_DeactivateEndpoint+0x1b0>)
 8005076:	4013      	ands	r3, r2
 8005078:	600b      	str	r3, [r1, #0]
 800507a:	e060      	b.n	800513e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800508e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005092:	d11f      	bne.n	80050d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	2101      	movs	r1, #1
 80050e6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	43db      	mvns	r3, r3
 80050ee:	68f9      	ldr	r1, [r7, #12]
 80050f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050f4:	4013      	ands	r3, r2
 80050f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	2101      	movs	r1, #1
 800510a:	fa01 f303 	lsl.w	r3, r1, r3
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	43db      	mvns	r3, r3
 8005112:	68f9      	ldr	r1, [r7, #12]
 8005114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005118:	4013      	ands	r3, r2
 800511a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	0159      	lsls	r1, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	440b      	add	r3, r1
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	4619      	mov	r1, r3
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <USB_DeactivateEndpoint+0x1b4>)
 800513a:	4013      	ands	r3, r2
 800513c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	ec337800 	.word	0xec337800
 8005150:	eff37800 	.word	0xeff37800

08005154 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	4613      	mov	r3, r2
 8005160:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	2b01      	cmp	r3, #1
 8005172:	f040 815c 	bne.w	800542e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d132      	bne.n	80051e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	440a      	add	r2, r1
 8005194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005198:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800519c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051dc:	0cdb      	lsrs	r3, r3, #19
 80051de:	04db      	lsls	r3, r3, #19
 80051e0:	6113      	str	r3, [r2, #16]
 80051e2:	e074      	b.n	80052ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fe:	0cdb      	lsrs	r3, r3, #19
 8005200:	04db      	lsls	r3, r3, #19
 8005202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005222:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005226:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6999      	ldr	r1, [r3, #24]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	440b      	add	r3, r1
 8005240:	1e59      	subs	r1, r3, #1
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	fbb1 f3f3 	udiv	r3, r1, r3
 800524a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800524c:	4b9d      	ldr	r3, [pc, #628]	; (80054c4 <USB_EPStartXfer+0x370>)
 800524e:	400b      	ands	r3, r1
 8005250:	69b9      	ldr	r1, [r7, #24]
 8005252:	0148      	lsls	r0, r1, #5
 8005254:	69f9      	ldr	r1, [r7, #28]
 8005256:	4401      	add	r1, r0
 8005258:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800525c:	4313      	orrs	r3, r2
 800525e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005276:	69b9      	ldr	r1, [r7, #24]
 8005278:	0148      	lsls	r0, r1, #5
 800527a:	69f9      	ldr	r1, [r7, #28]
 800527c:	4401      	add	r1, r0
 800527e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005282:	4313      	orrs	r3, r2
 8005284:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	791b      	ldrb	r3, [r3, #4]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d11f      	bne.n	80052ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d14b      	bne.n	800536c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d009      	beq.n	80052f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e8:	461a      	mov	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	791b      	ldrb	r3, [r3, #4]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d128      	bne.n	800534a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d110      	bne.n	800532a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005322:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e00f      	b.n	800534a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005348:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e133      	b.n	80055d4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800538a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	791b      	ldrb	r3, [r3, #4]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d015      	beq.n	80053c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 811b 	beq.w	80055d4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	2101      	movs	r1, #1
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	69f9      	ldr	r1, [r7, #28]
 80053b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ba:	4313      	orrs	r3, r2
 80053bc:	634b      	str	r3, [r1, #52]	; 0x34
 80053be:	e109      	b.n	80055d4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d110      	bne.n	80053f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	e00f      	b.n	8005412 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005410:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6919      	ldr	r1, [r3, #16]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	781a      	ldrb	r2, [r3, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	b298      	uxth	r0, r3
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	4603      	mov	r3, r0
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fade 	bl	80059e8 <USB_WritePacket>
 800542c:	e0d2      	b.n	80055d4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005448:	0cdb      	lsrs	r3, r3, #19
 800544a:	04db      	lsls	r3, r3, #19
 800544c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	0151      	lsls	r1, r2, #5
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	440a      	add	r2, r1
 8005464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005468:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800546c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005470:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d126      	bne.n	80054c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005490:	69b9      	ldr	r1, [r7, #24]
 8005492:	0148      	lsls	r0, r1, #5
 8005494:	69f9      	ldr	r1, [r7, #28]
 8005496:	4401      	add	r1, r0
 8005498:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800549c:	4313      	orrs	r3, r2
 800549e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054be:	6113      	str	r3, [r2, #16]
 80054c0:	e03a      	b.n	8005538 <USB_EPStartXfer+0x3e4>
 80054c2:	bf00      	nop
 80054c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	699a      	ldr	r2, [r3, #24]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	1e5a      	subs	r2, r3, #1
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	8afa      	ldrh	r2, [r7, #22]
 80054e4:	fb03 f202 	mul.w	r2, r3, r2
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	8afb      	ldrh	r3, [r7, #22]
 80054fc:	04d9      	lsls	r1, r3, #19
 80054fe:	4b38      	ldr	r3, [pc, #224]	; (80055e0 <USB_EPStartXfer+0x48c>)
 8005500:	400b      	ands	r3, r1
 8005502:	69b9      	ldr	r1, [r7, #24]
 8005504:	0148      	lsls	r0, r1, #5
 8005506:	69f9      	ldr	r1, [r7, #28]
 8005508:	4401      	add	r1, r0
 800550a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800550e:	4313      	orrs	r3, r2
 8005510:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005528:	69b9      	ldr	r1, [r7, #24]
 800552a:	0148      	lsls	r0, r1, #5
 800552c:	69f9      	ldr	r1, [r7, #28]
 800552e:	4401      	add	r1, r0
 8005530:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005534:	4313      	orrs	r3, r2
 8005536:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10d      	bne.n	800555a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6919      	ldr	r1, [r3, #16]
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005556:	460a      	mov	r2, r1
 8005558:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	791b      	ldrb	r3, [r3, #4]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d128      	bne.n	80055b4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d110      	bne.n	8005594 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e00f      	b.n	80055b4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	1ff80000 	.word	0x1ff80000

080055e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2b01      	cmp	r3, #1
 8005602:	f040 80ce 	bne.w	80057a2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d132      	bne.n	8005674 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	0151      	lsls	r1, r2, #5
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	440a      	add	r2, r1
 8005624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005628:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800562c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005650:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566c:	0cdb      	lsrs	r3, r3, #19
 800566e:	04db      	lsls	r3, r3, #19
 8005670:	6113      	str	r3, [r2, #16]
 8005672:	e04e      	b.n	8005712 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568e:	0cdb      	lsrs	r3, r3, #19
 8005690:	04db      	lsls	r3, r3, #19
 8005692:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	0151      	lsls	r1, r2, #5
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	440a      	add	r2, r1
 80056aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	699a      	ldr	r2, [r3, #24]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d903      	bls.n	80056cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005702:	6939      	ldr	r1, [r7, #16]
 8005704:	0148      	lsls	r0, r1, #5
 8005706:	6979      	ldr	r1, [r7, #20]
 8005708:	4401      	add	r1, r0
 800570a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800570e:	4313      	orrs	r3, r2
 8005710:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d11e      	bne.n	8005756 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572c:	461a      	mov	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	e097      	b.n	8005886 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	440a      	add	r2, r1
 800576c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005770:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005774:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 8083 	beq.w	8005886 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	2101      	movs	r1, #1
 8005792:	fa01 f303 	lsl.w	r3, r1, r3
 8005796:	6979      	ldr	r1, [r7, #20]
 8005798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800579c:	4313      	orrs	r3, r2
 800579e:	634b      	str	r3, [r1, #52]	; 0x34
 80057a0:	e071      	b.n	8005886 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057bc:	0cdb      	lsrs	r3, r3, #19
 80057be:	04db      	lsls	r3, r3, #19
 80057c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005818:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800581c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005834:	6939      	ldr	r1, [r7, #16]
 8005836:	0148      	lsls	r0, r1, #5
 8005838:	6979      	ldr	r1, [r7, #20]
 800583a:	4401      	add	r1, r0
 800583c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005840:	4313      	orrs	r3, r2
 8005842:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d10d      	bne.n	8005866 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d009      	beq.n	8005866 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6919      	ldr	r1, [r3, #16]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	460a      	mov	r2, r1
 8005864:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005880:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005884:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	785b      	ldrb	r3, [r3, #1]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d14a      	bne.n	8005948 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ca:	f040 8086 	bne.w	80059da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	7812      	ldrb	r2, [r2, #0]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	7812      	ldrb	r2, [r2, #0]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005914:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3301      	adds	r3, #1
 800591a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005922:	4293      	cmp	r3, r2
 8005924:	d902      	bls.n	800592c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	75fb      	strb	r3, [r7, #23]
          break;
 800592a:	e056      	b.n	80059da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005944:	d0e7      	beq.n	8005916 <USB_EPStopXfer+0x82>
 8005946:	e048      	b.n	80059da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800595c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005960:	d13b      	bne.n	80059da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	7812      	ldrb	r2, [r2, #0]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005980:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005984:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	7812      	ldrb	r2, [r2, #0]
 800599a:	0151      	lsls	r1, r2, #5
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	440a      	add	r2, r1
 80059a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3301      	adds	r3, #1
 80059ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d902      	bls.n	80059c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
          break;
 80059be:	e00c      	b.n	80059da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d8:	d0e7      	beq.n	80059aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80059da:	7dfb      	ldrb	r3, [r7, #23]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b089      	sub	sp, #36	; 0x24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	4611      	mov	r1, r2
 80059f4:	461a      	mov	r2, r3
 80059f6:	460b      	mov	r3, r1
 80059f8:	71fb      	strb	r3, [r7, #7]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d123      	bne.n	8005a56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a0e:	88bb      	ldrh	r3, [r7, #4]
 8005a10:	3303      	adds	r3, #3
 8005a12:	089b      	lsrs	r3, r3, #2
 8005a14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a16:	2300      	movs	r3, #0
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	e018      	b.n	8005a4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	031a      	lsls	r2, r3, #12
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a28:	461a      	mov	r2, r3
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	3301      	adds	r3, #1
 8005a34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3301      	adds	r3, #1
 8005a46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d3e2      	bcc.n	8005a1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3724      	adds	r7, #36	; 0x24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b08b      	sub	sp, #44	; 0x2c
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	089b      	lsrs	r3, r3, #2
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	623b      	str	r3, [r7, #32]
 8005a8e:	e014      	b.n	8005aba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	3301      	adds	r3, #1
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	6a3a      	ldr	r2, [r7, #32]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d3e6      	bcc.n	8005a90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ac2:	8bfb      	ldrh	r3, [r7, #30]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01e      	beq.n	8005b06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f107 0310 	add.w	r3, r7, #16
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	701a      	strb	r2, [r3, #0]
      i++;
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	3301      	adds	r3, #1
 8005af2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	3301      	adds	r3, #1
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005afa:	8bfb      	ldrh	r3, [r7, #30]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b00:	8bfb      	ldrh	r3, [r7, #30]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1ea      	bne.n	8005adc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	372c      	adds	r7, #44	; 0x2c
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d12c      	bne.n	8005b8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	db12      	blt.n	8005b68 <USB_EPSetStall+0x54>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00f      	beq.n	8005b68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	e02b      	b.n	8005be2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	db12      	blt.n	8005bc2 <USB_EPSetStall+0xae>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00f      	beq.n	8005bc2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bc0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005be0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d128      	bne.n	8005c5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	791b      	ldrb	r3, [r3, #4]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d003      	beq.n	8005c3c <USB_EPClearStall+0x4c>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	791b      	ldrb	r3, [r3, #4]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d138      	bne.n	8005cae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	e027      	b.n	8005cae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	791b      	ldrb	r3, [r3, #4]
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d003      	beq.n	8005c8e <USB_EPClearStall+0x9e>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	791b      	ldrb	r3, [r3, #4]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d10f      	bne.n	8005cae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005cde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005cf0:	68f9      	ldr	r1, [r7, #12]
 8005cf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d22:	f023 0303 	bic.w	r3, r3, #3
 8005d26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d36:	f023 0302 	bic.w	r3, r3, #2
 8005d3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b085      	sub	sp, #20
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d64:	f023 0303 	bic.w	r3, r3, #3
 8005d68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d78:	f043 0302 	orr.w	r3, r3, #2
 8005d7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4013      	ands	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005da4:	68fb      	ldr	r3, [r7, #12]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	0c1b      	lsrs	r3, r3, #16
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	4013      	ands	r3, r2
 8005e08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	b29b      	uxth	r3, r3
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	460b      	mov	r3, r1
 8005e24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	4013      	ands	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e48:	68bb      	ldr	r3, [r7, #8]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b087      	sub	sp, #28
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	fa22 f303 	lsr.w	r3, r2, r3
 8005e86:	01db      	lsls	r3, r3, #7
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005eec:	f023 0307 	bic.w	r3, r3, #7
 8005ef0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	333c      	adds	r3, #60	; 0x3c
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <USB_EP0_OutStart+0xb8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d90a      	bls.n	8005f4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f48:	d101      	bne.n	8005f4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e037      	b.n	8005fbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	461a      	mov	r2, r3
 8005f56:	2300      	movs	r3, #0
 8005f58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7c:	f043 0318 	orr.w	r3, r3, #24
 8005f80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f96:	7afb      	ldrb	r3, [r7, #11]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d10f      	bne.n	8005fbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005fba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	4f54300a 	.word	0x4f54300a

08005fd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4a13      	ldr	r2, [pc, #76]	; (8006034 <USB_CoreReset+0x64>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d901      	bls.n	8005fee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e01b      	b.n	8006026 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	daf2      	bge.n	8005fdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f043 0201 	orr.w	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3301      	adds	r3, #1
 800600a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a09      	ldr	r2, [pc, #36]	; (8006034 <USB_CoreReset+0x64>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d901      	bls.n	8006018 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e006      	b.n	8006026 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b01      	cmp	r3, #1
 8006022:	d0f0      	beq.n	8006006 <USB_CoreReset+0x36>

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	00030d40 	.word	0x00030d40

08006038 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006044:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006048:	f002 fd40 	bl	8008acc <USBD_static_malloc>
 800604c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d109      	bne.n	8006068 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	32b0      	adds	r2, #176	; 0xb0
 800605e:	2100      	movs	r1, #0
 8006060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006064:	2302      	movs	r3, #2
 8006066:	e0d4      	b.n	8006212 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006068:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800606c:	2100      	movs	r1, #0
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f002 fd9a 	bl	8008ba8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	32b0      	adds	r2, #176	; 0xb0
 800607e:	68f9      	ldr	r1, [r7, #12]
 8006080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	32b0      	adds	r2, #176	; 0xb0
 800608e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	7c1b      	ldrb	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d138      	bne.n	8006112 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060a0:	4b5e      	ldr	r3, [pc, #376]	; (800621c <USBD_CDC_Init+0x1e4>)
 80060a2:	7819      	ldrb	r1, [r3, #0]
 80060a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060a8:	2202      	movs	r2, #2
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f002 fb9d 	bl	80087ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060b0:	4b5a      	ldr	r3, [pc, #360]	; (800621c <USBD_CDC_Init+0x1e4>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f003 020f 	and.w	r2, r3, #15
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	3324      	adds	r3, #36	; 0x24
 80060c6:	2201      	movs	r2, #1
 80060c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060ca:	4b55      	ldr	r3, [pc, #340]	; (8006220 <USBD_CDC_Init+0x1e8>)
 80060cc:	7819      	ldrb	r1, [r3, #0]
 80060ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d2:	2202      	movs	r2, #2
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f002 fb88 	bl	80087ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060da:	4b51      	ldr	r3, [pc, #324]	; (8006220 <USBD_CDC_Init+0x1e8>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	f003 020f 	and.w	r2, r3, #15
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060f2:	2201      	movs	r2, #1
 80060f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060f6:	4b4b      	ldr	r3, [pc, #300]	; (8006224 <USBD_CDC_Init+0x1ec>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	f003 020f 	and.w	r2, r3, #15
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	3326      	adds	r3, #38	; 0x26
 800610c:	2210      	movs	r2, #16
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	e035      	b.n	800617e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006112:	4b42      	ldr	r3, [pc, #264]	; (800621c <USBD_CDC_Init+0x1e4>)
 8006114:	7819      	ldrb	r1, [r3, #0]
 8006116:	2340      	movs	r3, #64	; 0x40
 8006118:	2202      	movs	r2, #2
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f002 fb65 	bl	80087ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006120:	4b3e      	ldr	r3, [pc, #248]	; (800621c <USBD_CDC_Init+0x1e4>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	f003 020f 	and.w	r2, r3, #15
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	3324      	adds	r3, #36	; 0x24
 8006136:	2201      	movs	r2, #1
 8006138:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800613a:	4b39      	ldr	r3, [pc, #228]	; (8006220 <USBD_CDC_Init+0x1e8>)
 800613c:	7819      	ldrb	r1, [r3, #0]
 800613e:	2340      	movs	r3, #64	; 0x40
 8006140:	2202      	movs	r2, #2
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f002 fb51 	bl	80087ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006148:	4b35      	ldr	r3, [pc, #212]	; (8006220 <USBD_CDC_Init+0x1e8>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006160:	2201      	movs	r2, #1
 8006162:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006164:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <USBD_CDC_Init+0x1ec>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	f003 020f 	and.w	r2, r3, #15
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	3326      	adds	r3, #38	; 0x26
 800617a:	2210      	movs	r2, #16
 800617c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800617e:	4b29      	ldr	r3, [pc, #164]	; (8006224 <USBD_CDC_Init+0x1ec>)
 8006180:	7819      	ldrb	r1, [r3, #0]
 8006182:	2308      	movs	r3, #8
 8006184:	2203      	movs	r2, #3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f002 fb2f 	bl	80087ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800618c:	4b25      	ldr	r3, [pc, #148]	; (8006224 <USBD_CDC_Init+0x1ec>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 020f 	and.w	r2, r3, #15
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	3324      	adds	r3, #36	; 0x24
 80061a2:	2201      	movs	r2, #1
 80061a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	33b0      	adds	r3, #176	; 0xb0
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80061dc:	2302      	movs	r3, #2
 80061de:	e018      	b.n	8006212 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	7c1b      	ldrb	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061e8:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <USBD_CDC_Init+0x1e8>)
 80061ea:	7819      	ldrb	r1, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f002 fbe6 	bl	80089c8 <USBD_LL_PrepareReceive>
 80061fc:	e008      	b.n	8006210 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061fe:	4b08      	ldr	r3, [pc, #32]	; (8006220 <USBD_CDC_Init+0x1e8>)
 8006200:	7819      	ldrb	r1, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006208:	2340      	movs	r3, #64	; 0x40
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f002 fbdc 	bl	80089c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000093 	.word	0x20000093
 8006220:	20000094 	.word	0x20000094
 8006224:	20000095 	.word	0x20000095

08006228 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006234:	4b3a      	ldr	r3, [pc, #232]	; (8006320 <USBD_CDC_DeInit+0xf8>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f002 fafb 	bl	8008836 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006240:	4b37      	ldr	r3, [pc, #220]	; (8006320 <USBD_CDC_DeInit+0xf8>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	f003 020f 	and.w	r2, r3, #15
 8006248:	6879      	ldr	r1, [r7, #4]
 800624a:	4613      	mov	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	3324      	adds	r3, #36	; 0x24
 8006256:	2200      	movs	r2, #0
 8006258:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800625a:	4b32      	ldr	r3, [pc, #200]	; (8006324 <USBD_CDC_DeInit+0xfc>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f002 fae8 	bl	8008836 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006266:	4b2f      	ldr	r3, [pc, #188]	; (8006324 <USBD_CDC_DeInit+0xfc>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f003 020f 	and.w	r2, r3, #15
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800627e:	2200      	movs	r2, #0
 8006280:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006282:	4b29      	ldr	r3, [pc, #164]	; (8006328 <USBD_CDC_DeInit+0x100>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f002 fad4 	bl	8008836 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800628e:	4b26      	ldr	r3, [pc, #152]	; (8006328 <USBD_CDC_DeInit+0x100>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f003 020f 	and.w	r2, r3, #15
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	3324      	adds	r3, #36	; 0x24
 80062a4:	2200      	movs	r2, #0
 80062a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80062a8:	4b1f      	ldr	r3, [pc, #124]	; (8006328 <USBD_CDC_DeInit+0x100>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	f003 020f 	and.w	r2, r3, #15
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	440b      	add	r3, r1
 80062bc:	3326      	adds	r3, #38	; 0x26
 80062be:	2200      	movs	r2, #0
 80062c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	32b0      	adds	r2, #176	; 0xb0
 80062cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01f      	beq.n	8006314 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	33b0      	adds	r3, #176	; 0xb0
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	32b0      	adds	r2, #176	; 0xb0
 80062f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f002 fbf6 	bl	8008ae8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	32b0      	adds	r2, #176	; 0xb0
 8006306:	2100      	movs	r1, #0
 8006308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000093 	.word	0x20000093
 8006324:	20000094 	.word	0x20000094
 8006328:	20000095 	.word	0x20000095

0800632c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	32b0      	adds	r2, #176	; 0xb0
 8006340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006344:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006358:	2303      	movs	r3, #3
 800635a:	e0bf      	b.n	80064dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006364:	2b00      	cmp	r3, #0
 8006366:	d050      	beq.n	800640a <USBD_CDC_Setup+0xde>
 8006368:	2b20      	cmp	r3, #32
 800636a:	f040 80af 	bne.w	80064cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	88db      	ldrh	r3, [r3, #6]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d03a      	beq.n	80063ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	b25b      	sxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	da1b      	bge.n	80063b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	33b0      	adds	r3, #176	; 0xb0
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006396:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	88d2      	ldrh	r2, [r2, #6]
 800639c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	88db      	ldrh	r3, [r3, #6]
 80063a2:	2b07      	cmp	r3, #7
 80063a4:	bf28      	it	cs
 80063a6:	2307      	movcs	r3, #7
 80063a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	89fa      	ldrh	r2, [r7, #14]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 fdb3 	bl	8007f1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80063b6:	e090      	b.n	80064da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	785a      	ldrb	r2, [r3, #1]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	88db      	ldrh	r3, [r3, #6]
 80063c6:	2b3f      	cmp	r3, #63	; 0x3f
 80063c8:	d803      	bhi.n	80063d2 <USBD_CDC_Setup+0xa6>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	88db      	ldrh	r3, [r3, #6]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	e000      	b.n	80063d4 <USBD_CDC_Setup+0xa8>
 80063d2:	2240      	movs	r2, #64	; 0x40
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80063da:	6939      	ldr	r1, [r7, #16]
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80063e2:	461a      	mov	r2, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f001 fdc5 	bl	8007f74 <USBD_CtlPrepareRx>
      break;
 80063ea:	e076      	b.n	80064da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	33b0      	adds	r3, #176	; 0xb0
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	7850      	ldrb	r0, [r2, #1]
 8006402:	2200      	movs	r2, #0
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	4798      	blx	r3
      break;
 8006408:	e067      	b.n	80064da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	785b      	ldrb	r3, [r3, #1]
 800640e:	2b0b      	cmp	r3, #11
 8006410:	d851      	bhi.n	80064b6 <USBD_CDC_Setup+0x18a>
 8006412:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <USBD_CDC_Setup+0xec>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	08006449 	.word	0x08006449
 800641c:	080064c5 	.word	0x080064c5
 8006420:	080064b7 	.word	0x080064b7
 8006424:	080064b7 	.word	0x080064b7
 8006428:	080064b7 	.word	0x080064b7
 800642c:	080064b7 	.word	0x080064b7
 8006430:	080064b7 	.word	0x080064b7
 8006434:	080064b7 	.word	0x080064b7
 8006438:	080064b7 	.word	0x080064b7
 800643c:	080064b7 	.word	0x080064b7
 8006440:	08006473 	.word	0x08006473
 8006444:	0800649d 	.word	0x0800649d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b03      	cmp	r3, #3
 8006452:	d107      	bne.n	8006464 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006454:	f107 030a 	add.w	r3, r7, #10
 8006458:	2202      	movs	r2, #2
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fd5d 	bl	8007f1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006462:	e032      	b.n	80064ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fce7 	bl	8007e3a <USBD_CtlError>
            ret = USBD_FAIL;
 800646c:	2303      	movs	r3, #3
 800646e:	75fb      	strb	r3, [r7, #23]
          break;
 8006470:	e02b      	b.n	80064ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b03      	cmp	r3, #3
 800647c:	d107      	bne.n	800648e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800647e:	f107 030d 	add.w	r3, r7, #13
 8006482:	2201      	movs	r2, #1
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 fd48 	bl	8007f1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800648c:	e01d      	b.n	80064ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 fcd2 	bl	8007e3a <USBD_CtlError>
            ret = USBD_FAIL;
 8006496:	2303      	movs	r3, #3
 8006498:	75fb      	strb	r3, [r7, #23]
          break;
 800649a:	e016      	b.n	80064ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d00f      	beq.n	80064c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fcc5 	bl	8007e3a <USBD_CtlError>
            ret = USBD_FAIL;
 80064b0:	2303      	movs	r3, #3
 80064b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064b4:	e008      	b.n	80064c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 fcbe 	bl	8007e3a <USBD_CtlError>
          ret = USBD_FAIL;
 80064be:	2303      	movs	r3, #3
 80064c0:	75fb      	strb	r3, [r7, #23]
          break;
 80064c2:	e002      	b.n	80064ca <USBD_CDC_Setup+0x19e>
          break;
 80064c4:	bf00      	nop
 80064c6:	e008      	b.n	80064da <USBD_CDC_Setup+0x1ae>
          break;
 80064c8:	bf00      	nop
      }
      break;
 80064ca:	e006      	b.n	80064da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f001 fcb3 	bl	8007e3a <USBD_CtlError>
      ret = USBD_FAIL;
 80064d4:	2303      	movs	r3, #3
 80064d6:	75fb      	strb	r3, [r7, #23]
      break;
 80064d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80064f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	32b0      	adds	r2, #176	; 0xb0
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800650a:	2303      	movs	r3, #3
 800650c:	e065      	b.n	80065da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	32b0      	adds	r2, #176	; 0xb0
 8006518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	f003 020f 	and.w	r2, r3, #15
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	3318      	adds	r3, #24
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d02f      	beq.n	8006598 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	f003 020f 	and.w	r2, r3, #15
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	3318      	adds	r3, #24
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	f003 010f 	and.w	r1, r3, #15
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	460b      	mov	r3, r1
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	440b      	add	r3, r1
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4403      	add	r3, r0
 8006560:	3348      	adds	r3, #72	; 0x48
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	fbb2 f1f3 	udiv	r1, r2, r3
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800656e:	2b00      	cmp	r3, #0
 8006570:	d112      	bne.n	8006598 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	f003 020f 	and.w	r2, r3, #15
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	3318      	adds	r3, #24
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800658a:	78f9      	ldrb	r1, [r7, #3]
 800658c:	2300      	movs	r3, #0
 800658e:	2200      	movs	r2, #0
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f002 f9f8 	bl	8008986 <USBD_LL_Transmit>
 8006596:	e01f      	b.n	80065d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	33b0      	adds	r3, #176	; 0xb0
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d010      	beq.n	80065d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	33b0      	adds	r3, #176	; 0xb0
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	460b      	mov	r3, r1
 80065ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	32b0      	adds	r2, #176	; 0xb0
 80065f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	32b0      	adds	r2, #176	; 0xb0
 8006608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006610:	2303      	movs	r3, #3
 8006612:	e01a      	b.n	800664a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f002 f9f6 	bl	8008a0a <USBD_LL_GetRxDataSize>
 800661e:	4602      	mov	r2, r0
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	33b0      	adds	r3, #176	; 0xb0
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006644:	4611      	mov	r1, r2
 8006646:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	32b0      	adds	r2, #176	; 0xb0
 8006664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006668:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006670:	2303      	movs	r3, #3
 8006672:	e025      	b.n	80066c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	33b0      	adds	r3, #176	; 0xb0
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01a      	beq.n	80066be <USBD_CDC_EP0_RxReady+0x6c>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800668e:	2bff      	cmp	r3, #255	; 0xff
 8006690:	d015      	beq.n	80066be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	33b0      	adds	r3, #176	; 0xb0
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80066aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80066b2:	b292      	uxth	r2, r2
 80066b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	22ff      	movs	r2, #255	; 0xff
 80066ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066d0:	2182      	movs	r1, #130	; 0x82
 80066d2:	4818      	ldr	r0, [pc, #96]	; (8006734 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066d4:	f000 fd4f 	bl	8007176 <USBD_GetEpDesc>
 80066d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066da:	2101      	movs	r1, #1
 80066dc:	4815      	ldr	r0, [pc, #84]	; (8006734 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066de:	f000 fd4a 	bl	8007176 <USBD_GetEpDesc>
 80066e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066e4:	2181      	movs	r1, #129	; 0x81
 80066e6:	4813      	ldr	r0, [pc, #76]	; (8006734 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066e8:	f000 fd45 	bl	8007176 <USBD_GetEpDesc>
 80066ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2210      	movs	r2, #16
 80066f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	2200      	movs	r2, #0
 8006704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006708:	711a      	strb	r2, [r3, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d006      	beq.n	8006722 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800671c:	711a      	strb	r2, [r3, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2243      	movs	r2, #67	; 0x43
 8006726:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006728:	4b02      	ldr	r3, [pc, #8]	; (8006734 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000050 	.word	0x20000050

08006738 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006740:	2182      	movs	r1, #130	; 0x82
 8006742:	4818      	ldr	r0, [pc, #96]	; (80067a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006744:	f000 fd17 	bl	8007176 <USBD_GetEpDesc>
 8006748:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800674a:	2101      	movs	r1, #1
 800674c:	4815      	ldr	r0, [pc, #84]	; (80067a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800674e:	f000 fd12 	bl	8007176 <USBD_GetEpDesc>
 8006752:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006754:	2181      	movs	r1, #129	; 0x81
 8006756:	4813      	ldr	r0, [pc, #76]	; (80067a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006758:	f000 fd0d 	bl	8007176 <USBD_GetEpDesc>
 800675c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2210      	movs	r2, #16
 8006768:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d006      	beq.n	800677e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	2200      	movs	r2, #0
 8006774:	711a      	strb	r2, [r3, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f042 0202 	orr.w	r2, r2, #2
 800677c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d006      	beq.n	8006792 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	711a      	strb	r2, [r3, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f042 0202 	orr.w	r2, r2, #2
 8006790:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2243      	movs	r2, #67	; 0x43
 8006796:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006798:	4b02      	ldr	r3, [pc, #8]	; (80067a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000050 	.word	0x20000050

080067a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067b0:	2182      	movs	r1, #130	; 0x82
 80067b2:	4818      	ldr	r0, [pc, #96]	; (8006814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067b4:	f000 fcdf 	bl	8007176 <USBD_GetEpDesc>
 80067b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067ba:	2101      	movs	r1, #1
 80067bc:	4815      	ldr	r0, [pc, #84]	; (8006814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067be:	f000 fcda 	bl	8007176 <USBD_GetEpDesc>
 80067c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067c4:	2181      	movs	r1, #129	; 0x81
 80067c6:	4813      	ldr	r0, [pc, #76]	; (8006814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067c8:	f000 fcd5 	bl	8007176 <USBD_GetEpDesc>
 80067cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2210      	movs	r2, #16
 80067d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d006      	beq.n	80067ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e8:	711a      	strb	r2, [r3, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d006      	beq.n	8006802 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067fc:	711a      	strb	r2, [r3, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2243      	movs	r2, #67	; 0x43
 8006806:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006808:	4b02      	ldr	r3, [pc, #8]	; (8006814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000050 	.word	0x20000050

08006818 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	220a      	movs	r2, #10
 8006824:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006826:	4b03      	ldr	r3, [pc, #12]	; (8006834 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	2000000c 	.word	0x2000000c

08006838 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006848:	2303      	movs	r3, #3
 800684a:	e009      	b.n	8006860 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	33b0      	adds	r3, #176	; 0xb0
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	32b0      	adds	r2, #176	; 0xb0
 8006882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006886:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800688e:	2303      	movs	r3, #3
 8006890:	e008      	b.n	80068a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	32b0      	adds	r2, #176	; 0xb0
 80068c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e004      	b.n	80068de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
	...

080068ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	32b0      	adds	r2, #176	; 0xb0
 80068fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006902:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	32b0      	adds	r2, #176	; 0xb0
 8006912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800691a:	2303      	movs	r3, #3
 800691c:	e025      	b.n	800696a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11f      	bne.n	8006968 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2201      	movs	r2, #1
 800692c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006930:	4b10      	ldr	r3, [pc, #64]	; (8006974 <USBD_CDC_TransmitPacket+0x88>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f003 020f 	and.w	r2, r3, #15
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4403      	add	r3, r0
 800694a:	3318      	adds	r3, #24
 800694c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800694e:	4b09      	ldr	r3, [pc, #36]	; (8006974 <USBD_CDC_TransmitPacket+0x88>)
 8006950:	7819      	ldrb	r1, [r3, #0]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f002 f811 	bl	8008986 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000093 	.word	0x20000093

08006978 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	32b0      	adds	r2, #176	; 0xb0
 800698a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32b0      	adds	r2, #176	; 0xb0
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e018      	b.n	80069d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	7c1b      	ldrb	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069ae:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <USBD_CDC_ReceivePacket+0x68>)
 80069b0:	7819      	ldrb	r1, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f002 f803 	bl	80089c8 <USBD_LL_PrepareReceive>
 80069c2:	e008      	b.n	80069d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <USBD_CDC_ReceivePacket+0x68>)
 80069c6:	7819      	ldrb	r1, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069ce:	2340      	movs	r3, #64	; 0x40
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f001 fff9 	bl	80089c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000094 	.word	0x20000094

080069e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e01f      	b.n	8006a3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	79fa      	ldrb	r2, [r7, #7]
 8006a2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f001 fe73 	bl	800871c <USBD_LL_Init>
 8006a36:	4603      	mov	r3, r0
 8006a38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e025      	b.n	8006aa8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	32ae      	adds	r2, #174	; 0xae
 8006a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00f      	beq.n	8006a98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	32ae      	adds	r2, #174	; 0xae
 8006a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	f107 020e 	add.w	r2, r7, #14
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4798      	blx	r3
 8006a90:	4602      	mov	r2, r0
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fe7b 	bl	80087b4 <USBD_LL_Start>
 8006abe:	4603      	mov	r3, r0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ad0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d009      	beq.n	8006b0c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	78fa      	ldrb	r2, [r7, #3]
 8006b02:	4611      	mov	r1, r2
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	78fa      	ldrb	r2, [r7, #3]
 8006b30:	4611      	mov	r1, r2
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 f932 	bl	8007dc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b70:	461a      	mov	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d01a      	beq.n	8006bbc <USBD_LL_SetupStage+0x72>
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d822      	bhi.n	8006bd0 <USBD_LL_SetupStage+0x86>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <USBD_LL_SetupStage+0x4a>
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d00a      	beq.n	8006ba8 <USBD_LL_SetupStage+0x5e>
 8006b92:	e01d      	b.n	8006bd0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fb5f 	bl	8007260 <USBD_StdDevReq>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba6:	e020      	b.n	8006bea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fbc7 	bl	8007344 <USBD_StdItfReq>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bba:	e016      	b.n	8006bea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc29 	bl	800741c <USBD_StdEPReq>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8006bce:	e00c      	b.n	8006bea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fe48 	bl	8008874 <USBD_LL_StallEP>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
      break;
 8006be8:	bf00      	nop
  }

  return ret;
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d16e      	bne.n	8006cea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	f040 8098 	bne.w	8006d50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d913      	bls.n	8006c54 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	1ad2      	subs	r2, r2, r3
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	4293      	cmp	r3, r2
 8006c44:	bf28      	it	cs
 8006c46:	4613      	movcs	r3, r2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f001 f9ae 	bl	8007fae <USBD_CtlContinueRx>
 8006c52:	e07d      	b.n	8006d50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c5a:	f003 031f 	and.w	r3, r3, #31
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d014      	beq.n	8006c8c <USBD_LL_DataOutStage+0x98>
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d81d      	bhi.n	8006ca2 <USBD_LL_DataOutStage+0xae>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <USBD_LL_DataOutStage+0x7c>
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d003      	beq.n	8006c76 <USBD_LL_DataOutStage+0x82>
 8006c6e:	e018      	b.n	8006ca2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	75bb      	strb	r3, [r7, #22]
            break;
 8006c74:	e018      	b.n	8006ca8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fa5e 	bl	8007142 <USBD_CoreFindIF>
 8006c86:	4603      	mov	r3, r0
 8006c88:	75bb      	strb	r3, [r7, #22]
            break;
 8006c8a:	e00d      	b.n	8006ca8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	4619      	mov	r1, r3
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 fa60 	bl	800715c <USBD_CoreFindEP>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	75bb      	strb	r3, [r7, #22]
            break;
 8006ca0:	e002      	b.n	8006ca8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	75bb      	strb	r3, [r7, #22]
            break;
 8006ca6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ca8:	7dbb      	ldrb	r3, [r7, #22]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d119      	bne.n	8006ce2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d113      	bne.n	8006ce2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006cba:	7dba      	ldrb	r2, [r7, #22]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	32ae      	adds	r2, #174	; 0xae
 8006cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00b      	beq.n	8006ce2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006cca:	7dba      	ldrb	r2, [r7, #22]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006cd2:	7dba      	ldrb	r2, [r7, #22]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	32ae      	adds	r2, #174	; 0xae
 8006cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f001 f974 	bl	8007fd0 <USBD_CtlSendStatus>
 8006ce8:	e032      	b.n	8006d50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006cea:	7afb      	ldrb	r3, [r7, #11]
 8006cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 fa31 	bl	800715c <USBD_CoreFindEP>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cfe:	7dbb      	ldrb	r3, [r7, #22]
 8006d00:	2bff      	cmp	r3, #255	; 0xff
 8006d02:	d025      	beq.n	8006d50 <USBD_LL_DataOutStage+0x15c>
 8006d04:	7dbb      	ldrb	r3, [r7, #22]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d122      	bne.n	8006d50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d117      	bne.n	8006d46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d16:	7dba      	ldrb	r2, [r7, #22]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	32ae      	adds	r2, #174	; 0xae
 8006d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00f      	beq.n	8006d46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d26:	7dba      	ldrb	r2, [r7, #22]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d2e:	7dba      	ldrb	r2, [r7, #22]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	32ae      	adds	r2, #174	; 0xae
 8006d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	7afa      	ldrb	r2, [r7, #11]
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	4798      	blx	r3
 8006d42:	4603      	mov	r3, r0
 8006d44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	e000      	b.n	8006d52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b086      	sub	sp, #24
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	460b      	mov	r3, r1
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d68:	7afb      	ldrb	r3, [r7, #11]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d16f      	bne.n	8006e4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3314      	adds	r3, #20
 8006d72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d15a      	bne.n	8006e34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d914      	bls.n	8006db4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	1ad2      	subs	r2, r2, r3
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f001 f8d6 	bl	8007f52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006da6:	2300      	movs	r3, #0
 8006da8:	2200      	movs	r2, #0
 8006daa:	2100      	movs	r1, #0
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f001 fe0b 	bl	80089c8 <USBD_LL_PrepareReceive>
 8006db2:	e03f      	b.n	8006e34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d11c      	bne.n	8006dfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d316      	bcc.n	8006dfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d20f      	bcs.n	8006dfa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2100      	movs	r1, #0
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f001 f8b7 	bl	8007f52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dec:	2300      	movs	r3, #0
 8006dee:	2200      	movs	r2, #0
 8006df0:	2100      	movs	r1, #0
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f001 fde8 	bl	80089c8 <USBD_LL_PrepareReceive>
 8006df8:	e01c      	b.n	8006e34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d10f      	bne.n	8006e26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e26:	2180      	movs	r1, #128	; 0x80
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f001 fd23 	bl	8008874 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f001 f8e1 	bl	8007ff6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d03a      	beq.n	8006eb4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff fe42 	bl	8006ac8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e4c:	e032      	b.n	8006eb4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e4e:	7afb      	ldrb	r3, [r7, #11]
 8006e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	4619      	mov	r1, r3
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f97f 	bl	800715c <USBD_CoreFindEP>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
 8006e64:	2bff      	cmp	r3, #255	; 0xff
 8006e66:	d025      	beq.n	8006eb4 <USBD_LL_DataInStage+0x15a>
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d122      	bne.n	8006eb4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d11c      	bne.n	8006eb4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e7a:	7dfa      	ldrb	r2, [r7, #23]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	32ae      	adds	r2, #174	; 0xae
 8006e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d014      	beq.n	8006eb4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e8a:	7dfa      	ldrb	r2, [r7, #23]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e92:	7dfa      	ldrb	r2, [r7, #23]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	32ae      	adds	r2, #174	; 0xae
 8006e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	7afa      	ldrb	r2, [r7, #11]
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	4798      	blx	r3
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006eaa:	7dbb      	ldrb	r3, [r7, #22]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006eb0:	7dbb      	ldrb	r3, [r7, #22]
 8006eb2:	e000      	b.n	8006eb6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d014      	beq.n	8006f24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00e      	beq.n	8006f24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	6852      	ldr	r2, [r2, #4]
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	4611      	mov	r1, r2
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	4798      	blx	r3
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f20:	2303      	movs	r3, #3
 8006f22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f24:	2340      	movs	r3, #64	; 0x40
 8006f26:	2200      	movs	r2, #0
 8006f28:	2100      	movs	r1, #0
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 fc5d 	bl	80087ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2240      	movs	r2, #64	; 0x40
 8006f3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f40:	2340      	movs	r3, #64	; 0x40
 8006f42:	2200      	movs	r2, #0
 8006f44:	2180      	movs	r1, #128	; 0x80
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fc4f 	bl	80087ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2240      	movs	r2, #64	; 0x40
 8006f56:	621a      	str	r2, [r3, #32]

  return ret;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	78fa      	ldrb	r2, [r7, #3]
 8006f72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d106      	bne.n	8006fd0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d110      	bne.n	8007014 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d005      	beq.n	8007014 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	32ae      	adds	r2, #174	; 0xae
 8007034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800703c:	2303      	movs	r3, #3
 800703e:	e01c      	b.n	800707a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b03      	cmp	r3, #3
 800704a:	d115      	bne.n	8007078 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	32ae      	adds	r2, #174	; 0xae
 8007056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	32ae      	adds	r2, #174	; 0xae
 800706a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	78fa      	ldrb	r2, [r7, #3]
 8007072:	4611      	mov	r1, r2
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	32ae      	adds	r2, #174	; 0xae
 8007098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e01c      	b.n	80070de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d115      	bne.n	80070dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	32ae      	adds	r2, #174	; 0xae
 80070ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	32ae      	adds	r2, #174	; 0xae
 80070ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	4611      	mov	r1, r2
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00e      	beq.n	8007138 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6852      	ldr	r2, [r2, #4]
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	4611      	mov	r1, r2
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4798      	blx	r3
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007134:	2303      	movs	r3, #3
 8007136:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800714e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007168:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800718a:	2300      	movs	r3, #0
 800718c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	885b      	ldrh	r3, [r3, #2]
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	429a      	cmp	r2, r3
 800719c:	d920      	bls.n	80071e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80071a6:	e013      	b.n	80071d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80071a8:	f107 030a 	add.w	r3, r7, #10
 80071ac:	4619      	mov	r1, r3
 80071ae:	6978      	ldr	r0, [r7, #20]
 80071b0:	f000 f81b 	bl	80071ea <USBD_GetNextDesc>
 80071b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d108      	bne.n	80071d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	789b      	ldrb	r3, [r3, #2]
 80071c6:	78fa      	ldrb	r2, [r7, #3]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d008      	beq.n	80071de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	885b      	ldrh	r3, [r3, #2]
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	897b      	ldrh	r3, [r7, #10]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d8e5      	bhi.n	80071a8 <USBD_GetEpDesc+0x32>
 80071dc:	e000      	b.n	80071e0 <USBD_GetEpDesc+0x6a>
          break;
 80071de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80071e0:	693b      	ldr	r3, [r7, #16]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	881a      	ldrh	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	4413      	add	r3, r2
 8007204:	b29a      	uxth	r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4413      	add	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007216:	68fb      	ldr	r3, [r7, #12]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	3301      	adds	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007242:	8a3b      	ldrh	r3, [r7, #16]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	b21a      	sxth	r2, r3
 8007248:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800724c:	4313      	orrs	r3, r2
 800724e:	b21b      	sxth	r3, r3
 8007250:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007252:	89fb      	ldrh	r3, [r7, #14]
}
 8007254:	4618      	mov	r0, r3
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007276:	2b40      	cmp	r3, #64	; 0x40
 8007278:	d005      	beq.n	8007286 <USBD_StdDevReq+0x26>
 800727a:	2b40      	cmp	r3, #64	; 0x40
 800727c:	d857      	bhi.n	800732e <USBD_StdDevReq+0xce>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00f      	beq.n	80072a2 <USBD_StdDevReq+0x42>
 8007282:	2b20      	cmp	r3, #32
 8007284:	d153      	bne.n	800732e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	32ae      	adds	r2, #174	; 0xae
 8007290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	4798      	blx	r3
 800729c:	4603      	mov	r3, r0
 800729e:	73fb      	strb	r3, [r7, #15]
      break;
 80072a0:	e04a      	b.n	8007338 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	785b      	ldrb	r3, [r3, #1]
 80072a6:	2b09      	cmp	r3, #9
 80072a8:	d83b      	bhi.n	8007322 <USBD_StdDevReq+0xc2>
 80072aa:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <USBD_StdDevReq+0x50>)
 80072ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b0:	08007305 	.word	0x08007305
 80072b4:	08007319 	.word	0x08007319
 80072b8:	08007323 	.word	0x08007323
 80072bc:	0800730f 	.word	0x0800730f
 80072c0:	08007323 	.word	0x08007323
 80072c4:	080072e3 	.word	0x080072e3
 80072c8:	080072d9 	.word	0x080072d9
 80072cc:	08007323 	.word	0x08007323
 80072d0:	080072fb 	.word	0x080072fb
 80072d4:	080072ed 	.word	0x080072ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa3c 	bl	8007758 <USBD_GetDescriptor>
          break;
 80072e0:	e024      	b.n	800732c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fbcb 	bl	8007a80 <USBD_SetAddress>
          break;
 80072ea:	e01f      	b.n	800732c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fc0a 	bl	8007b08 <USBD_SetConfig>
 80072f4:	4603      	mov	r3, r0
 80072f6:	73fb      	strb	r3, [r7, #15]
          break;
 80072f8:	e018      	b.n	800732c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fcad 	bl	8007c5c <USBD_GetConfig>
          break;
 8007302:	e013      	b.n	800732c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fcde 	bl	8007cc8 <USBD_GetStatus>
          break;
 800730c:	e00e      	b.n	800732c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fd0d 	bl	8007d30 <USBD_SetFeature>
          break;
 8007316:	e009      	b.n	800732c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fd31 	bl	8007d82 <USBD_ClrFeature>
          break;
 8007320:	e004      	b.n	800732c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fd88 	bl	8007e3a <USBD_CtlError>
          break;
 800732a:	bf00      	nop
      }
      break;
 800732c:	e004      	b.n	8007338 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fd82 	bl	8007e3a <USBD_CtlError>
      break;
 8007336:	bf00      	nop
  }

  return ret;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop

08007344 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d005      	beq.n	800736a <USBD_StdItfReq+0x26>
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d852      	bhi.n	8007408 <USBD_StdItfReq+0xc4>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <USBD_StdItfReq+0x26>
 8007366:	2b20      	cmp	r3, #32
 8007368:	d14e      	bne.n	8007408 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007370:	b2db      	uxtb	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	2b02      	cmp	r3, #2
 8007376:	d840      	bhi.n	80073fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	889b      	ldrh	r3, [r3, #4]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b01      	cmp	r3, #1
 8007380:	d836      	bhi.n	80073f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	889b      	ldrh	r3, [r3, #4]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff fed9 	bl	8007142 <USBD_CoreFindIF>
 8007390:	4603      	mov	r3, r0
 8007392:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	2bff      	cmp	r3, #255	; 0xff
 8007398:	d01d      	beq.n	80073d6 <USBD_StdItfReq+0x92>
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d11a      	bne.n	80073d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80073a0:	7bba      	ldrb	r2, [r7, #14]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	32ae      	adds	r2, #174	; 0xae
 80073a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00f      	beq.n	80073d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80073b0:	7bba      	ldrb	r2, [r7, #14]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073b8:	7bba      	ldrb	r2, [r7, #14]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	32ae      	adds	r2, #174	; 0xae
 80073be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	4798      	blx	r3
 80073ca:	4603      	mov	r3, r0
 80073cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073ce:	e004      	b.n	80073da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80073d0:	2303      	movs	r3, #3
 80073d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073d4:	e001      	b.n	80073da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80073d6:	2303      	movs	r3, #3
 80073d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	88db      	ldrh	r3, [r3, #6]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d110      	bne.n	8007404 <USBD_StdItfReq+0xc0>
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10d      	bne.n	8007404 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fdf1 	bl	8007fd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073ee:	e009      	b.n	8007404 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fd21 	bl	8007e3a <USBD_CtlError>
          break;
 80073f8:	e004      	b.n	8007404 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fd1c 	bl	8007e3a <USBD_CtlError>
          break;
 8007402:	e000      	b.n	8007406 <USBD_StdItfReq+0xc2>
          break;
 8007404:	bf00      	nop
      }
      break;
 8007406:	e004      	b.n	8007412 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fd15 	bl	8007e3a <USBD_CtlError>
      break;
 8007410:	bf00      	nop
  }

  return ret;
 8007412:	7bfb      	ldrb	r3, [r7, #15]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	889b      	ldrh	r3, [r3, #4]
 800742e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d007      	beq.n	800744c <USBD_StdEPReq+0x30>
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	f200 817f 	bhi.w	8007740 <USBD_StdEPReq+0x324>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d02a      	beq.n	800749c <USBD_StdEPReq+0x80>
 8007446:	2b20      	cmp	r3, #32
 8007448:	f040 817a 	bne.w	8007740 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fe83 	bl	800715c <USBD_CoreFindEP>
 8007456:	4603      	mov	r3, r0
 8007458:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800745a:	7b7b      	ldrb	r3, [r7, #13]
 800745c:	2bff      	cmp	r3, #255	; 0xff
 800745e:	f000 8174 	beq.w	800774a <USBD_StdEPReq+0x32e>
 8007462:	7b7b      	ldrb	r3, [r7, #13]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f040 8170 	bne.w	800774a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800746a:	7b7a      	ldrb	r2, [r7, #13]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007472:	7b7a      	ldrb	r2, [r7, #13]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	32ae      	adds	r2, #174	; 0xae
 8007478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 8163 	beq.w	800774a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007484:	7b7a      	ldrb	r2, [r7, #13]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	32ae      	adds	r2, #174	; 0xae
 800748a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	4798      	blx	r3
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800749a:	e156      	b.n	800774a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d008      	beq.n	80074b6 <USBD_StdEPReq+0x9a>
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	f300 8145 	bgt.w	8007734 <USBD_StdEPReq+0x318>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 809b 	beq.w	80075e6 <USBD_StdEPReq+0x1ca>
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d03c      	beq.n	800752e <USBD_StdEPReq+0x112>
 80074b4:	e13e      	b.n	8007734 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d002      	beq.n	80074c8 <USBD_StdEPReq+0xac>
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d016      	beq.n	80074f4 <USBD_StdEPReq+0xd8>
 80074c6:	e02c      	b.n	8007522 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00d      	beq.n	80074ea <USBD_StdEPReq+0xce>
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	2b80      	cmp	r3, #128	; 0x80
 80074d2:	d00a      	beq.n	80074ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 f9cb 	bl	8008874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074de:	2180      	movs	r1, #128	; 0x80
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 f9c7 	bl	8008874 <USBD_LL_StallEP>
 80074e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074e8:	e020      	b.n	800752c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fca4 	bl	8007e3a <USBD_CtlError>
              break;
 80074f2:	e01b      	b.n	800752c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	885b      	ldrh	r3, [r3, #2]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10e      	bne.n	800751a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00b      	beq.n	800751a <USBD_StdEPReq+0xfe>
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	2b80      	cmp	r3, #128	; 0x80
 8007506:	d008      	beq.n	800751a <USBD_StdEPReq+0xfe>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	88db      	ldrh	r3, [r3, #6]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 f9ad 	bl	8008874 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fd58 	bl	8007fd0 <USBD_CtlSendStatus>

              break;
 8007520:	e004      	b.n	800752c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fc88 	bl	8007e3a <USBD_CtlError>
              break;
 800752a:	bf00      	nop
          }
          break;
 800752c:	e107      	b.n	800773e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d002      	beq.n	8007540 <USBD_StdEPReq+0x124>
 800753a:	2b03      	cmp	r3, #3
 800753c:	d016      	beq.n	800756c <USBD_StdEPReq+0x150>
 800753e:	e04b      	b.n	80075d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00d      	beq.n	8007562 <USBD_StdEPReq+0x146>
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b80      	cmp	r3, #128	; 0x80
 800754a:	d00a      	beq.n	8007562 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 f98f 	bl	8008874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007556:	2180      	movs	r1, #128	; 0x80
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f98b 	bl	8008874 <USBD_LL_StallEP>
 800755e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007560:	e040      	b.n	80075e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fc68 	bl	8007e3a <USBD_CtlError>
              break;
 800756a:	e03b      	b.n	80075e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	885b      	ldrh	r3, [r3, #2]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d136      	bne.n	80075e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800757a:	2b00      	cmp	r3, #0
 800757c:	d004      	beq.n	8007588 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 f995 	bl	80088b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fd21 	bl	8007fd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fde2 	bl	800715c <USBD_CoreFindEP>
 8007598:	4603      	mov	r3, r0
 800759a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800759c:	7b7b      	ldrb	r3, [r7, #13]
 800759e:	2bff      	cmp	r3, #255	; 0xff
 80075a0:	d01f      	beq.n	80075e2 <USBD_StdEPReq+0x1c6>
 80075a2:	7b7b      	ldrb	r3, [r7, #13]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d11c      	bne.n	80075e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80075a8:	7b7a      	ldrb	r2, [r7, #13]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80075b0:	7b7a      	ldrb	r2, [r7, #13]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	32ae      	adds	r2, #174	; 0xae
 80075b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d010      	beq.n	80075e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075c0:	7b7a      	ldrb	r2, [r7, #13]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	32ae      	adds	r2, #174	; 0xae
 80075c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
 80075d2:	4603      	mov	r3, r0
 80075d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80075d6:	e004      	b.n	80075e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fc2d 	bl	8007e3a <USBD_CtlError>
              break;
 80075e0:	e000      	b.n	80075e4 <USBD_StdEPReq+0x1c8>
              break;
 80075e2:	bf00      	nop
          }
          break;
 80075e4:	e0ab      	b.n	800773e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d002      	beq.n	80075f8 <USBD_StdEPReq+0x1dc>
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d032      	beq.n	800765c <USBD_StdEPReq+0x240>
 80075f6:	e097      	b.n	8007728 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <USBD_StdEPReq+0x1f2>
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	2b80      	cmp	r3, #128	; 0x80
 8007602:	d004      	beq.n	800760e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fc17 	bl	8007e3a <USBD_CtlError>
                break;
 800760c:	e091      	b.n	8007732 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800760e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007612:	2b00      	cmp	r3, #0
 8007614:	da0b      	bge.n	800762e <USBD_StdEPReq+0x212>
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	3310      	adds	r3, #16
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	4413      	add	r3, r2
 800762a:	3304      	adds	r3, #4
 800762c:	e00b      	b.n	8007646 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007634:	4613      	mov	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	3304      	adds	r3, #4
 8007646:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2202      	movs	r2, #2
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fc61 	bl	8007f1c <USBD_CtlSendData>
              break;
 800765a:	e06a      	b.n	8007732 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800765c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	da11      	bge.n	8007688 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	f003 020f 	and.w	r2, r3, #15
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	3324      	adds	r3, #36	; 0x24
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d117      	bne.n	80076ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fbda 	bl	8007e3a <USBD_CtlError>
                  break;
 8007686:	e054      	b.n	8007732 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	f003 020f 	and.w	r2, r3, #15
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	440b      	add	r3, r1
 800769a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fbc7 	bl	8007e3a <USBD_CtlError>
                  break;
 80076ac:	e041      	b.n	8007732 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	da0b      	bge.n	80076ce <USBD_StdEPReq+0x2b2>
 80076b6:	7bbb      	ldrb	r3, [r7, #14]
 80076b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	3310      	adds	r3, #16
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	4413      	add	r3, r2
 80076ca:	3304      	adds	r3, #4
 80076cc:	e00b      	b.n	80076e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	3304      	adds	r3, #4
 80076e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <USBD_StdEPReq+0x2d8>
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b80      	cmp	r3, #128	; 0x80
 80076f2:	d103      	bne.n	80076fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2200      	movs	r2, #0
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	e00e      	b.n	800771a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 f8f5 	bl	80088f0 <USBD_LL_IsStallEP>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2201      	movs	r2, #1
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e002      	b.n	800771a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2202      	movs	r2, #2
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fbfb 	bl	8007f1c <USBD_CtlSendData>
              break;
 8007726:	e004      	b.n	8007732 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fb85 	bl	8007e3a <USBD_CtlError>
              break;
 8007730:	bf00      	nop
          }
          break;
 8007732:	e004      	b.n	800773e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fb7f 	bl	8007e3a <USBD_CtlError>
          break;
 800773c:	bf00      	nop
      }
      break;
 800773e:	e005      	b.n	800774c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fb79 	bl	8007e3a <USBD_CtlError>
      break;
 8007748:	e000      	b.n	800774c <USBD_StdEPReq+0x330>
      break;
 800774a:	bf00      	nop
  }

  return ret;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	885b      	ldrh	r3, [r3, #2]
 8007772:	0a1b      	lsrs	r3, r3, #8
 8007774:	b29b      	uxth	r3, r3
 8007776:	3b01      	subs	r3, #1
 8007778:	2b0e      	cmp	r3, #14
 800777a:	f200 8152 	bhi.w	8007a22 <USBD_GetDescriptor+0x2ca>
 800777e:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <USBD_GetDescriptor+0x2c>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	080077f5 	.word	0x080077f5
 8007788:	0800780d 	.word	0x0800780d
 800778c:	0800784d 	.word	0x0800784d
 8007790:	08007a23 	.word	0x08007a23
 8007794:	08007a23 	.word	0x08007a23
 8007798:	080079c3 	.word	0x080079c3
 800779c:	080079ef 	.word	0x080079ef
 80077a0:	08007a23 	.word	0x08007a23
 80077a4:	08007a23 	.word	0x08007a23
 80077a8:	08007a23 	.word	0x08007a23
 80077ac:	08007a23 	.word	0x08007a23
 80077b0:	08007a23 	.word	0x08007a23
 80077b4:	08007a23 	.word	0x08007a23
 80077b8:	08007a23 	.word	0x08007a23
 80077bc:	080077c1 	.word	0x080077c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	7c12      	ldrb	r2, [r2, #16]
 80077d8:	f107 0108 	add.w	r1, r7, #8
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
 80077e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077e2:	e126      	b.n	8007a32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fb27 	bl	8007e3a <USBD_CtlError>
        err++;
 80077ec:	7afb      	ldrb	r3, [r7, #11]
 80077ee:	3301      	adds	r3, #1
 80077f0:	72fb      	strb	r3, [r7, #11]
      break;
 80077f2:	e11e      	b.n	8007a32 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	7c12      	ldrb	r2, [r2, #16]
 8007800:	f107 0108 	add.w	r1, r7, #8
 8007804:	4610      	mov	r0, r2
 8007806:	4798      	blx	r3
 8007808:	60f8      	str	r0, [r7, #12]
      break;
 800780a:	e112      	b.n	8007a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7c1b      	ldrb	r3, [r3, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10d      	bne.n	8007830 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	f107 0208 	add.w	r2, r7, #8
 8007820:	4610      	mov	r0, r2
 8007822:	4798      	blx	r3
 8007824:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	2202      	movs	r2, #2
 800782c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800782e:	e100      	b.n	8007a32 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	f107 0208 	add.w	r2, r7, #8
 800783c:	4610      	mov	r0, r2
 800783e:	4798      	blx	r3
 8007840:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3301      	adds	r3, #1
 8007846:	2202      	movs	r2, #2
 8007848:	701a      	strb	r2, [r3, #0]
      break;
 800784a:	e0f2      	b.n	8007a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	885b      	ldrh	r3, [r3, #2]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b05      	cmp	r3, #5
 8007854:	f200 80ac 	bhi.w	80079b0 <USBD_GetDescriptor+0x258>
 8007858:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <USBD_GetDescriptor+0x108>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	08007879 	.word	0x08007879
 8007864:	080078ad 	.word	0x080078ad
 8007868:	080078e1 	.word	0x080078e1
 800786c:	08007915 	.word	0x08007915
 8007870:	08007949 	.word	0x08007949
 8007874:	0800797d 	.word	0x0800797d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00b      	beq.n	800789c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	7c12      	ldrb	r2, [r2, #16]
 8007890:	f107 0108 	add.w	r1, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800789a:	e091      	b.n	80079c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 facb 	bl	8007e3a <USBD_CtlError>
            err++;
 80078a4:	7afb      	ldrb	r3, [r7, #11]
 80078a6:	3301      	adds	r3, #1
 80078a8:	72fb      	strb	r3, [r7, #11]
          break;
 80078aa:	e089      	b.n	80079c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	7c12      	ldrb	r2, [r2, #16]
 80078c4:	f107 0108 	add.w	r1, r7, #8
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ce:	e077      	b.n	80079c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fab1 	bl	8007e3a <USBD_CtlError>
            err++;
 80078d8:	7afb      	ldrb	r3, [r7, #11]
 80078da:	3301      	adds	r3, #1
 80078dc:	72fb      	strb	r3, [r7, #11]
          break;
 80078de:	e06f      	b.n	80079c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	7c12      	ldrb	r2, [r2, #16]
 80078f8:	f107 0108 	add.w	r1, r7, #8
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007902:	e05d      	b.n	80079c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa97 	bl	8007e3a <USBD_CtlError>
            err++;
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	3301      	adds	r3, #1
 8007910:	72fb      	strb	r3, [r7, #11]
          break;
 8007912:	e055      	b.n	80079c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	7c12      	ldrb	r2, [r2, #16]
 800792c:	f107 0108 	add.w	r1, r7, #8
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
 8007934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007936:	e043      	b.n	80079c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fa7d 	bl	8007e3a <USBD_CtlError>
            err++;
 8007940:	7afb      	ldrb	r3, [r7, #11]
 8007942:	3301      	adds	r3, #1
 8007944:	72fb      	strb	r3, [r7, #11]
          break;
 8007946:	e03b      	b.n	80079c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00b      	beq.n	800796c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	7c12      	ldrb	r2, [r2, #16]
 8007960:	f107 0108 	add.w	r1, r7, #8
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
 8007968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800796a:	e029      	b.n	80079c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa63 	bl	8007e3a <USBD_CtlError>
            err++;
 8007974:	7afb      	ldrb	r3, [r7, #11]
 8007976:	3301      	adds	r3, #1
 8007978:	72fb      	strb	r3, [r7, #11]
          break;
 800797a:	e021      	b.n	80079c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	7c12      	ldrb	r2, [r2, #16]
 8007994:	f107 0108 	add.w	r1, r7, #8
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800799e:	e00f      	b.n	80079c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fa49 	bl	8007e3a <USBD_CtlError>
            err++;
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	3301      	adds	r3, #1
 80079ac:	72fb      	strb	r3, [r7, #11]
          break;
 80079ae:	e007      	b.n	80079c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fa41 	bl	8007e3a <USBD_CtlError>
          err++;
 80079b8:	7afb      	ldrb	r3, [r7, #11]
 80079ba:	3301      	adds	r3, #1
 80079bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80079be:	bf00      	nop
      }
      break;
 80079c0:	e037      	b.n	8007a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	7c1b      	ldrb	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d109      	bne.n	80079de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d2:	f107 0208 	add.w	r2, r7, #8
 80079d6:	4610      	mov	r0, r2
 80079d8:	4798      	blx	r3
 80079da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079dc:	e029      	b.n	8007a32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa2a 	bl	8007e3a <USBD_CtlError>
        err++;
 80079e6:	7afb      	ldrb	r3, [r7, #11]
 80079e8:	3301      	adds	r3, #1
 80079ea:	72fb      	strb	r3, [r7, #11]
      break;
 80079ec:	e021      	b.n	8007a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7c1b      	ldrb	r3, [r3, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10d      	bne.n	8007a12 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	f107 0208 	add.w	r2, r7, #8
 8007a02:	4610      	mov	r0, r2
 8007a04:	4798      	blx	r3
 8007a06:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	2207      	movs	r2, #7
 8007a0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a10:	e00f      	b.n	8007a32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fa10 	bl	8007e3a <USBD_CtlError>
        err++;
 8007a1a:	7afb      	ldrb	r3, [r7, #11]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a20:	e007      	b.n	8007a32 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fa08 	bl	8007e3a <USBD_CtlError>
      err++;
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a30:	bf00      	nop
  }

  if (err != 0U)
 8007a32:	7afb      	ldrb	r3, [r7, #11]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d11e      	bne.n	8007a76 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	88db      	ldrh	r3, [r3, #6]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d016      	beq.n	8007a6e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007a40:	893b      	ldrh	r3, [r7, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00e      	beq.n	8007a64 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	88da      	ldrh	r2, [r3, #6]
 8007a4a:	893b      	ldrh	r3, [r7, #8]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	bf28      	it	cs
 8007a50:	4613      	movcs	r3, r2
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a56:	893b      	ldrh	r3, [r7, #8]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fa5d 	bl	8007f1c <USBD_CtlSendData>
 8007a62:	e009      	b.n	8007a78 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f9e7 	bl	8007e3a <USBD_CtlError>
 8007a6c:	e004      	b.n	8007a78 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 faae 	bl	8007fd0 <USBD_CtlSendStatus>
 8007a74:	e000      	b.n	8007a78 <USBD_GetDescriptor+0x320>
    return;
 8007a76:	bf00      	nop
  }
}
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop

08007a80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	889b      	ldrh	r3, [r3, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d131      	bne.n	8007af6 <USBD_SetAddress+0x76>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	88db      	ldrh	r3, [r3, #6]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d12d      	bne.n	8007af6 <USBD_SetAddress+0x76>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	885b      	ldrh	r3, [r3, #2]
 8007a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007aa0:	d829      	bhi.n	8007af6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d104      	bne.n	8007ac4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f9bc 	bl	8007e3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac2:	e01d      	b.n	8007b00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	7bfa      	ldrb	r2, [r7, #15]
 8007ac8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 ff39 	bl	8008948 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fa7a 	bl	8007fd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aea:	e009      	b.n	8007b00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af4:	e004      	b.n	8007b00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f99e 	bl	8007e3a <USBD_CtlError>
  }
}
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	885b      	ldrh	r3, [r3, #2]
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	4b4e      	ldr	r3, [pc, #312]	; (8007c58 <USBD_SetConfig+0x150>)
 8007b1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b20:	4b4d      	ldr	r3, [pc, #308]	; (8007c58 <USBD_SetConfig+0x150>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d905      	bls.n	8007b34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f985 	bl	8007e3a <USBD_CtlError>
    return USBD_FAIL;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e08c      	b.n	8007c4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d002      	beq.n	8007b46 <USBD_SetConfig+0x3e>
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d029      	beq.n	8007b98 <USBD_SetConfig+0x90>
 8007b44:	e075      	b.n	8007c32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b46:	4b44      	ldr	r3, [pc, #272]	; (8007c58 <USBD_SetConfig+0x150>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d020      	beq.n	8007b90 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007b4e:	4b42      	ldr	r3, [pc, #264]	; (8007c58 <USBD_SetConfig+0x150>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b58:	4b3f      	ldr	r3, [pc, #252]	; (8007c58 <USBD_SetConfig+0x150>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fe ffbd 	bl	8006ade <USBD_SetClassConfig>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d008      	beq.n	8007b80 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f962 	bl	8007e3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b7e:	e065      	b.n	8007c4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fa25 	bl	8007fd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2203      	movs	r2, #3
 8007b8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b8e:	e05d      	b.n	8007c4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fa1d 	bl	8007fd0 <USBD_CtlSendStatus>
      break;
 8007b96:	e059      	b.n	8007c4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b98:	4b2f      	ldr	r3, [pc, #188]	; (8007c58 <USBD_SetConfig+0x150>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d112      	bne.n	8007bc6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ba8:	4b2b      	ldr	r3, [pc, #172]	; (8007c58 <USBD_SetConfig+0x150>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bb2:	4b29      	ldr	r3, [pc, #164]	; (8007c58 <USBD_SetConfig+0x150>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fe ffac 	bl	8006b16 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa06 	bl	8007fd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bc4:	e042      	b.n	8007c4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007bc6:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <USBD_SetConfig+0x150>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d02a      	beq.n	8007c2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7fe ff9a 	bl	8006b16 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007be2:	4b1d      	ldr	r3, [pc, #116]	; (8007c58 <USBD_SetConfig+0x150>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bec:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <USBD_SetConfig+0x150>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7fe ff73 	bl	8006ade <USBD_SetClassConfig>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00f      	beq.n	8007c22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f918 	bl	8007e3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fe ff7f 	bl	8006b16 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c20:	e014      	b.n	8007c4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f9d4 	bl	8007fd0 <USBD_CtlSendStatus>
      break;
 8007c28:	e010      	b.n	8007c4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f9d0 	bl	8007fd0 <USBD_CtlSendStatus>
      break;
 8007c30:	e00c      	b.n	8007c4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f900 	bl	8007e3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c3a:	4b07      	ldr	r3, [pc, #28]	; (8007c58 <USBD_SetConfig+0x150>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7fe ff68 	bl	8006b16 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c46:	2303      	movs	r3, #3
 8007c48:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4a:	bf00      	nop
  }

  return ret;
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	200001c4 	.word	0x200001c4

08007c5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	88db      	ldrh	r3, [r3, #6]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d004      	beq.n	8007c78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f8e2 	bl	8007e3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c76:	e023      	b.n	8007cc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	dc02      	bgt.n	8007c8a <USBD_GetConfig+0x2e>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dc03      	bgt.n	8007c90 <USBD_GetConfig+0x34>
 8007c88:	e015      	b.n	8007cb6 <USBD_GetConfig+0x5a>
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d00b      	beq.n	8007ca6 <USBD_GetConfig+0x4a>
 8007c8e:	e012      	b.n	8007cb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	3308      	adds	r3, #8
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f93c 	bl	8007f1c <USBD_CtlSendData>
        break;
 8007ca4:	e00c      	b.n	8007cc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	2201      	movs	r2, #1
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f934 	bl	8007f1c <USBD_CtlSendData>
        break;
 8007cb4:	e004      	b.n	8007cc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f8be 	bl	8007e3a <USBD_CtlError>
        break;
 8007cbe:	bf00      	nop
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d81e      	bhi.n	8007d1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	88db      	ldrh	r3, [r3, #6]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d004      	beq.n	8007cf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f8a5 	bl	8007e3a <USBD_CtlError>
        break;
 8007cf0:	e01a      	b.n	8007d28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d005      	beq.n	8007d0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f043 0202 	orr.w	r2, r3, #2
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	330c      	adds	r3, #12
 8007d12:	2202      	movs	r2, #2
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f900 	bl	8007f1c <USBD_CtlSendData>
      break;
 8007d1c:	e004      	b.n	8007d28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f88a 	bl	8007e3a <USBD_CtlError>
      break;
 8007d26:	bf00      	nop
  }
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	885b      	ldrh	r3, [r3, #2]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d107      	bne.n	8007d52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f940 	bl	8007fd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007d50:	e013      	b.n	8007d7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	885b      	ldrh	r3, [r3, #2]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d10b      	bne.n	8007d72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	889b      	ldrh	r3, [r3, #4]
 8007d5e:	0a1b      	lsrs	r3, r3, #8
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f930 	bl	8007fd0 <USBD_CtlSendStatus>
}
 8007d70:	e003      	b.n	8007d7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f860 	bl	8007e3a <USBD_CtlError>
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	3b01      	subs	r3, #1
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d80b      	bhi.n	8007db2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	885b      	ldrh	r3, [r3, #2]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d10c      	bne.n	8007dbc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f910 	bl	8007fd0 <USBD_CtlSendStatus>
      }
      break;
 8007db0:	e004      	b.n	8007dbc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f840 	bl	8007e3a <USBD_CtlError>
      break;
 8007dba:	e000      	b.n	8007dbe <USBD_ClrFeature+0x3c>
      break;
 8007dbc:	bf00      	nop
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	781a      	ldrb	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3301      	adds	r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	781a      	ldrb	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff fa17 	bl	8007224 <SWAPBYTE>
 8007df6:	4603      	mov	r3, r0
 8007df8:	461a      	mov	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3301      	adds	r3, #1
 8007e02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f7ff fa0a 	bl	8007224 <SWAPBYTE>
 8007e10:	4603      	mov	r3, r0
 8007e12:	461a      	mov	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3301      	adds	r3, #1
 8007e22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7ff f9fd 	bl	8007224 <SWAPBYTE>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	80da      	strh	r2, [r3, #6]
}
 8007e32:	bf00      	nop
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e44:	2180      	movs	r1, #128	; 0x80
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fd14 	bl	8008874 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fd10 	bl	8008874 <USBD_LL_StallEP>
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d036      	beq.n	8007ee0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e76:	6938      	ldr	r0, [r7, #16]
 8007e78:	f000 f836 	bl	8007ee8 <USBD_GetLen>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	3301      	adds	r3, #1
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	4413      	add	r3, r2
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	7812      	ldrb	r2, [r2, #0]
 8007e94:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	2203      	movs	r2, #3
 8007ea4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007eac:	e013      	b.n	8007ed6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	7812      	ldrb	r2, [r2, #0]
 8007eb8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	613b      	str	r3, [r7, #16]
    idx++;
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	4413      	add	r3, r2
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e7      	bne.n	8007eae <USBD_GetString+0x52>
 8007ede:	e000      	b.n	8007ee2 <USBD_GetString+0x86>
    return;
 8007ee0:	bf00      	nop
  }
}
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ef8:	e005      	b.n	8007f06 <USBD_GetLen+0x1e>
  {
    len++;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	3301      	adds	r3, #1
 8007efe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	3301      	adds	r3, #1
 8007f04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1f5      	bne.n	8007efa <USBD_GetLen+0x12>
  }

  return len;
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	2100      	movs	r1, #0
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 fd1f 	bl	8008986 <USBD_LL_Transmit>

  return USBD_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	2100      	movs	r1, #0
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 fd0e 	bl	8008986 <USBD_LL_Transmit>

  return USBD_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2203      	movs	r2, #3
 8007f84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 fd12 	bl	80089c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fd01 	bl	80089c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2204      	movs	r2, #4
 8007fdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fccd 	bl	8008986 <USBD_LL_Transmit>

  return USBD_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2205      	movs	r2, #5
 8008002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008006:	2300      	movs	r3, #0
 8008008:	2200      	movs	r2, #0
 800800a:	2100      	movs	r1, #0
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fcdb 	bl	80089c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008020:	2200      	movs	r2, #0
 8008022:	4912      	ldr	r1, [pc, #72]	; (800806c <MX_USB_DEVICE_Init+0x50>)
 8008024:	4812      	ldr	r0, [pc, #72]	; (8008070 <MX_USB_DEVICE_Init+0x54>)
 8008026:	f7fe fcdd 	bl	80069e4 <USBD_Init>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008030:	f7f8 fcda 	bl	80009e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008034:	490f      	ldr	r1, [pc, #60]	; (8008074 <MX_USB_DEVICE_Init+0x58>)
 8008036:	480e      	ldr	r0, [pc, #56]	; (8008070 <MX_USB_DEVICE_Init+0x54>)
 8008038:	f7fe fd04 	bl	8006a44 <USBD_RegisterClass>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008042:	f7f8 fcd1 	bl	80009e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008046:	490c      	ldr	r1, [pc, #48]	; (8008078 <MX_USB_DEVICE_Init+0x5c>)
 8008048:	4809      	ldr	r0, [pc, #36]	; (8008070 <MX_USB_DEVICE_Init+0x54>)
 800804a:	f7fe fbf5 	bl	8006838 <USBD_CDC_RegisterInterface>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008054:	f7f8 fcc8 	bl	80009e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008058:	4805      	ldr	r0, [pc, #20]	; (8008070 <MX_USB_DEVICE_Init+0x54>)
 800805a:	f7fe fd29 	bl	8006ab0 <USBD_Start>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008064:	f7f8 fcc0 	bl	80009e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008068:	bf00      	nop
 800806a:	bd80      	pop	{r7, pc}
 800806c:	200000ac 	.word	0x200000ac
 8008070:	200001c8 	.word	0x200001c8
 8008074:	20000018 	.word	0x20000018
 8008078:	20000098 	.word	0x20000098

0800807c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008080:	2200      	movs	r2, #0
 8008082:	4905      	ldr	r1, [pc, #20]	; (8008098 <CDC_Init_FS+0x1c>)
 8008084:	4805      	ldr	r0, [pc, #20]	; (800809c <CDC_Init_FS+0x20>)
 8008086:	f7fe fbf1 	bl	800686c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800808a:	4905      	ldr	r1, [pc, #20]	; (80080a0 <CDC_Init_FS+0x24>)
 800808c:	4803      	ldr	r0, [pc, #12]	; (800809c <CDC_Init_FS+0x20>)
 800808e:	f7fe fc0f 	bl	80068b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008092:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008094:	4618      	mov	r0, r3
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000ca4 	.word	0x20000ca4
 800809c:	200001c8 	.word	0x200001c8
 80080a0:	200004a4 	.word	0x200004a4

080080a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080a4:	b480      	push	{r7}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	6039      	str	r1, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
 80080c0:	4613      	mov	r3, r2
 80080c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	2b23      	cmp	r3, #35	; 0x23
 80080c8:	d84a      	bhi.n	8008160 <CDC_Control_FS+0xac>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <CDC_Control_FS+0x1c>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	08008161 	.word	0x08008161
 80080d4:	08008161 	.word	0x08008161
 80080d8:	08008161 	.word	0x08008161
 80080dc:	08008161 	.word	0x08008161
 80080e0:	08008161 	.word	0x08008161
 80080e4:	08008161 	.word	0x08008161
 80080e8:	08008161 	.word	0x08008161
 80080ec:	08008161 	.word	0x08008161
 80080f0:	08008161 	.word	0x08008161
 80080f4:	08008161 	.word	0x08008161
 80080f8:	08008161 	.word	0x08008161
 80080fc:	08008161 	.word	0x08008161
 8008100:	08008161 	.word	0x08008161
 8008104:	08008161 	.word	0x08008161
 8008108:	08008161 	.word	0x08008161
 800810c:	08008161 	.word	0x08008161
 8008110:	08008161 	.word	0x08008161
 8008114:	08008161 	.word	0x08008161
 8008118:	08008161 	.word	0x08008161
 800811c:	08008161 	.word	0x08008161
 8008120:	08008161 	.word	0x08008161
 8008124:	08008161 	.word	0x08008161
 8008128:	08008161 	.word	0x08008161
 800812c:	08008161 	.word	0x08008161
 8008130:	08008161 	.word	0x08008161
 8008134:	08008161 	.word	0x08008161
 8008138:	08008161 	.word	0x08008161
 800813c:	08008161 	.word	0x08008161
 8008140:	08008161 	.word	0x08008161
 8008144:	08008161 	.word	0x08008161
 8008148:	08008161 	.word	0x08008161
 800814c:	08008161 	.word	0x08008161
 8008150:	08008161 	.word	0x08008161
 8008154:	08008161 	.word	0x08008161
 8008158:	08008161 	.word	0x08008161
 800815c:	08008161 	.word	0x08008161
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008160:	bf00      	nop
  }

  return (USBD_OK);
 8008162:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4805      	ldr	r0, [pc, #20]	; (8008194 <CDC_Receive_FS+0x24>)
 800817e:	f7fe fb97 	bl	80068b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008182:	4804      	ldr	r0, [pc, #16]	; (8008194 <CDC_Receive_FS+0x24>)
 8008184:	f7fe fbf8 	bl	8006978 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008188:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	200001c8 	.word	0x200001c8

08008198 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80081a8:	4b0d      	ldr	r3, [pc, #52]	; (80081e0 <CDC_Transmit_FS+0x48>)
 80081aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e00b      	b.n	80081d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081be:	887b      	ldrh	r3, [r7, #2]
 80081c0:	461a      	mov	r2, r3
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	4806      	ldr	r0, [pc, #24]	; (80081e0 <CDC_Transmit_FS+0x48>)
 80081c6:	f7fe fb51 	bl	800686c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081ca:	4805      	ldr	r0, [pc, #20]	; (80081e0 <CDC_Transmit_FS+0x48>)
 80081cc:	f7fe fb8e 	bl	80068ec <USBD_CDC_TransmitPacket>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	200001c8 	.word	0x200001c8

080081e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	4613      	mov	r3, r2
 80081f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80081f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
	...

08008208 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	6039      	str	r1, [r7, #0]
 8008212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2212      	movs	r2, #18
 8008218:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800821a:	4b03      	ldr	r3, [pc, #12]	; (8008228 <USBD_FS_DeviceDescriptor+0x20>)
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	200000cc 	.word	0x200000cc

0800822c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	6039      	str	r1, [r7, #0]
 8008236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2204      	movs	r2, #4
 800823c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800823e:	4b03      	ldr	r3, [pc, #12]	; (800824c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	200000ec 	.word	0x200000ec

08008250 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	6039      	str	r1, [r7, #0]
 800825a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d105      	bne.n	800826e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	4907      	ldr	r1, [pc, #28]	; (8008284 <USBD_FS_ProductStrDescriptor+0x34>)
 8008266:	4808      	ldr	r0, [pc, #32]	; (8008288 <USBD_FS_ProductStrDescriptor+0x38>)
 8008268:	f7ff fdf8 	bl	8007e5c <USBD_GetString>
 800826c:	e004      	b.n	8008278 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	4904      	ldr	r1, [pc, #16]	; (8008284 <USBD_FS_ProductStrDescriptor+0x34>)
 8008272:	4805      	ldr	r0, [pc, #20]	; (8008288 <USBD_FS_ProductStrDescriptor+0x38>)
 8008274:	f7ff fdf2 	bl	8007e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008278:	4b02      	ldr	r3, [pc, #8]	; (8008284 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	200014a4 	.word	0x200014a4
 8008288:	08009500 	.word	0x08009500

0800828c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	6039      	str	r1, [r7, #0]
 8008296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	4904      	ldr	r1, [pc, #16]	; (80082ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800829c:	4804      	ldr	r0, [pc, #16]	; (80082b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800829e:	f7ff fddd 	bl	8007e5c <USBD_GetString>
  return USBD_StrDesc;
 80082a2:	4b02      	ldr	r3, [pc, #8]	; (80082ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	200014a4 	.word	0x200014a4
 80082b0:	08009510 	.word	0x08009510

080082b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	4603      	mov	r3, r0
 80082bc:	6039      	str	r1, [r7, #0]
 80082be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	221a      	movs	r2, #26
 80082c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082c6:	f000 f855 	bl	8008374 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082ca:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	200000f0 	.word	0x200000f0

080082d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	6039      	str	r1, [r7, #0]
 80082e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	4907      	ldr	r1, [pc, #28]	; (800830c <USBD_FS_ConfigStrDescriptor+0x34>)
 80082ee:	4808      	ldr	r0, [pc, #32]	; (8008310 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082f0:	f7ff fdb4 	bl	8007e5c <USBD_GetString>
 80082f4:	e004      	b.n	8008300 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	4904      	ldr	r1, [pc, #16]	; (800830c <USBD_FS_ConfigStrDescriptor+0x34>)
 80082fa:	4805      	ldr	r0, [pc, #20]	; (8008310 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082fc:	f7ff fdae 	bl	8007e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008300:	4b02      	ldr	r3, [pc, #8]	; (800830c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	200014a4 	.word	0x200014a4
 8008310:	08009524 	.word	0x08009524

08008314 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	6039      	str	r1, [r7, #0]
 800831e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d105      	bne.n	8008332 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	4907      	ldr	r1, [pc, #28]	; (8008348 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800832a:	4808      	ldr	r0, [pc, #32]	; (800834c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800832c:	f7ff fd96 	bl	8007e5c <USBD_GetString>
 8008330:	e004      	b.n	800833c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	4904      	ldr	r1, [pc, #16]	; (8008348 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008336:	4805      	ldr	r0, [pc, #20]	; (800834c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008338:	f7ff fd90 	bl	8007e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800833c:	4b02      	ldr	r3, [pc, #8]	; (8008348 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	200014a4 	.word	0x200014a4
 800834c:	08009530 	.word	0x08009530

08008350 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	6039      	str	r1, [r7, #0]
 800835a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	220c      	movs	r2, #12
 8008360:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008362:	4b03      	ldr	r3, [pc, #12]	; (8008370 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008364:	4618      	mov	r0, r3
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	200000e0 	.word	0x200000e0

08008374 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800837a:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <Get_SerialNum+0x44>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008380:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <Get_SerialNum+0x48>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008386:	4b0e      	ldr	r3, [pc, #56]	; (80083c0 <Get_SerialNum+0x4c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4413      	add	r3, r2
 8008392:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800839a:	2208      	movs	r2, #8
 800839c:	4909      	ldr	r1, [pc, #36]	; (80083c4 <Get_SerialNum+0x50>)
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 f814 	bl	80083cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083a4:	2204      	movs	r2, #4
 80083a6:	4908      	ldr	r1, [pc, #32]	; (80083c8 <Get_SerialNum+0x54>)
 80083a8:	68b8      	ldr	r0, [r7, #8]
 80083aa:	f000 f80f 	bl	80083cc <IntToUnicode>
  }
}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	1fff7a10 	.word	0x1fff7a10
 80083bc:	1fff7a14 	.word	0x1fff7a14
 80083c0:	1fff7a18 	.word	0x1fff7a18
 80083c4:	200000f2 	.word	0x200000f2
 80083c8:	20000102 	.word	0x20000102

080083cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4613      	mov	r3, r2
 80083d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083de:	2300      	movs	r3, #0
 80083e0:	75fb      	strb	r3, [r7, #23]
 80083e2:	e027      	b.n	8008434 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	0f1b      	lsrs	r3, r3, #28
 80083e8:	2b09      	cmp	r3, #9
 80083ea:	d80b      	bhi.n	8008404 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	0f1b      	lsrs	r3, r3, #28
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	4619      	mov	r1, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	440b      	add	r3, r1
 80083fc:	3230      	adds	r2, #48	; 0x30
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	701a      	strb	r2, [r3, #0]
 8008402:	e00a      	b.n	800841a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	0f1b      	lsrs	r3, r3, #28
 8008408:	b2da      	uxtb	r2, r3
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	4619      	mov	r1, r3
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	440b      	add	r3, r1
 8008414:	3237      	adds	r2, #55	; 0x37
 8008416:	b2d2      	uxtb	r2, r2
 8008418:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	3301      	adds	r3, #1
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	4413      	add	r3, r2
 800842a:	2200      	movs	r2, #0
 800842c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	3301      	adds	r3, #1
 8008432:	75fb      	strb	r3, [r7, #23]
 8008434:	7dfa      	ldrb	r2, [r7, #23]
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	429a      	cmp	r2, r3
 800843a:	d3d3      	bcc.n	80083e4 <IntToUnicode+0x18>
  }
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
	...

0800844c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b0a0      	sub	sp, #128	; 0x80
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008454:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	605a      	str	r2, [r3, #4]
 800845e:	609a      	str	r2, [r3, #8]
 8008460:	60da      	str	r2, [r3, #12]
 8008462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008464:	f107 0310 	add.w	r3, r7, #16
 8008468:	225c      	movs	r2, #92	; 0x5c
 800846a:	2100      	movs	r1, #0
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fb9b 	bl	8008ba8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800847a:	d154      	bne.n	8008526 <HAL_PCD_MspInit+0xda>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800847c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008480:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8008482:	2304      	movs	r3, #4
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8008486:	2360      	movs	r3, #96	; 0x60
 8008488:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800848a:	2302      	movs	r3, #2
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800848e:	2304      	movs	r3, #4
 8008490:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8008492:	2301      	movs	r3, #1
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8008496:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800849a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800849c:	f107 0310 	add.w	r3, r7, #16
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fb f989 	bl	80037b8 <HAL_RCCEx_PeriphCLKConfig>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 80084ac:	f7f8 fa9c 	bl	80009e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084b0:	2300      	movs	r3, #0
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	4b1e      	ldr	r3, [pc, #120]	; (8008530 <HAL_PCD_MspInit+0xe4>)
 80084b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b8:	4a1d      	ldr	r2, [pc, #116]	; (8008530 <HAL_PCD_MspInit+0xe4>)
 80084ba:	f043 0301 	orr.w	r3, r3, #1
 80084be:	6313      	str	r3, [r2, #48]	; 0x30
 80084c0:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <HAL_PCD_MspInit+0xe4>)
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	60fb      	str	r3, [r7, #12]
 80084ca:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80084cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80084d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084d2:	2302      	movs	r3, #2
 80084d4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d6:	2300      	movs	r3, #0
 80084d8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084da:	2303      	movs	r3, #3
 80084dc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084de:	230a      	movs	r3, #10
 80084e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80084e6:	4619      	mov	r1, r3
 80084e8:	4812      	ldr	r0, [pc, #72]	; (8008534 <HAL_PCD_MspInit+0xe8>)
 80084ea:	f7f9 fbc5 	bl	8001c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084ee:	4b10      	ldr	r3, [pc, #64]	; (8008530 <HAL_PCD_MspInit+0xe4>)
 80084f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f2:	4a0f      	ldr	r2, [pc, #60]	; (8008530 <HAL_PCD_MspInit+0xe4>)
 80084f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f8:	6353      	str	r3, [r2, #52]	; 0x34
 80084fa:	2300      	movs	r3, #0
 80084fc:	60bb      	str	r3, [r7, #8]
 80084fe:	4b0c      	ldr	r3, [pc, #48]	; (8008530 <HAL_PCD_MspInit+0xe4>)
 8008500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008502:	4a0b      	ldr	r2, [pc, #44]	; (8008530 <HAL_PCD_MspInit+0xe4>)
 8008504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008508:	6453      	str	r3, [r2, #68]	; 0x44
 800850a:	4b09      	ldr	r3, [pc, #36]	; (8008530 <HAL_PCD_MspInit+0xe4>)
 800850c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008512:	60bb      	str	r3, [r7, #8]
 8008514:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008516:	2200      	movs	r2, #0
 8008518:	2100      	movs	r1, #0
 800851a:	2043      	movs	r0, #67	; 0x43
 800851c:	f7f9 fb75 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008520:	2043      	movs	r0, #67	; 0x43
 8008522:	f7f9 fb8e 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008526:	bf00      	nop
 8008528:	3780      	adds	r7, #128	; 0x80
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40023800 	.word	0x40023800
 8008534:	40020000 	.word	0x40020000

08008538 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800854c:	4619      	mov	r1, r3
 800854e:	4610      	mov	r0, r2
 8008550:	f7fe fafb 	bl	8006b4a <USBD_LL_SetupStage>
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	4613      	mov	r3, r2
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	4619      	mov	r1, r3
 8008586:	f7fe fb35 	bl	8006bf4 <USBD_LL_DataOutStage>
}
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80085a4:	78fa      	ldrb	r2, [r7, #3]
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	4613      	mov	r3, r2
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	334c      	adds	r3, #76	; 0x4c
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	4619      	mov	r1, r3
 80085ba:	f7fe fbce 	bl	8006d5a <USBD_LL_DataInStage>
}
 80085be:	bf00      	nop
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe fd02 	bl	8006fde <USBD_LL_SOF>
}
 80085da:	bf00      	nop
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085ea:	2301      	movs	r3, #1
 80085ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d102      	bne.n	80085fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
 80085fa:	e008      	b.n	800860e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	2b02      	cmp	r3, #2
 8008602:	d102      	bne.n	800860a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008604:	2301      	movs	r3, #1
 8008606:	73fb      	strb	r3, [r7, #15]
 8008608:	e001      	b.n	800860e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800860a:	f7f8 f9ed 	bl	80009e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008614:	7bfa      	ldrb	r2, [r7, #15]
 8008616:	4611      	mov	r1, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fca2 	bl	8006f62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fc4a 	bl	8006ebe <USBD_LL_Reset>
}
 800862a:	bf00      	nop
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fc9d 	bl	8006f82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	6812      	ldr	r2, [r2, #0]
 8008656:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800865a:	f043 0301 	orr.w	r3, r3, #1
 800865e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d005      	beq.n	8008674 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008668:	4b04      	ldr	r3, [pc, #16]	; (800867c <HAL_PCD_SuspendCallback+0x48>)
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	4a03      	ldr	r2, [pc, #12]	; (800867c <HAL_PCD_SuspendCallback+0x48>)
 800866e:	f043 0306 	orr.w	r3, r3, #6
 8008672:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008674:	bf00      	nop
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	e000ed00 	.word	0xe000ed00

08008680 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fc8d 	bl	8006fae <USBD_LL_Resume>
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086ae:	78fa      	ldrb	r2, [r7, #3]
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fce5 	bl	8007082 <USBD_LL_IsoOUTIncomplete>
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	4611      	mov	r1, r2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fca1 	bl	800701e <USBD_LL_IsoINIncomplete>
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe fcf7 	bl	80070e6 <USBD_LL_DevConnected>
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe fcf4 	bl	80070fc <USBD_LL_DevDisconnected>
}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d13c      	bne.n	80087a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800872c:	4a20      	ldr	r2, [pc, #128]	; (80087b0 <USBD_LL_Init+0x94>)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a1e      	ldr	r2, [pc, #120]	; (80087b0 <USBD_LL_Init+0x94>)
 8008738:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800873c:	4b1c      	ldr	r3, [pc, #112]	; (80087b0 <USBD_LL_Init+0x94>)
 800873e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008742:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008744:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <USBD_LL_Init+0x94>)
 8008746:	2206      	movs	r2, #6
 8008748:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800874a:	4b19      	ldr	r3, [pc, #100]	; (80087b0 <USBD_LL_Init+0x94>)
 800874c:	2202      	movs	r2, #2
 800874e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008750:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <USBD_LL_Init+0x94>)
 8008752:	2200      	movs	r2, #0
 8008754:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008756:	4b16      	ldr	r3, [pc, #88]	; (80087b0 <USBD_LL_Init+0x94>)
 8008758:	2202      	movs	r2, #2
 800875a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800875c:	4b14      	ldr	r3, [pc, #80]	; (80087b0 <USBD_LL_Init+0x94>)
 800875e:	2200      	movs	r2, #0
 8008760:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008762:	4b13      	ldr	r3, [pc, #76]	; (80087b0 <USBD_LL_Init+0x94>)
 8008764:	2200      	movs	r2, #0
 8008766:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008768:	4b11      	ldr	r3, [pc, #68]	; (80087b0 <USBD_LL_Init+0x94>)
 800876a:	2200      	movs	r2, #0
 800876c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800876e:	4b10      	ldr	r3, [pc, #64]	; (80087b0 <USBD_LL_Init+0x94>)
 8008770:	2200      	movs	r2, #0
 8008772:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008774:	4b0e      	ldr	r3, [pc, #56]	; (80087b0 <USBD_LL_Init+0x94>)
 8008776:	2200      	movs	r2, #0
 8008778:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800877a:	480d      	ldr	r0, [pc, #52]	; (80087b0 <USBD_LL_Init+0x94>)
 800877c:	f7f9 fc10 	bl	8001fa0 <HAL_PCD_Init>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008786:	f7f8 f92f 	bl	80009e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800878a:	2180      	movs	r1, #128	; 0x80
 800878c:	4808      	ldr	r0, [pc, #32]	; (80087b0 <USBD_LL_Init+0x94>)
 800878e:	f7fa fe9c 	bl	80034ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008792:	2240      	movs	r2, #64	; 0x40
 8008794:	2100      	movs	r1, #0
 8008796:	4806      	ldr	r0, [pc, #24]	; (80087b0 <USBD_LL_Init+0x94>)
 8008798:	f7fa fe50 	bl	800343c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800879c:	2280      	movs	r2, #128	; 0x80
 800879e:	2101      	movs	r1, #1
 80087a0:	4803      	ldr	r0, [pc, #12]	; (80087b0 <USBD_LL_Init+0x94>)
 80087a2:	f7fa fe4b 	bl	800343c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	200016a4 	.word	0x200016a4

080087b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7f9 fd0c 	bl	80021e8 <HAL_PCD_Start>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f990 	bl	8008afc <USBD_Get_USB_Status>
 80087dc:	4603      	mov	r3, r0
 80087de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	4608      	mov	r0, r1
 80087f4:	4611      	mov	r1, r2
 80087f6:	461a      	mov	r2, r3
 80087f8:	4603      	mov	r3, r0
 80087fa:	70fb      	strb	r3, [r7, #3]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70bb      	strb	r3, [r7, #2]
 8008800:	4613      	mov	r3, r2
 8008802:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008812:	78bb      	ldrb	r3, [r7, #2]
 8008814:	883a      	ldrh	r2, [r7, #0]
 8008816:	78f9      	ldrb	r1, [r7, #3]
 8008818:	f7fa fa0a 	bl	8002c30 <HAL_PCD_EP_Open>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f96a 	bl	8008afc <USBD_Get_USB_Status>
 8008828:	4603      	mov	r3, r0
 800882a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882c:	7bbb      	ldrb	r3, [r7, #14]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	460b      	mov	r3, r1
 8008840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008850:	78fa      	ldrb	r2, [r7, #3]
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f7fa fa53 	bl	8002d00 <HAL_PCD_EP_Close>
 800885a:	4603      	mov	r3, r0
 800885c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	4618      	mov	r0, r3
 8008862:	f000 f94b 	bl	8008afc <USBD_Get_USB_Status>
 8008866:	4603      	mov	r3, r0
 8008868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800886a:	7bbb      	ldrb	r3, [r7, #14]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f7fa fb2b 	bl	8002eee <HAL_PCD_EP_SetStall>
 8008898:	4603      	mov	r3, r0
 800889a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 f92c 	bl	8008afc <USBD_Get_USB_Status>
 80088a4:	4603      	mov	r3, r0
 80088a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	460b      	mov	r3, r1
 80088bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088cc:	78fa      	ldrb	r2, [r7, #3]
 80088ce:	4611      	mov	r1, r2
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fa fb70 	bl	8002fb6 <HAL_PCD_EP_ClrStall>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 f90d 	bl	8008afc <USBD_Get_USB_Status>
 80088e2:	4603      	mov	r3, r0
 80088e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008902:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008908:	2b00      	cmp	r3, #0
 800890a:	da0b      	bge.n	8008924 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008912:	68f9      	ldr	r1, [r7, #12]
 8008914:	4613      	mov	r3, r2
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	440b      	add	r3, r1
 800891e:	333e      	adds	r3, #62	; 0x3e
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	e00b      	b.n	800893c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800892a:	68f9      	ldr	r1, [r7, #12]
 800892c:	4613      	mov	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	440b      	add	r3, r1
 8008936:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800893a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	4611      	mov	r1, r2
 8008966:	4618      	mov	r0, r3
 8008968:	f7fa f93d 	bl	8002be6 <HAL_PCD_SetAddress>
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 f8c2 	bl	8008afc <USBD_Get_USB_Status>
 8008978:	4603      	mov	r3, r0
 800897a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800897c:	7bbb      	ldrb	r3, [r7, #14]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b086      	sub	sp, #24
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	603b      	str	r3, [r7, #0]
 8008992:	460b      	mov	r3, r1
 8008994:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089a4:	7af9      	ldrb	r1, [r7, #11]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	f7fa fa56 	bl	8002e5a <HAL_PCD_EP_Transmit>
 80089ae:	4603      	mov	r3, r0
 80089b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b2:	7dfb      	ldrb	r3, [r7, #23]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 f8a1 	bl	8008afc <USBD_Get_USB_Status>
 80089ba:	4603      	mov	r3, r0
 80089bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089be:	7dbb      	ldrb	r3, [r7, #22]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	607a      	str	r2, [r7, #4]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	460b      	mov	r3, r1
 80089d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089e6:	7af9      	ldrb	r1, [r7, #11]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	f7fa f9d2 	bl	8002d94 <HAL_PCD_EP_Receive>
 80089f0:	4603      	mov	r3, r0
 80089f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 f880 	bl	8008afc <USBD_Get_USB_Status>
 80089fc:	4603      	mov	r3, r0
 80089fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a00:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	460b      	mov	r3, r1
 8008a14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a1c:	78fa      	ldrb	r2, [r7, #3]
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fa fa02 	bl	8002e2a <HAL_PCD_EP_GetRxCount>
 8008a26:	4603      	mov	r3, r0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008a3c:	78fb      	ldrb	r3, [r7, #3]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <HAL_PCDEx_LPM_Callback+0x18>
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d01f      	beq.n	8008a86 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008a46:	e03b      	b.n	8008ac0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a1b      	ldr	r3, [r3, #32]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d007      	beq.n	8008a60 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008a50:	f7f7 ff58 	bl	8000904 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a54:	4b1c      	ldr	r3, [pc, #112]	; (8008ac8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	4a1b      	ldr	r2, [pc, #108]	; (8008ac8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008a5a:	f023 0306 	bic.w	r3, r3, #6
 8008a5e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	6812      	ldr	r2, [r2, #0]
 8008a6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a72:	f023 0301 	bic.w	r3, r3, #1
 8008a76:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fa95 	bl	8006fae <USBD_LL_Resume>
    break;
 8008a84:	e01c      	b.n	8008ac0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	6812      	ldr	r2, [r2, #0]
 8008a94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a98:	f043 0301 	orr.w	r3, r3, #1
 8008a9c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe fa6c 	bl	8006f82 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ab2:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	4a04      	ldr	r2, [pc, #16]	; (8008ac8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ab8:	f043 0306 	orr.w	r3, r3, #6
 8008abc:	6113      	str	r3, [r2, #16]
    break;
 8008abe:	bf00      	nop
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	e000ed00 	.word	0xe000ed00

08008acc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ad4:	4b03      	ldr	r3, [pc, #12]	; (8008ae4 <USBD_static_malloc+0x18>)
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	20001bb0 	.word	0x20001bb0

08008ae8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]

}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d817      	bhi.n	8008b40 <USBD_Get_USB_Status+0x44>
 8008b10:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <USBD_Get_USB_Status+0x1c>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b29 	.word	0x08008b29
 8008b1c:	08008b2f 	.word	0x08008b2f
 8008b20:	08008b35 	.word	0x08008b35
 8008b24:	08008b3b 	.word	0x08008b3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2c:	e00b      	b.n	8008b46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	73fb      	strb	r3, [r7, #15]
    break;
 8008b32:	e008      	b.n	8008b46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b34:	2301      	movs	r3, #1
 8008b36:	73fb      	strb	r3, [r7, #15]
    break;
 8008b38:	e005      	b.n	8008b46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3e:	e002      	b.n	8008b46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b40:	2303      	movs	r3, #3
 8008b42:	73fb      	strb	r3, [r7, #15]
    break;
 8008b44:	bf00      	nop
  }
  return usb_status;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <__errno>:
 8008b54:	4b01      	ldr	r3, [pc, #4]	; (8008b5c <__errno+0x8>)
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	2000010c 	.word	0x2000010c

08008b60 <__libc_init_array>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	4d0d      	ldr	r5, [pc, #52]	; (8008b98 <__libc_init_array+0x38>)
 8008b64:	4c0d      	ldr	r4, [pc, #52]	; (8008b9c <__libc_init_array+0x3c>)
 8008b66:	1b64      	subs	r4, r4, r5
 8008b68:	10a4      	asrs	r4, r4, #2
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	42a6      	cmp	r6, r4
 8008b6e:	d109      	bne.n	8008b84 <__libc_init_array+0x24>
 8008b70:	4d0b      	ldr	r5, [pc, #44]	; (8008ba0 <__libc_init_array+0x40>)
 8008b72:	4c0c      	ldr	r4, [pc, #48]	; (8008ba4 <__libc_init_array+0x44>)
 8008b74:	f000 fc8e 	bl	8009494 <_init>
 8008b78:	1b64      	subs	r4, r4, r5
 8008b7a:	10a4      	asrs	r4, r4, #2
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	42a6      	cmp	r6, r4
 8008b80:	d105      	bne.n	8008b8e <__libc_init_array+0x2e>
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b88:	4798      	blx	r3
 8008b8a:	3601      	adds	r6, #1
 8008b8c:	e7ee      	b.n	8008b6c <__libc_init_array+0xc>
 8008b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b92:	4798      	blx	r3
 8008b94:	3601      	adds	r6, #1
 8008b96:	e7f2      	b.n	8008b7e <__libc_init_array+0x1e>
 8008b98:	0800958c 	.word	0x0800958c
 8008b9c:	0800958c 	.word	0x0800958c
 8008ba0:	0800958c 	.word	0x0800958c
 8008ba4:	08009590 	.word	0x08009590

08008ba8 <memset>:
 8008ba8:	4402      	add	r2, r0
 8008baa:	4603      	mov	r3, r0
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d100      	bne.n	8008bb2 <memset+0xa>
 8008bb0:	4770      	bx	lr
 8008bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bb6:	e7f9      	b.n	8008bac <memset+0x4>

08008bb8 <siprintf>:
 8008bb8:	b40e      	push	{r1, r2, r3}
 8008bba:	b500      	push	{lr}
 8008bbc:	b09c      	sub	sp, #112	; 0x70
 8008bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8008bc0:	9002      	str	r0, [sp, #8]
 8008bc2:	9006      	str	r0, [sp, #24]
 8008bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bc8:	4809      	ldr	r0, [pc, #36]	; (8008bf0 <siprintf+0x38>)
 8008bca:	9107      	str	r1, [sp, #28]
 8008bcc:	9104      	str	r1, [sp, #16]
 8008bce:	4909      	ldr	r1, [pc, #36]	; (8008bf4 <siprintf+0x3c>)
 8008bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bd4:	9105      	str	r1, [sp, #20]
 8008bd6:	6800      	ldr	r0, [r0, #0]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	a902      	add	r1, sp, #8
 8008bdc:	f000 f868 	bl	8008cb0 <_svfiprintf_r>
 8008be0:	9b02      	ldr	r3, [sp, #8]
 8008be2:	2200      	movs	r2, #0
 8008be4:	701a      	strb	r2, [r3, #0]
 8008be6:	b01c      	add	sp, #112	; 0x70
 8008be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bec:	b003      	add	sp, #12
 8008bee:	4770      	bx	lr
 8008bf0:	2000010c 	.word	0x2000010c
 8008bf4:	ffff0208 	.word	0xffff0208

08008bf8 <__ssputs_r>:
 8008bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	688e      	ldr	r6, [r1, #8]
 8008bfe:	429e      	cmp	r6, r3
 8008c00:	4682      	mov	sl, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	4690      	mov	r8, r2
 8008c06:	461f      	mov	r7, r3
 8008c08:	d838      	bhi.n	8008c7c <__ssputs_r+0x84>
 8008c0a:	898a      	ldrh	r2, [r1, #12]
 8008c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c10:	d032      	beq.n	8008c78 <__ssputs_r+0x80>
 8008c12:	6825      	ldr	r5, [r4, #0]
 8008c14:	6909      	ldr	r1, [r1, #16]
 8008c16:	eba5 0901 	sub.w	r9, r5, r1
 8008c1a:	6965      	ldr	r5, [r4, #20]
 8008c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c24:	3301      	adds	r3, #1
 8008c26:	444b      	add	r3, r9
 8008c28:	106d      	asrs	r5, r5, #1
 8008c2a:	429d      	cmp	r5, r3
 8008c2c:	bf38      	it	cc
 8008c2e:	461d      	movcc	r5, r3
 8008c30:	0553      	lsls	r3, r2, #21
 8008c32:	d531      	bpl.n	8008c98 <__ssputs_r+0xa0>
 8008c34:	4629      	mov	r1, r5
 8008c36:	f000 fb63 	bl	8009300 <_malloc_r>
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	b950      	cbnz	r0, 8008c54 <__ssputs_r+0x5c>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	f8ca 3000 	str.w	r3, [sl]
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4a:	81a3      	strh	r3, [r4, #12]
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c54:	6921      	ldr	r1, [r4, #16]
 8008c56:	464a      	mov	r2, r9
 8008c58:	f000 fabe 	bl	80091d8 <memcpy>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c66:	81a3      	strh	r3, [r4, #12]
 8008c68:	6126      	str	r6, [r4, #16]
 8008c6a:	6165      	str	r5, [r4, #20]
 8008c6c:	444e      	add	r6, r9
 8008c6e:	eba5 0509 	sub.w	r5, r5, r9
 8008c72:	6026      	str	r6, [r4, #0]
 8008c74:	60a5      	str	r5, [r4, #8]
 8008c76:	463e      	mov	r6, r7
 8008c78:	42be      	cmp	r6, r7
 8008c7a:	d900      	bls.n	8008c7e <__ssputs_r+0x86>
 8008c7c:	463e      	mov	r6, r7
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	4632      	mov	r2, r6
 8008c82:	4641      	mov	r1, r8
 8008c84:	f000 fab6 	bl	80091f4 <memmove>
 8008c88:	68a3      	ldr	r3, [r4, #8]
 8008c8a:	1b9b      	subs	r3, r3, r6
 8008c8c:	60a3      	str	r3, [r4, #8]
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	4433      	add	r3, r6
 8008c92:	6023      	str	r3, [r4, #0]
 8008c94:	2000      	movs	r0, #0
 8008c96:	e7db      	b.n	8008c50 <__ssputs_r+0x58>
 8008c98:	462a      	mov	r2, r5
 8008c9a:	f000 fba5 	bl	80093e8 <_realloc_r>
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	d1e1      	bne.n	8008c68 <__ssputs_r+0x70>
 8008ca4:	6921      	ldr	r1, [r4, #16]
 8008ca6:	4650      	mov	r0, sl
 8008ca8:	f000 fabe 	bl	8009228 <_free_r>
 8008cac:	e7c7      	b.n	8008c3e <__ssputs_r+0x46>
	...

08008cb0 <_svfiprintf_r>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	4698      	mov	r8, r3
 8008cb6:	898b      	ldrh	r3, [r1, #12]
 8008cb8:	061b      	lsls	r3, r3, #24
 8008cba:	b09d      	sub	sp, #116	; 0x74
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	460d      	mov	r5, r1
 8008cc0:	4614      	mov	r4, r2
 8008cc2:	d50e      	bpl.n	8008ce2 <_svfiprintf_r+0x32>
 8008cc4:	690b      	ldr	r3, [r1, #16]
 8008cc6:	b963      	cbnz	r3, 8008ce2 <_svfiprintf_r+0x32>
 8008cc8:	2140      	movs	r1, #64	; 0x40
 8008cca:	f000 fb19 	bl	8009300 <_malloc_r>
 8008cce:	6028      	str	r0, [r5, #0]
 8008cd0:	6128      	str	r0, [r5, #16]
 8008cd2:	b920      	cbnz	r0, 8008cde <_svfiprintf_r+0x2e>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	e0d1      	b.n	8008e82 <_svfiprintf_r+0x1d2>
 8008cde:	2340      	movs	r3, #64	; 0x40
 8008ce0:	616b      	str	r3, [r5, #20]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce6:	2320      	movs	r3, #32
 8008ce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cf0:	2330      	movs	r3, #48	; 0x30
 8008cf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e9c <_svfiprintf_r+0x1ec>
 8008cf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cfa:	f04f 0901 	mov.w	r9, #1
 8008cfe:	4623      	mov	r3, r4
 8008d00:	469a      	mov	sl, r3
 8008d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d06:	b10a      	cbz	r2, 8008d0c <_svfiprintf_r+0x5c>
 8008d08:	2a25      	cmp	r2, #37	; 0x25
 8008d0a:	d1f9      	bne.n	8008d00 <_svfiprintf_r+0x50>
 8008d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d10:	d00b      	beq.n	8008d2a <_svfiprintf_r+0x7a>
 8008d12:	465b      	mov	r3, fp
 8008d14:	4622      	mov	r2, r4
 8008d16:	4629      	mov	r1, r5
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f7ff ff6d 	bl	8008bf8 <__ssputs_r>
 8008d1e:	3001      	adds	r0, #1
 8008d20:	f000 80aa 	beq.w	8008e78 <_svfiprintf_r+0x1c8>
 8008d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d26:	445a      	add	r2, fp
 8008d28:	9209      	str	r2, [sp, #36]	; 0x24
 8008d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 80a2 	beq.w	8008e78 <_svfiprintf_r+0x1c8>
 8008d34:	2300      	movs	r3, #0
 8008d36:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d3e:	f10a 0a01 	add.w	sl, sl, #1
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	9307      	str	r3, [sp, #28]
 8008d46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d4a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d4c:	4654      	mov	r4, sl
 8008d4e:	2205      	movs	r2, #5
 8008d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d54:	4851      	ldr	r0, [pc, #324]	; (8008e9c <_svfiprintf_r+0x1ec>)
 8008d56:	f7f7 fa63 	bl	8000220 <memchr>
 8008d5a:	9a04      	ldr	r2, [sp, #16]
 8008d5c:	b9d8      	cbnz	r0, 8008d96 <_svfiprintf_r+0xe6>
 8008d5e:	06d0      	lsls	r0, r2, #27
 8008d60:	bf44      	itt	mi
 8008d62:	2320      	movmi	r3, #32
 8008d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d68:	0711      	lsls	r1, r2, #28
 8008d6a:	bf44      	itt	mi
 8008d6c:	232b      	movmi	r3, #43	; 0x2b
 8008d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d72:	f89a 3000 	ldrb.w	r3, [sl]
 8008d76:	2b2a      	cmp	r3, #42	; 0x2a
 8008d78:	d015      	beq.n	8008da6 <_svfiprintf_r+0xf6>
 8008d7a:	9a07      	ldr	r2, [sp, #28]
 8008d7c:	4654      	mov	r4, sl
 8008d7e:	2000      	movs	r0, #0
 8008d80:	f04f 0c0a 	mov.w	ip, #10
 8008d84:	4621      	mov	r1, r4
 8008d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d8a:	3b30      	subs	r3, #48	; 0x30
 8008d8c:	2b09      	cmp	r3, #9
 8008d8e:	d94e      	bls.n	8008e2e <_svfiprintf_r+0x17e>
 8008d90:	b1b0      	cbz	r0, 8008dc0 <_svfiprintf_r+0x110>
 8008d92:	9207      	str	r2, [sp, #28]
 8008d94:	e014      	b.n	8008dc0 <_svfiprintf_r+0x110>
 8008d96:	eba0 0308 	sub.w	r3, r0, r8
 8008d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	9304      	str	r3, [sp, #16]
 8008da2:	46a2      	mov	sl, r4
 8008da4:	e7d2      	b.n	8008d4c <_svfiprintf_r+0x9c>
 8008da6:	9b03      	ldr	r3, [sp, #12]
 8008da8:	1d19      	adds	r1, r3, #4
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	9103      	str	r1, [sp, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	bfbb      	ittet	lt
 8008db2:	425b      	neglt	r3, r3
 8008db4:	f042 0202 	orrlt.w	r2, r2, #2
 8008db8:	9307      	strge	r3, [sp, #28]
 8008dba:	9307      	strlt	r3, [sp, #28]
 8008dbc:	bfb8      	it	lt
 8008dbe:	9204      	strlt	r2, [sp, #16]
 8008dc0:	7823      	ldrb	r3, [r4, #0]
 8008dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8008dc4:	d10c      	bne.n	8008de0 <_svfiprintf_r+0x130>
 8008dc6:	7863      	ldrb	r3, [r4, #1]
 8008dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dca:	d135      	bne.n	8008e38 <_svfiprintf_r+0x188>
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	1d1a      	adds	r2, r3, #4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	9203      	str	r2, [sp, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	bfb8      	it	lt
 8008dd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ddc:	3402      	adds	r4, #2
 8008dde:	9305      	str	r3, [sp, #20]
 8008de0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008eac <_svfiprintf_r+0x1fc>
 8008de4:	7821      	ldrb	r1, [r4, #0]
 8008de6:	2203      	movs	r2, #3
 8008de8:	4650      	mov	r0, sl
 8008dea:	f7f7 fa19 	bl	8000220 <memchr>
 8008dee:	b140      	cbz	r0, 8008e02 <_svfiprintf_r+0x152>
 8008df0:	2340      	movs	r3, #64	; 0x40
 8008df2:	eba0 000a 	sub.w	r0, r0, sl
 8008df6:	fa03 f000 	lsl.w	r0, r3, r0
 8008dfa:	9b04      	ldr	r3, [sp, #16]
 8008dfc:	4303      	orrs	r3, r0
 8008dfe:	3401      	adds	r4, #1
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e06:	4826      	ldr	r0, [pc, #152]	; (8008ea0 <_svfiprintf_r+0x1f0>)
 8008e08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e0c:	2206      	movs	r2, #6
 8008e0e:	f7f7 fa07 	bl	8000220 <memchr>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d038      	beq.n	8008e88 <_svfiprintf_r+0x1d8>
 8008e16:	4b23      	ldr	r3, [pc, #140]	; (8008ea4 <_svfiprintf_r+0x1f4>)
 8008e18:	bb1b      	cbnz	r3, 8008e62 <_svfiprintf_r+0x1b2>
 8008e1a:	9b03      	ldr	r3, [sp, #12]
 8008e1c:	3307      	adds	r3, #7
 8008e1e:	f023 0307 	bic.w	r3, r3, #7
 8008e22:	3308      	adds	r3, #8
 8008e24:	9303      	str	r3, [sp, #12]
 8008e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e28:	4433      	add	r3, r6
 8008e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e2c:	e767      	b.n	8008cfe <_svfiprintf_r+0x4e>
 8008e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e32:	460c      	mov	r4, r1
 8008e34:	2001      	movs	r0, #1
 8008e36:	e7a5      	b.n	8008d84 <_svfiprintf_r+0xd4>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	3401      	adds	r4, #1
 8008e3c:	9305      	str	r3, [sp, #20]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	f04f 0c0a 	mov.w	ip, #10
 8008e44:	4620      	mov	r0, r4
 8008e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e4a:	3a30      	subs	r2, #48	; 0x30
 8008e4c:	2a09      	cmp	r2, #9
 8008e4e:	d903      	bls.n	8008e58 <_svfiprintf_r+0x1a8>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d0c5      	beq.n	8008de0 <_svfiprintf_r+0x130>
 8008e54:	9105      	str	r1, [sp, #20]
 8008e56:	e7c3      	b.n	8008de0 <_svfiprintf_r+0x130>
 8008e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e7f0      	b.n	8008e44 <_svfiprintf_r+0x194>
 8008e62:	ab03      	add	r3, sp, #12
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	462a      	mov	r2, r5
 8008e68:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <_svfiprintf_r+0x1f8>)
 8008e6a:	a904      	add	r1, sp, #16
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	f3af 8000 	nop.w
 8008e72:	1c42      	adds	r2, r0, #1
 8008e74:	4606      	mov	r6, r0
 8008e76:	d1d6      	bne.n	8008e26 <_svfiprintf_r+0x176>
 8008e78:	89ab      	ldrh	r3, [r5, #12]
 8008e7a:	065b      	lsls	r3, r3, #25
 8008e7c:	f53f af2c 	bmi.w	8008cd8 <_svfiprintf_r+0x28>
 8008e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e82:	b01d      	add	sp, #116	; 0x74
 8008e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e88:	ab03      	add	r3, sp, #12
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	462a      	mov	r2, r5
 8008e8e:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <_svfiprintf_r+0x1f8>)
 8008e90:	a904      	add	r1, sp, #16
 8008e92:	4638      	mov	r0, r7
 8008e94:	f000 f87a 	bl	8008f8c <_printf_i>
 8008e98:	e7eb      	b.n	8008e72 <_svfiprintf_r+0x1c2>
 8008e9a:	bf00      	nop
 8008e9c:	08009550 	.word	0x08009550
 8008ea0:	0800955a 	.word	0x0800955a
 8008ea4:	00000000 	.word	0x00000000
 8008ea8:	08008bf9 	.word	0x08008bf9
 8008eac:	08009556 	.word	0x08009556

08008eb0 <_printf_common>:
 8008eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb4:	4616      	mov	r6, r2
 8008eb6:	4699      	mov	r9, r3
 8008eb8:	688a      	ldr	r2, [r1, #8]
 8008eba:	690b      	ldr	r3, [r1, #16]
 8008ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	bfb8      	it	lt
 8008ec4:	4613      	movlt	r3, r2
 8008ec6:	6033      	str	r3, [r6, #0]
 8008ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ecc:	4607      	mov	r7, r0
 8008ece:	460c      	mov	r4, r1
 8008ed0:	b10a      	cbz	r2, 8008ed6 <_printf_common+0x26>
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	6033      	str	r3, [r6, #0]
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	0699      	lsls	r1, r3, #26
 8008eda:	bf42      	ittt	mi
 8008edc:	6833      	ldrmi	r3, [r6, #0]
 8008ede:	3302      	addmi	r3, #2
 8008ee0:	6033      	strmi	r3, [r6, #0]
 8008ee2:	6825      	ldr	r5, [r4, #0]
 8008ee4:	f015 0506 	ands.w	r5, r5, #6
 8008ee8:	d106      	bne.n	8008ef8 <_printf_common+0x48>
 8008eea:	f104 0a19 	add.w	sl, r4, #25
 8008eee:	68e3      	ldr	r3, [r4, #12]
 8008ef0:	6832      	ldr	r2, [r6, #0]
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	42ab      	cmp	r3, r5
 8008ef6:	dc26      	bgt.n	8008f46 <_printf_common+0x96>
 8008ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008efc:	1e13      	subs	r3, r2, #0
 8008efe:	6822      	ldr	r2, [r4, #0]
 8008f00:	bf18      	it	ne
 8008f02:	2301      	movne	r3, #1
 8008f04:	0692      	lsls	r2, r2, #26
 8008f06:	d42b      	bmi.n	8008f60 <_printf_common+0xb0>
 8008f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	4638      	mov	r0, r7
 8008f10:	47c0      	blx	r8
 8008f12:	3001      	adds	r0, #1
 8008f14:	d01e      	beq.n	8008f54 <_printf_common+0xa4>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	68e5      	ldr	r5, [r4, #12]
 8008f1a:	6832      	ldr	r2, [r6, #0]
 8008f1c:	f003 0306 	and.w	r3, r3, #6
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	bf08      	it	eq
 8008f24:	1aad      	subeq	r5, r5, r2
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	6922      	ldr	r2, [r4, #16]
 8008f2a:	bf0c      	ite	eq
 8008f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f30:	2500      	movne	r5, #0
 8008f32:	4293      	cmp	r3, r2
 8008f34:	bfc4      	itt	gt
 8008f36:	1a9b      	subgt	r3, r3, r2
 8008f38:	18ed      	addgt	r5, r5, r3
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	341a      	adds	r4, #26
 8008f3e:	42b5      	cmp	r5, r6
 8008f40:	d11a      	bne.n	8008f78 <_printf_common+0xc8>
 8008f42:	2000      	movs	r0, #0
 8008f44:	e008      	b.n	8008f58 <_printf_common+0xa8>
 8008f46:	2301      	movs	r3, #1
 8008f48:	4652      	mov	r2, sl
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	47c0      	blx	r8
 8008f50:	3001      	adds	r0, #1
 8008f52:	d103      	bne.n	8008f5c <_printf_common+0xac>
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295
 8008f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	e7c6      	b.n	8008eee <_printf_common+0x3e>
 8008f60:	18e1      	adds	r1, r4, r3
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	2030      	movs	r0, #48	; 0x30
 8008f66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f6a:	4422      	add	r2, r4
 8008f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f74:	3302      	adds	r3, #2
 8008f76:	e7c7      	b.n	8008f08 <_printf_common+0x58>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	4638      	mov	r0, r7
 8008f80:	47c0      	blx	r8
 8008f82:	3001      	adds	r0, #1
 8008f84:	d0e6      	beq.n	8008f54 <_printf_common+0xa4>
 8008f86:	3601      	adds	r6, #1
 8008f88:	e7d9      	b.n	8008f3e <_printf_common+0x8e>
	...

08008f8c <_printf_i>:
 8008f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f90:	7e0f      	ldrb	r7, [r1, #24]
 8008f92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f94:	2f78      	cmp	r7, #120	; 0x78
 8008f96:	4691      	mov	r9, r2
 8008f98:	4680      	mov	r8, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	469a      	mov	sl, r3
 8008f9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fa2:	d807      	bhi.n	8008fb4 <_printf_i+0x28>
 8008fa4:	2f62      	cmp	r7, #98	; 0x62
 8008fa6:	d80a      	bhi.n	8008fbe <_printf_i+0x32>
 8008fa8:	2f00      	cmp	r7, #0
 8008faa:	f000 80d8 	beq.w	800915e <_printf_i+0x1d2>
 8008fae:	2f58      	cmp	r7, #88	; 0x58
 8008fb0:	f000 80a3 	beq.w	80090fa <_printf_i+0x16e>
 8008fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fbc:	e03a      	b.n	8009034 <_printf_i+0xa8>
 8008fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fc2:	2b15      	cmp	r3, #21
 8008fc4:	d8f6      	bhi.n	8008fb4 <_printf_i+0x28>
 8008fc6:	a101      	add	r1, pc, #4	; (adr r1, 8008fcc <_printf_i+0x40>)
 8008fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fcc:	08009025 	.word	0x08009025
 8008fd0:	08009039 	.word	0x08009039
 8008fd4:	08008fb5 	.word	0x08008fb5
 8008fd8:	08008fb5 	.word	0x08008fb5
 8008fdc:	08008fb5 	.word	0x08008fb5
 8008fe0:	08008fb5 	.word	0x08008fb5
 8008fe4:	08009039 	.word	0x08009039
 8008fe8:	08008fb5 	.word	0x08008fb5
 8008fec:	08008fb5 	.word	0x08008fb5
 8008ff0:	08008fb5 	.word	0x08008fb5
 8008ff4:	08008fb5 	.word	0x08008fb5
 8008ff8:	08009145 	.word	0x08009145
 8008ffc:	08009069 	.word	0x08009069
 8009000:	08009127 	.word	0x08009127
 8009004:	08008fb5 	.word	0x08008fb5
 8009008:	08008fb5 	.word	0x08008fb5
 800900c:	08009167 	.word	0x08009167
 8009010:	08008fb5 	.word	0x08008fb5
 8009014:	08009069 	.word	0x08009069
 8009018:	08008fb5 	.word	0x08008fb5
 800901c:	08008fb5 	.word	0x08008fb5
 8009020:	0800912f 	.word	0x0800912f
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	1d1a      	adds	r2, r3, #4
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	602a      	str	r2, [r5, #0]
 800902c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009034:	2301      	movs	r3, #1
 8009036:	e0a3      	b.n	8009180 <_printf_i+0x1f4>
 8009038:	6820      	ldr	r0, [r4, #0]
 800903a:	6829      	ldr	r1, [r5, #0]
 800903c:	0606      	lsls	r6, r0, #24
 800903e:	f101 0304 	add.w	r3, r1, #4
 8009042:	d50a      	bpl.n	800905a <_printf_i+0xce>
 8009044:	680e      	ldr	r6, [r1, #0]
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	2e00      	cmp	r6, #0
 800904a:	da03      	bge.n	8009054 <_printf_i+0xc8>
 800904c:	232d      	movs	r3, #45	; 0x2d
 800904e:	4276      	negs	r6, r6
 8009050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009054:	485e      	ldr	r0, [pc, #376]	; (80091d0 <_printf_i+0x244>)
 8009056:	230a      	movs	r3, #10
 8009058:	e019      	b.n	800908e <_printf_i+0x102>
 800905a:	680e      	ldr	r6, [r1, #0]
 800905c:	602b      	str	r3, [r5, #0]
 800905e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009062:	bf18      	it	ne
 8009064:	b236      	sxthne	r6, r6
 8009066:	e7ef      	b.n	8009048 <_printf_i+0xbc>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	6820      	ldr	r0, [r4, #0]
 800906c:	1d19      	adds	r1, r3, #4
 800906e:	6029      	str	r1, [r5, #0]
 8009070:	0601      	lsls	r1, r0, #24
 8009072:	d501      	bpl.n	8009078 <_printf_i+0xec>
 8009074:	681e      	ldr	r6, [r3, #0]
 8009076:	e002      	b.n	800907e <_printf_i+0xf2>
 8009078:	0646      	lsls	r6, r0, #25
 800907a:	d5fb      	bpl.n	8009074 <_printf_i+0xe8>
 800907c:	881e      	ldrh	r6, [r3, #0]
 800907e:	4854      	ldr	r0, [pc, #336]	; (80091d0 <_printf_i+0x244>)
 8009080:	2f6f      	cmp	r7, #111	; 0x6f
 8009082:	bf0c      	ite	eq
 8009084:	2308      	moveq	r3, #8
 8009086:	230a      	movne	r3, #10
 8009088:	2100      	movs	r1, #0
 800908a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800908e:	6865      	ldr	r5, [r4, #4]
 8009090:	60a5      	str	r5, [r4, #8]
 8009092:	2d00      	cmp	r5, #0
 8009094:	bfa2      	ittt	ge
 8009096:	6821      	ldrge	r1, [r4, #0]
 8009098:	f021 0104 	bicge.w	r1, r1, #4
 800909c:	6021      	strge	r1, [r4, #0]
 800909e:	b90e      	cbnz	r6, 80090a4 <_printf_i+0x118>
 80090a0:	2d00      	cmp	r5, #0
 80090a2:	d04d      	beq.n	8009140 <_printf_i+0x1b4>
 80090a4:	4615      	mov	r5, r2
 80090a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80090aa:	fb03 6711 	mls	r7, r3, r1, r6
 80090ae:	5dc7      	ldrb	r7, [r0, r7]
 80090b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090b4:	4637      	mov	r7, r6
 80090b6:	42bb      	cmp	r3, r7
 80090b8:	460e      	mov	r6, r1
 80090ba:	d9f4      	bls.n	80090a6 <_printf_i+0x11a>
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d10b      	bne.n	80090d8 <_printf_i+0x14c>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	07de      	lsls	r6, r3, #31
 80090c4:	d508      	bpl.n	80090d8 <_printf_i+0x14c>
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	6861      	ldr	r1, [r4, #4]
 80090ca:	4299      	cmp	r1, r3
 80090cc:	bfde      	ittt	le
 80090ce:	2330      	movle	r3, #48	; 0x30
 80090d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090d8:	1b52      	subs	r2, r2, r5
 80090da:	6122      	str	r2, [r4, #16]
 80090dc:	f8cd a000 	str.w	sl, [sp]
 80090e0:	464b      	mov	r3, r9
 80090e2:	aa03      	add	r2, sp, #12
 80090e4:	4621      	mov	r1, r4
 80090e6:	4640      	mov	r0, r8
 80090e8:	f7ff fee2 	bl	8008eb0 <_printf_common>
 80090ec:	3001      	adds	r0, #1
 80090ee:	d14c      	bne.n	800918a <_printf_i+0x1fe>
 80090f0:	f04f 30ff 	mov.w	r0, #4294967295
 80090f4:	b004      	add	sp, #16
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	4835      	ldr	r0, [pc, #212]	; (80091d0 <_printf_i+0x244>)
 80090fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009100:	6829      	ldr	r1, [r5, #0]
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	f851 6b04 	ldr.w	r6, [r1], #4
 8009108:	6029      	str	r1, [r5, #0]
 800910a:	061d      	lsls	r5, r3, #24
 800910c:	d514      	bpl.n	8009138 <_printf_i+0x1ac>
 800910e:	07df      	lsls	r7, r3, #31
 8009110:	bf44      	itt	mi
 8009112:	f043 0320 	orrmi.w	r3, r3, #32
 8009116:	6023      	strmi	r3, [r4, #0]
 8009118:	b91e      	cbnz	r6, 8009122 <_printf_i+0x196>
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	f023 0320 	bic.w	r3, r3, #32
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	2310      	movs	r3, #16
 8009124:	e7b0      	b.n	8009088 <_printf_i+0xfc>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	f043 0320 	orr.w	r3, r3, #32
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	2378      	movs	r3, #120	; 0x78
 8009130:	4828      	ldr	r0, [pc, #160]	; (80091d4 <_printf_i+0x248>)
 8009132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009136:	e7e3      	b.n	8009100 <_printf_i+0x174>
 8009138:	0659      	lsls	r1, r3, #25
 800913a:	bf48      	it	mi
 800913c:	b2b6      	uxthmi	r6, r6
 800913e:	e7e6      	b.n	800910e <_printf_i+0x182>
 8009140:	4615      	mov	r5, r2
 8009142:	e7bb      	b.n	80090bc <_printf_i+0x130>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	6826      	ldr	r6, [r4, #0]
 8009148:	6961      	ldr	r1, [r4, #20]
 800914a:	1d18      	adds	r0, r3, #4
 800914c:	6028      	str	r0, [r5, #0]
 800914e:	0635      	lsls	r5, r6, #24
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	d501      	bpl.n	8009158 <_printf_i+0x1cc>
 8009154:	6019      	str	r1, [r3, #0]
 8009156:	e002      	b.n	800915e <_printf_i+0x1d2>
 8009158:	0670      	lsls	r0, r6, #25
 800915a:	d5fb      	bpl.n	8009154 <_printf_i+0x1c8>
 800915c:	8019      	strh	r1, [r3, #0]
 800915e:	2300      	movs	r3, #0
 8009160:	6123      	str	r3, [r4, #16]
 8009162:	4615      	mov	r5, r2
 8009164:	e7ba      	b.n	80090dc <_printf_i+0x150>
 8009166:	682b      	ldr	r3, [r5, #0]
 8009168:	1d1a      	adds	r2, r3, #4
 800916a:	602a      	str	r2, [r5, #0]
 800916c:	681d      	ldr	r5, [r3, #0]
 800916e:	6862      	ldr	r2, [r4, #4]
 8009170:	2100      	movs	r1, #0
 8009172:	4628      	mov	r0, r5
 8009174:	f7f7 f854 	bl	8000220 <memchr>
 8009178:	b108      	cbz	r0, 800917e <_printf_i+0x1f2>
 800917a:	1b40      	subs	r0, r0, r5
 800917c:	6060      	str	r0, [r4, #4]
 800917e:	6863      	ldr	r3, [r4, #4]
 8009180:	6123      	str	r3, [r4, #16]
 8009182:	2300      	movs	r3, #0
 8009184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009188:	e7a8      	b.n	80090dc <_printf_i+0x150>
 800918a:	6923      	ldr	r3, [r4, #16]
 800918c:	462a      	mov	r2, r5
 800918e:	4649      	mov	r1, r9
 8009190:	4640      	mov	r0, r8
 8009192:	47d0      	blx	sl
 8009194:	3001      	adds	r0, #1
 8009196:	d0ab      	beq.n	80090f0 <_printf_i+0x164>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	079b      	lsls	r3, r3, #30
 800919c:	d413      	bmi.n	80091c6 <_printf_i+0x23a>
 800919e:	68e0      	ldr	r0, [r4, #12]
 80091a0:	9b03      	ldr	r3, [sp, #12]
 80091a2:	4298      	cmp	r0, r3
 80091a4:	bfb8      	it	lt
 80091a6:	4618      	movlt	r0, r3
 80091a8:	e7a4      	b.n	80090f4 <_printf_i+0x168>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4632      	mov	r2, r6
 80091ae:	4649      	mov	r1, r9
 80091b0:	4640      	mov	r0, r8
 80091b2:	47d0      	blx	sl
 80091b4:	3001      	adds	r0, #1
 80091b6:	d09b      	beq.n	80090f0 <_printf_i+0x164>
 80091b8:	3501      	adds	r5, #1
 80091ba:	68e3      	ldr	r3, [r4, #12]
 80091bc:	9903      	ldr	r1, [sp, #12]
 80091be:	1a5b      	subs	r3, r3, r1
 80091c0:	42ab      	cmp	r3, r5
 80091c2:	dcf2      	bgt.n	80091aa <_printf_i+0x21e>
 80091c4:	e7eb      	b.n	800919e <_printf_i+0x212>
 80091c6:	2500      	movs	r5, #0
 80091c8:	f104 0619 	add.w	r6, r4, #25
 80091cc:	e7f5      	b.n	80091ba <_printf_i+0x22e>
 80091ce:	bf00      	nop
 80091d0:	08009561 	.word	0x08009561
 80091d4:	08009572 	.word	0x08009572

080091d8 <memcpy>:
 80091d8:	440a      	add	r2, r1
 80091da:	4291      	cmp	r1, r2
 80091dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80091e0:	d100      	bne.n	80091e4 <memcpy+0xc>
 80091e2:	4770      	bx	lr
 80091e4:	b510      	push	{r4, lr}
 80091e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ee:	4291      	cmp	r1, r2
 80091f0:	d1f9      	bne.n	80091e6 <memcpy+0xe>
 80091f2:	bd10      	pop	{r4, pc}

080091f4 <memmove>:
 80091f4:	4288      	cmp	r0, r1
 80091f6:	b510      	push	{r4, lr}
 80091f8:	eb01 0402 	add.w	r4, r1, r2
 80091fc:	d902      	bls.n	8009204 <memmove+0x10>
 80091fe:	4284      	cmp	r4, r0
 8009200:	4623      	mov	r3, r4
 8009202:	d807      	bhi.n	8009214 <memmove+0x20>
 8009204:	1e43      	subs	r3, r0, #1
 8009206:	42a1      	cmp	r1, r4
 8009208:	d008      	beq.n	800921c <memmove+0x28>
 800920a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800920e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009212:	e7f8      	b.n	8009206 <memmove+0x12>
 8009214:	4402      	add	r2, r0
 8009216:	4601      	mov	r1, r0
 8009218:	428a      	cmp	r2, r1
 800921a:	d100      	bne.n	800921e <memmove+0x2a>
 800921c:	bd10      	pop	{r4, pc}
 800921e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009226:	e7f7      	b.n	8009218 <memmove+0x24>

08009228 <_free_r>:
 8009228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800922a:	2900      	cmp	r1, #0
 800922c:	d044      	beq.n	80092b8 <_free_r+0x90>
 800922e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009232:	9001      	str	r0, [sp, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	f1a1 0404 	sub.w	r4, r1, #4
 800923a:	bfb8      	it	lt
 800923c:	18e4      	addlt	r4, r4, r3
 800923e:	f000 f913 	bl	8009468 <__malloc_lock>
 8009242:	4a1e      	ldr	r2, [pc, #120]	; (80092bc <_free_r+0x94>)
 8009244:	9801      	ldr	r0, [sp, #4]
 8009246:	6813      	ldr	r3, [r2, #0]
 8009248:	b933      	cbnz	r3, 8009258 <_free_r+0x30>
 800924a:	6063      	str	r3, [r4, #4]
 800924c:	6014      	str	r4, [r2, #0]
 800924e:	b003      	add	sp, #12
 8009250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009254:	f000 b90e 	b.w	8009474 <__malloc_unlock>
 8009258:	42a3      	cmp	r3, r4
 800925a:	d908      	bls.n	800926e <_free_r+0x46>
 800925c:	6825      	ldr	r5, [r4, #0]
 800925e:	1961      	adds	r1, r4, r5
 8009260:	428b      	cmp	r3, r1
 8009262:	bf01      	itttt	eq
 8009264:	6819      	ldreq	r1, [r3, #0]
 8009266:	685b      	ldreq	r3, [r3, #4]
 8009268:	1949      	addeq	r1, r1, r5
 800926a:	6021      	streq	r1, [r4, #0]
 800926c:	e7ed      	b.n	800924a <_free_r+0x22>
 800926e:	461a      	mov	r2, r3
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	b10b      	cbz	r3, 8009278 <_free_r+0x50>
 8009274:	42a3      	cmp	r3, r4
 8009276:	d9fa      	bls.n	800926e <_free_r+0x46>
 8009278:	6811      	ldr	r1, [r2, #0]
 800927a:	1855      	adds	r5, r2, r1
 800927c:	42a5      	cmp	r5, r4
 800927e:	d10b      	bne.n	8009298 <_free_r+0x70>
 8009280:	6824      	ldr	r4, [r4, #0]
 8009282:	4421      	add	r1, r4
 8009284:	1854      	adds	r4, r2, r1
 8009286:	42a3      	cmp	r3, r4
 8009288:	6011      	str	r1, [r2, #0]
 800928a:	d1e0      	bne.n	800924e <_free_r+0x26>
 800928c:	681c      	ldr	r4, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	6053      	str	r3, [r2, #4]
 8009292:	4421      	add	r1, r4
 8009294:	6011      	str	r1, [r2, #0]
 8009296:	e7da      	b.n	800924e <_free_r+0x26>
 8009298:	d902      	bls.n	80092a0 <_free_r+0x78>
 800929a:	230c      	movs	r3, #12
 800929c:	6003      	str	r3, [r0, #0]
 800929e:	e7d6      	b.n	800924e <_free_r+0x26>
 80092a0:	6825      	ldr	r5, [r4, #0]
 80092a2:	1961      	adds	r1, r4, r5
 80092a4:	428b      	cmp	r3, r1
 80092a6:	bf04      	itt	eq
 80092a8:	6819      	ldreq	r1, [r3, #0]
 80092aa:	685b      	ldreq	r3, [r3, #4]
 80092ac:	6063      	str	r3, [r4, #4]
 80092ae:	bf04      	itt	eq
 80092b0:	1949      	addeq	r1, r1, r5
 80092b2:	6021      	streq	r1, [r4, #0]
 80092b4:	6054      	str	r4, [r2, #4]
 80092b6:	e7ca      	b.n	800924e <_free_r+0x26>
 80092b8:	b003      	add	sp, #12
 80092ba:	bd30      	pop	{r4, r5, pc}
 80092bc:	20001dd0 	.word	0x20001dd0

080092c0 <sbrk_aligned>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	4e0e      	ldr	r6, [pc, #56]	; (80092fc <sbrk_aligned+0x3c>)
 80092c4:	460c      	mov	r4, r1
 80092c6:	6831      	ldr	r1, [r6, #0]
 80092c8:	4605      	mov	r5, r0
 80092ca:	b911      	cbnz	r1, 80092d2 <sbrk_aligned+0x12>
 80092cc:	f000 f8bc 	bl	8009448 <_sbrk_r>
 80092d0:	6030      	str	r0, [r6, #0]
 80092d2:	4621      	mov	r1, r4
 80092d4:	4628      	mov	r0, r5
 80092d6:	f000 f8b7 	bl	8009448 <_sbrk_r>
 80092da:	1c43      	adds	r3, r0, #1
 80092dc:	d00a      	beq.n	80092f4 <sbrk_aligned+0x34>
 80092de:	1cc4      	adds	r4, r0, #3
 80092e0:	f024 0403 	bic.w	r4, r4, #3
 80092e4:	42a0      	cmp	r0, r4
 80092e6:	d007      	beq.n	80092f8 <sbrk_aligned+0x38>
 80092e8:	1a21      	subs	r1, r4, r0
 80092ea:	4628      	mov	r0, r5
 80092ec:	f000 f8ac 	bl	8009448 <_sbrk_r>
 80092f0:	3001      	adds	r0, #1
 80092f2:	d101      	bne.n	80092f8 <sbrk_aligned+0x38>
 80092f4:	f04f 34ff 	mov.w	r4, #4294967295
 80092f8:	4620      	mov	r0, r4
 80092fa:	bd70      	pop	{r4, r5, r6, pc}
 80092fc:	20001dd4 	.word	0x20001dd4

08009300 <_malloc_r>:
 8009300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009304:	1ccd      	adds	r5, r1, #3
 8009306:	f025 0503 	bic.w	r5, r5, #3
 800930a:	3508      	adds	r5, #8
 800930c:	2d0c      	cmp	r5, #12
 800930e:	bf38      	it	cc
 8009310:	250c      	movcc	r5, #12
 8009312:	2d00      	cmp	r5, #0
 8009314:	4607      	mov	r7, r0
 8009316:	db01      	blt.n	800931c <_malloc_r+0x1c>
 8009318:	42a9      	cmp	r1, r5
 800931a:	d905      	bls.n	8009328 <_malloc_r+0x28>
 800931c:	230c      	movs	r3, #12
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	2600      	movs	r6, #0
 8009322:	4630      	mov	r0, r6
 8009324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009328:	4e2e      	ldr	r6, [pc, #184]	; (80093e4 <_malloc_r+0xe4>)
 800932a:	f000 f89d 	bl	8009468 <__malloc_lock>
 800932e:	6833      	ldr	r3, [r6, #0]
 8009330:	461c      	mov	r4, r3
 8009332:	bb34      	cbnz	r4, 8009382 <_malloc_r+0x82>
 8009334:	4629      	mov	r1, r5
 8009336:	4638      	mov	r0, r7
 8009338:	f7ff ffc2 	bl	80092c0 <sbrk_aligned>
 800933c:	1c43      	adds	r3, r0, #1
 800933e:	4604      	mov	r4, r0
 8009340:	d14d      	bne.n	80093de <_malloc_r+0xde>
 8009342:	6834      	ldr	r4, [r6, #0]
 8009344:	4626      	mov	r6, r4
 8009346:	2e00      	cmp	r6, #0
 8009348:	d140      	bne.n	80093cc <_malloc_r+0xcc>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	4631      	mov	r1, r6
 800934e:	4638      	mov	r0, r7
 8009350:	eb04 0803 	add.w	r8, r4, r3
 8009354:	f000 f878 	bl	8009448 <_sbrk_r>
 8009358:	4580      	cmp	r8, r0
 800935a:	d13a      	bne.n	80093d2 <_malloc_r+0xd2>
 800935c:	6821      	ldr	r1, [r4, #0]
 800935e:	3503      	adds	r5, #3
 8009360:	1a6d      	subs	r5, r5, r1
 8009362:	f025 0503 	bic.w	r5, r5, #3
 8009366:	3508      	adds	r5, #8
 8009368:	2d0c      	cmp	r5, #12
 800936a:	bf38      	it	cc
 800936c:	250c      	movcc	r5, #12
 800936e:	4629      	mov	r1, r5
 8009370:	4638      	mov	r0, r7
 8009372:	f7ff ffa5 	bl	80092c0 <sbrk_aligned>
 8009376:	3001      	adds	r0, #1
 8009378:	d02b      	beq.n	80093d2 <_malloc_r+0xd2>
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	442b      	add	r3, r5
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	e00e      	b.n	80093a0 <_malloc_r+0xa0>
 8009382:	6822      	ldr	r2, [r4, #0]
 8009384:	1b52      	subs	r2, r2, r5
 8009386:	d41e      	bmi.n	80093c6 <_malloc_r+0xc6>
 8009388:	2a0b      	cmp	r2, #11
 800938a:	d916      	bls.n	80093ba <_malloc_r+0xba>
 800938c:	1961      	adds	r1, r4, r5
 800938e:	42a3      	cmp	r3, r4
 8009390:	6025      	str	r5, [r4, #0]
 8009392:	bf18      	it	ne
 8009394:	6059      	strne	r1, [r3, #4]
 8009396:	6863      	ldr	r3, [r4, #4]
 8009398:	bf08      	it	eq
 800939a:	6031      	streq	r1, [r6, #0]
 800939c:	5162      	str	r2, [r4, r5]
 800939e:	604b      	str	r3, [r1, #4]
 80093a0:	4638      	mov	r0, r7
 80093a2:	f104 060b 	add.w	r6, r4, #11
 80093a6:	f000 f865 	bl	8009474 <__malloc_unlock>
 80093aa:	f026 0607 	bic.w	r6, r6, #7
 80093ae:	1d23      	adds	r3, r4, #4
 80093b0:	1af2      	subs	r2, r6, r3
 80093b2:	d0b6      	beq.n	8009322 <_malloc_r+0x22>
 80093b4:	1b9b      	subs	r3, r3, r6
 80093b6:	50a3      	str	r3, [r4, r2]
 80093b8:	e7b3      	b.n	8009322 <_malloc_r+0x22>
 80093ba:	6862      	ldr	r2, [r4, #4]
 80093bc:	42a3      	cmp	r3, r4
 80093be:	bf0c      	ite	eq
 80093c0:	6032      	streq	r2, [r6, #0]
 80093c2:	605a      	strne	r2, [r3, #4]
 80093c4:	e7ec      	b.n	80093a0 <_malloc_r+0xa0>
 80093c6:	4623      	mov	r3, r4
 80093c8:	6864      	ldr	r4, [r4, #4]
 80093ca:	e7b2      	b.n	8009332 <_malloc_r+0x32>
 80093cc:	4634      	mov	r4, r6
 80093ce:	6876      	ldr	r6, [r6, #4]
 80093d0:	e7b9      	b.n	8009346 <_malloc_r+0x46>
 80093d2:	230c      	movs	r3, #12
 80093d4:	603b      	str	r3, [r7, #0]
 80093d6:	4638      	mov	r0, r7
 80093d8:	f000 f84c 	bl	8009474 <__malloc_unlock>
 80093dc:	e7a1      	b.n	8009322 <_malloc_r+0x22>
 80093de:	6025      	str	r5, [r4, #0]
 80093e0:	e7de      	b.n	80093a0 <_malloc_r+0xa0>
 80093e2:	bf00      	nop
 80093e4:	20001dd0 	.word	0x20001dd0

080093e8 <_realloc_r>:
 80093e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ec:	4680      	mov	r8, r0
 80093ee:	4614      	mov	r4, r2
 80093f0:	460e      	mov	r6, r1
 80093f2:	b921      	cbnz	r1, 80093fe <_realloc_r+0x16>
 80093f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093f8:	4611      	mov	r1, r2
 80093fa:	f7ff bf81 	b.w	8009300 <_malloc_r>
 80093fe:	b92a      	cbnz	r2, 800940c <_realloc_r+0x24>
 8009400:	f7ff ff12 	bl	8009228 <_free_r>
 8009404:	4625      	mov	r5, r4
 8009406:	4628      	mov	r0, r5
 8009408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800940c:	f000 f838 	bl	8009480 <_malloc_usable_size_r>
 8009410:	4284      	cmp	r4, r0
 8009412:	4607      	mov	r7, r0
 8009414:	d802      	bhi.n	800941c <_realloc_r+0x34>
 8009416:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800941a:	d812      	bhi.n	8009442 <_realloc_r+0x5a>
 800941c:	4621      	mov	r1, r4
 800941e:	4640      	mov	r0, r8
 8009420:	f7ff ff6e 	bl	8009300 <_malloc_r>
 8009424:	4605      	mov	r5, r0
 8009426:	2800      	cmp	r0, #0
 8009428:	d0ed      	beq.n	8009406 <_realloc_r+0x1e>
 800942a:	42bc      	cmp	r4, r7
 800942c:	4622      	mov	r2, r4
 800942e:	4631      	mov	r1, r6
 8009430:	bf28      	it	cs
 8009432:	463a      	movcs	r2, r7
 8009434:	f7ff fed0 	bl	80091d8 <memcpy>
 8009438:	4631      	mov	r1, r6
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff fef4 	bl	8009228 <_free_r>
 8009440:	e7e1      	b.n	8009406 <_realloc_r+0x1e>
 8009442:	4635      	mov	r5, r6
 8009444:	e7df      	b.n	8009406 <_realloc_r+0x1e>
	...

08009448 <_sbrk_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d06      	ldr	r5, [pc, #24]	; (8009464 <_sbrk_r+0x1c>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	602b      	str	r3, [r5, #0]
 8009454:	f7f7 fb92 	bl	8000b7c <_sbrk>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_sbrk_r+0x1a>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_sbrk_r+0x1a>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	20001dd8 	.word	0x20001dd8

08009468 <__malloc_lock>:
 8009468:	4801      	ldr	r0, [pc, #4]	; (8009470 <__malloc_lock+0x8>)
 800946a:	f000 b811 	b.w	8009490 <__retarget_lock_acquire_recursive>
 800946e:	bf00      	nop
 8009470:	20001ddc 	.word	0x20001ddc

08009474 <__malloc_unlock>:
 8009474:	4801      	ldr	r0, [pc, #4]	; (800947c <__malloc_unlock+0x8>)
 8009476:	f000 b80c 	b.w	8009492 <__retarget_lock_release_recursive>
 800947a:	bf00      	nop
 800947c:	20001ddc 	.word	0x20001ddc

08009480 <_malloc_usable_size_r>:
 8009480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009484:	1f18      	subs	r0, r3, #4
 8009486:	2b00      	cmp	r3, #0
 8009488:	bfbc      	itt	lt
 800948a:	580b      	ldrlt	r3, [r1, r0]
 800948c:	18c0      	addlt	r0, r0, r3
 800948e:	4770      	bx	lr

08009490 <__retarget_lock_acquire_recursive>:
 8009490:	4770      	bx	lr

08009492 <__retarget_lock_release_recursive>:
 8009492:	4770      	bx	lr

08009494 <_init>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	bf00      	nop
 8009498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949a:	bc08      	pop	{r3}
 800949c:	469e      	mov	lr, r3
 800949e:	4770      	bx	lr

080094a0 <_fini>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	bf00      	nop
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr
